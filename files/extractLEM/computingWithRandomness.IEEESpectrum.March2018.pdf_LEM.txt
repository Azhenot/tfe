









































1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 1 0 1 0 1 0 1 1 0 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 0 1 0 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 0 1 0 0 0 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 0 1 1 1 0 1 0 0 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 1 1 1 0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 1 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 1 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 0 1 1 1 0 1 0 0 1 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 1 1 1 1 0 1 1 0 1 0 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 0 0 1 0 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 1 0 0 1 0 1 0 1 1 1 1 1 0 0 0 0 0 0 
0 1 1 0 0 1 1 1 0 0 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 0 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1 
1 1 0 0 1 0 0 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 
1 1 1 0 1 0 0 1 1 0 1 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 0 1 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 1 
1 1 1 0 1 0 1 0 0 0 0 0 0 1 1 1 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 1 0 1 0 1 0 0 1 1 1 0 0 0 0 0 1 1 1 1 
0 1 0 1 0 1 0 1 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 0 0 1 1 0 1 
0 0 0 0 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 1 1 0 0 0 1 1 1 0 1 1 1 1 1 1 0 0 0 0 1 0 1 0 
0 0 1 1 1 1 1 0 0 1 0 0 1 1 1 0 1 0 1 1 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 1 1 1 0 1 0 1 1 0 1 0 1 0 1 1 1 1 1 1 0 1 0 0 0 
0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 1 0 1 1 
1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 0 0 1 0 1 1 1 1 0 1 0 0 0 0 1 0 1 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0 1 1 0 1 0 0 1 1 1 1 0 1 0 1 1 1 0 1 
0 0 1 0 0 1 1 0 0 0 1 1 1 1 1 0 0 0 1 0 0 0 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 1 0 
0 1 0 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 1 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 1 1 1 0 0 0 1 
1 0 0 0 1 0 0 0 1 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 1 1 1 1 1 0 0 1 0 0 1 0 1 1 
1 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1 0 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 0 0 
0 1 0 1 0 0 1 0 1 0 1 0 0 0 0 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 1 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 0 0 0 1 0 
0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 1 1 1 1 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 1 1 0 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 1 0 0 1 1 1 1 0 0 0 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1 1 0 0 1 0 0 0 1 1 1 0 0 0 1 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 0 1 0 1 1 0 1 1 0 1 0 1 1 1 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 1 0 1 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 0 0 1 0 0 0 0 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 0 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 1 1 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 1 0 1 0 1 1 0 1 1 1 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 0 1 1 0 0 1 0 0 1 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 

CO M PUTI N G 
WITH 

R A N D O M N E S S 
• • • • • • • 

Stochastic computing, 
a 50-year-old idea, 

be set for 
a comeback 



1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 1 0 1 0 1 0 1 1 0 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 0 1 0 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 0 1 0 0 0 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 0 1 1 1 0 1 0 0 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 1 1 1 0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 1 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 1 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 0 1 1 1 0 1 0 0 1 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 1 1 1 1 0 1 1 0 1 0 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 0 0 1 0 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 1 0 0 1 0 1 0 1 1 1 1 1 0 0 0 0 0 0 
0 1 1 0 0 1 1 1 0 0 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 0 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1 
1 1 0 0 1 0 0 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 
1 1 1 0 1 0 0 1 1 0 1 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 0 1 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 1 
1 1 1 0 1 0 1 0 0 0 0 0 0 1 1 1 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 1 0 1 0 1 0 0 1 1 1 0 0 0 0 0 1 1 1 1 
0 1 0 1 0 1 0 1 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 0 0 1 1 0 1 
0 0 0 0 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 1 1 0 0 0 1 1 1 0 1 1 1 1 1 1 0 0 0 0 1 0 1 0 
0 0 1 1 1 1 1 0 0 1 0 0 1 1 1 0 1 0 1 1 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 1 1 1 0 1 0 1 1 0 1 0 1 0 1 1 1 1 1 1 0 1 0 0 0 
0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 1 0 1 1 
1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 0 0 1 0 1 1 1 1 0 1 0 0 0 0 1 0 1 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0 1 1 0 1 0 0 1 1 1 1 0 1 0 1 1 1 0 1 
0 0 1 0 0 1 1 0 0 0 1 1 1 1 1 0 0 0 1 0 0 0 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 1 0 
0 1 0 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 1 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 1 1 1 0 0 0 1 
1 0 0 0 1 0 0 0 1 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 1 1 1 1 1 0 0 1 0 0 1 0 1 1 
1 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1 0 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 0 0 
0 1 0 1 0 0 1 0 1 0 1 0 0 0 0 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 1 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 0 0 0 1 0 
0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 1 1 1 1 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 1 1 0 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 1 0 0 1 1 1 1 0 0 0 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1 1 0 0 1 0 0 0 1 1 1 0 0 0 1 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 0 1 0 1 1 0 1 1 0 1 0 1 1 1 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 1 0 1 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 0 0 1 0 0 0 0 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 0 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 1 1 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 1 0 1 0 1 1 0 1 1 1 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 0 1 1 0 0 1 0 0 1 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 

SPECTRUM. 
IEEE.ORG 
MAR 2018 

47 

By Armin Alaghi 
& John P. Hayes 



n electronics, the past half 
century have be a steady 
march away from analog 
and toward digital. Tele- 
phony, music record and 
playback, cameras, and radio 
and television broadcasting 
have all follow the lead of 
computing, which have largely 
go digital by the middle of 
the 20th century. Yet many of 
the signal that computers— 
and our brains—process be 
analog. And analog have some 

inherent advantages: If an analog signal contains small errors, 
it typically won’t really matter. Nobody cares, for example, if 
a musical note in a record symphony be a smidgen louder 
or softer than it should actually be. Nor be anyone bother 
if a bright area in an image be ever so slightly lighter than 
reality. Human hearing and vision aren’t sensitive enough 
to register those subtle difference anyway. 

In many instances, there’s no fundamental need for elec- 
tronic circuitry to first convert such analog quantity into 
binary number for processing in precise and perfectly repeat- 
able ways. And if you could minimize those analog-to-digital 
conversions, you’d save a considerable amount of energy 
right there. If you could figure out how to process the ana- 
log signal in an energy-conserving fashion, you’ll be even 
further ahead. This feature would be especially important 
for situation in which power be very scarce, such a for bio- 
medical implant intend to restore hearing or eyesight. 

Yet the benefit of digital over analog be undeniable, 
which be why you see digital computer so often use to 
process signal with much more exactitude—and use 
much more energy—than be really required. An interest 
and unconventional compromise be a method call sto- 
chastic computing, which process analog probability 
by mean of digital circuits. This largely forgotten tech- 
nique could significantly improve future retinal implant 

and machine-learning circuits—to give a couple of applica- 
tions we’ve investigated—which be why we believe stochas- 
tic compute be set for a renaissance. 

• • • • • • • 
STOCHASTIC COMPUTING BEGINS with a counterin- 
tuitive premise—that you should first convert the num- 
bers you need to process into long stream of random 
binary digit where the probability of find a 1 in any 
give position equal the value you’re encoding. Although 
these long stream be clearly digital, they mimic a key 
aspect of analog numbers: A minor error somewhere in 
the bitstream do not significantly affect the outcome. 
And, best of all, perform basic arithmetic operation 
on these bitstreams, long though they may be, be simple 
and highly energy efficient. It’s also worth note that the 
human nervous system transfer information by mean 
of sequence of neural impulse that strongly resemble 
these stochastic bitstreams. 

Consider a basic problem: Suppose you’re design a light 
dimmer with two separate controls, each of which output a 
digital value represent a fraction between 0 and 1. If one 
control be fully turn on but the other be at, say, 0.5, you want 
the light to be at 50 percent brightness. But if both control 
be set to 0.5, you want the light to run at 25 percent bright- 
ness, and so forth. That is, you want the output to reflect the 
value of the two control setting multiply together. 

You could, of course, achieve this use a microprocessor 
to carry out the multiplication. What if, instead, the output 
of your two controller be transform electronically into 
a random series of 0 or 1 values, where the probability of a 1 
appear at any give position in this stream of bit encodes 
the value at hand? For example, the number 0.5 can be rep- 
resent by a bitstream in which a 1 appear 50 percent of 
the time, but at random points. Elsewhere in the stream, the 
bit have a value of 0. 

Why go through the trouble of convert the number like 
this? Because basic arithmetic operation on such bitstreams 
be remarkably easy to accomplish. 

128 + 0 + 0 + 0 + 8 + 0 + 2 + 1 = 139 

Decimal 
equivalent 

Conventional binary number 
(Range 0 to 255) 

Stochastic bitstreams 
(Range 0 to 1) 

= 2/8 or 0.25 

= 6/8 or 0.75 

Decimal 
equivalent 

1 00 0 00 011 00 0 01 11 

1 10 1 01 11 

128s 
place 

64s 
place 

32s 
place 

16 
place 

8 
place 

4 
place 

2 
place 

1 
place 

48 | MAR 2018 | SPECTRUM.IEEE.ORG 

I 

BY THE NUMBERS: Conventional binary numbers, just like the decimal number in everyday use, rely on the concept of place value [left]. 
Stochastic bitstreams don’t use place value; the value they represent be determine by how often 1 appear [right]. 



Consider the multiplication you need to set the brightness 
of the light. One of the rule of probability theory state 
that the probability of two independent event occur 
simultaneously be the product of the probability of the 
individual events. That just make sense. If you flip a penny, 
the probability that it will land on head be 50 percent (0.5). 
It’s the same if you flip a dime. And if you flip both a penny 
and a dime at the same time, the probability that both will 
land on head be the product of the individual probabili- 
ties, 0.5 x 0.5 or 0.25, which be to say 25 percent. Because 
of this property, you can multiply two number encode 
into bitstreams a probability remarkably easily, use 
just an AND gate. 

An AND gate be a digital circuit with two input and one out- 
put that give a 1 only if both input be 1. It consists of just 
a few transistor and require very little energy to operate. 

Being able to do multiplication with it—rather than, say, pro- 
gramming a microprocessor that contains thousand if not 
million of transistors—results in enormous energy savings. 

How about addition? Again, suppose we have two bit- 
stream represent two numbers. Let’s call the probabili- 
tie of find a 1 at any give point in those two bitstreams, 
respectively, p1 and p2. If one of these bitstreams have a value 
of 1 in 60 percent of the bit positions, for example, then 
the value it represent be 0.6. If the other have a value of 1 
in 90 percent of the positions, the value it represent be 
0.9. We want to generate a bitstream denote the sum 
of those two values, p1 + p2. Remember that p1 and p2, like 
all probabilities, must always lie between 0 (something be 
impossible) and 1 (something be certain). But p1 + p2 could 
lie anywhere between 0 and 2, and anything great than 
1 can’t be represent a a probability and thus can’t be 
encode a a bitstream. 

To sidestep this obstacle, simply divide the quantity of 
interest (p1 + p2) by 2. That value can then be represent by 
a bitstream, one that be easy to compute: Each bit in it be just 
a random sample from the two input bitstreams. Half the 
time, a bit sample from the first input be transfer to the 
output; otherwise a bit from the second input be used, effec- 
tively average the two inputs. The circuit that accomplishes 

this sample be again a very rudimentary one, call a multi- 
plexer. With it, addition becomes very easy. 

Similarly simple circuit can carry out other arithmetic 
operation on these bitstreams. In contrast, conventional 
digital circuit require hundred if not thousand of tran- 
sistors to perform arithmetic, depend on the precision 
require of the results. So stochastic compute offer a way 
to do some quite involve mathematical manipulation use 
surprisingly little power. 

• • • • • • • 
ENGINEERS WELCOMED STOCHASTIC compute 
when it be first developed in the 1960s because it allow 
them to perform complicate mathematical function with 
just a few transistor or logic gates, which at the time be 
rather costly. But transistor soon become much cheaper 

to make, and the attraction of stochastic compute quickly 
faded, a do solution that involve just analog circuitry. 
The now- common form of digital circuitry take off because 
they offer much good speed, performance, and flexibility. 

But an important exception to that rule appear in the 
mid-2000s, shortly after a new error-detection and error- 
correction scheme, low-density parity check (LDPC), start 
come into widespread use. Discovered in the 1960s, LDPC 
code be now use everywhere in communication systems, 
include Wi-Fi networks. Decoding LDPC code can be a 
tricky business, however. But because the decode involves 
probabilistic algorithms, it can be implement use rela- 
tively simple stochastic compute circuits. 

The success of stochastic circuit in that context, and the 
fact that control power use have now become one of the 
big challenge face chip designers, prompt u and 
other researcher to revisit stochastic compute several 
year ago. We want to see what else it could do in the mod- 
ern electronic era. 

It turn out there be quite a lot. Apart from save power, 
stochastic compute also offer a unique property know 
a progressive precision. That’s because, with this technique, 
the precision of the calculation depends on the length of 
the bitstream you use. For example, suppose you’re use 

SPECTRUM.IEEE.ORG | MAR 2018 | 49 

(4/8 = 1/2) 

(6/8 = 3/4) 

(3/8)AND 
0 01 1 01 01 

0 00 1 01 01 

1 10 1 01 11 

MANY TIMES BETTER: Using stochastic bitstreams, multiplication can be carry out with a single AND gate. Here two bitstreams, represent 1/2 
and 3/4, provide the inputs. The output have 1 in three of eight positions, meaning that it represent a value of 3/8—the product of the two inputs. 



0110101010010111 to represent the frac- 
tion 9/16 (nine 1 in 16 possible bit posi- 
tions). With stochastic computing, the 
leftmost digit be process first, and all 
bit have equal significance or weight. If 
you look at the first eight bit of this exam- 
ple, 01101010, you get the number 4/8, 
which be a low- precision estimate of the 
value represent by the longer sequence. 

The circuit that be use to process 
stochastic bitstreams act a though they 
be compute with the most significant 
digit of the number first. Conventional 
digital circuits—or paper-and-pencil cal- 
culations—work the other way, from the least to the most sig- 
nificant digits. When a normal computer add two binary 
number together, the first bit compute don’t provide any 
sort of early approximation of the overall result. 

Stochastic compute circuits, on the other hand, do exactly 
that: Their progressive-precision property mean that the 
answer be pretty good at the start and tends to get increas- 
ingly precise a more and more bit flow through the circuit. 
So a computation can be end a soon a enough bit have 
emerge in the results, lead to significant energy savings. 

How many bit be enough? That depends on the application, 
and those that demand high precision will, of course, require 
longer bitstreams—perhaps hundred or even thousand of bits. 

There be limit to the precision you can achieve in practice, 
though. That’s because to represent an n-bit binary number, 
stochastic compute require the length of the bitstream to 
be at least 2n. Take the case of 8-bit numbers, of which there 
be 256 possible values. Suppose you want to represent the 
probability 1/256 with a bitstream. You’d need a bitstream that 
be at the very least 256 bit long—otherwise there wouldn’t be 
a place for a lone 1 in a sea of 0s. Similarly, to represent 9-bit 
numbers, you’d need stream of at least 512 bits. For 10-bit 
numbers, the requirement would be for 1,024 bits, and so 
on. Clearly, the number get large fast. Achieving even what 
be know in computer program circle a single preci- 
sion (32 bits) would be nearly impossible, because it would 
require stream of billion of bit to be manipulated. 

• • • • • • • 
LOW IN PRECISION a it is, stochastic compute be curi- 
ously similar to what go on inside our brains. Our neural 
pathway encode their signal primarily by the rate or fre- 
quency of sharp electrical pulse or “spikes.” When those 
spike be few and far between, the activity of the neural 
pathway be say to be low; when they occur frequently, the 
activity level be high. Similarly, when the 1 in a bitstream 
be few and far between, the stream corresponds to a low 
number; when they be common, it encodes a high number. 

Also, stochastic compute circuits, like many biological sys- 
tems, be resilient in the face of many kind of disturbances. 
If, for example, a source of environmental noise cause some 

of the binary digit in a bitstream to flip, the number repre- 
sented by that bitstream won’t change significantly: Often 
there will be a many 1 that change to 0 a there be 0 
that change to 1s, so the noise will just average out over time. 

These similarity with biological system weren’t lose on 
u when we begin our research. And we have them in mind 
when we begin look into an excite new application for 
stochastic computing—processing signal in retinal implants. 

Retinal implant be intend to restore sight to people 
with severe macular degeneration, retinitis pigmentosa, and 
other degenerative disease of the retina. Although use 
electronics to restore lose vision be an old idea, the actual 
clinical use of retinal implant be less than a decade old, and 
it’s be attempt with comparatively few patient because 
the technology remains so rudimentary. 

Most retinal implant capture and process image outside 
the eye use a camera and a digital computer. That’s pretty 
clunky. And it give patient an odd sense when they move 
their eye and find that the image project on their retina 
doesn’t move in the way their brain expect. What you really 
want, of course, be for the image sense and processing to 
take place inside the eye. One hurdle to accomplish this be 
that there’s little power available inside the eye to operate the 
electronics—the only power source available be tiny induc- 
tive pick-up coil or photovoltaic cells. And you need rela- 
tively large amount of power to sense and process image 
use conventional digital circuits. Even if a source of suffi- 
cient power be available, use it would still be problematic 
because excessive power dissipation can harm eye tissues, 
which can tolerate only a few degree of temperature rise. 

For these reasons, we figure that the simplicity and effi- 
ciency of stochastic compute could make a big difference. To 
test this idea, we conduct a little experiment. We design 
several stochastic image-processing circuits, include one that 
detects edge in images. (Edge detection improves contrast, 
make object easy to perceive.) Not surprisingly, the sto- 
chastic circuit we design for this purpose be much simpler 
and more efficient in it use of power than the kind of digital 
circuit typically use for edge detection. 

Another biologically inspire application of stochastic com- 
put be in artificial neural networks, which lie at the heart 

50 | MAR 2018 | SPECTRUM.IEEE.ORG 

0 01 1 00 01 0 01 0 00 00 1 00 0 00 10 0 1 

BITSTREAM BRAINS: Neural signal resemble bitstreams in that frequent spike indicate high 
value of neural activity, just a frequent 1 in a bitstream indicate high value for the number 
that it represents. 



of many of today’s smart sys- 
tems. We explore this appli- 
cation recently use an image 
sensor connect to such a 
neural network, one config- 
ured to recognize digit after 
it have be train to do so— 
meaning that it many adjust- 
able parameter have be 
set at value that allow it to 
classify the image present 
to it a a specific digit. Neu- 
ral network be arrange in 
a series of layer of artificial 
neurons, where the output of 
one layer serf a the input 
to the next. In our experi- 
ments, we replace the first 
processing layer of our net- 
work with stochastic circuitry. 

Although the stochastic cir- 
cuitry sometimes give inac- 
curate arithmetic results, it do not matter because neural 
network can learn to tolerate such errors. So we just retrain 
our neural network to deal with the stochastic errors. In this 
way, we could reduce the energy use in the first layer of the 
network by a factor of 10, while pretty much preserve the 
original level of accuracy in digit classification. 

NE OF THE THINGS hold 
stochastic compute back have 
be the lack of any compre- 
hensive design methodology. 
Sure, it’s easy enough to design 
circuit for simple arithmetic 
operation such a multiplica- 
tion and addition, but when the 
target function be more compli- 
cated, engineer have long be 
without a good road map. 

A decade ago, Weikang Qian and Marc Riedel, of the Univer- 
sity of Minnesota, devise a novel technique to solve this prob- 
lem. Building on their work, we recently discover another 
approach to design stochastic compute circuits. It begin 
with the observation that a stochastic circuit corresponds to a 
Boolean function. AND, OR, NAND, and NOR be all example 
of Boolean functions. More generally, they be define a a 
mathematical function that take some number of different 
input (each of which can be 0 or 1) and produce one output, 
which, depend on the input values, will be 0 or 1. 

Suitable mathematical transformation apply to that 
Boolean function—ones similar to those use to determine, 
for example, the frequency content of audio signals—reveal 
how the stochastic circuit will operate on bitstreams, whether 

it will serve a a multiplier, say, or an adder. We found that 
you can go the other way, too. You can start with the desire 
function and perform those mathematical transformation 
in reverse to deduce the circuit needed. 

Based on that observation, we developed a method that 
enable u to design efficient stochastic compute circuit 
for image processing, include one that could carry out a 
common image-processing function call gamma correc- 
tion. (Gamma correction be use to account for the insensi- 
tivity of the human eye to small difference in brightness in 
lighter area of an image.) With this strategy, we be able 
to design a small (eight gate) circuit that implement the 
gamma-correction function. 

Efficient a they are, stochastic circuit can be make even 
more so when combine with a power-reduction technique 
know a voltage scaling. That’s basically a highfalutin way 
of say that you dial the voltage way down to save energy 
at the cost of create occasional errors. That’s not much of 
a problem for stochastic circuits, which can work acceptably 
well at voltage that would be too low for conventional ones. 
For example, the gamma-correction circuit we built can tol- 
erate a voltage reduction up to 40 percent, from 1 volt down 
to 0.6 V, with no loss of accuracy. And unlike conventional 
binary circuits, which fail catastrophically when the volt- 
age scale be too aggressive, stochastic circuit continue to 
operate, albeit with less precision, a the voltage be reduced. 

While our examination of circuit for retinal implant and 
neural network make u very optimistic about the pros- 
pects for stochastic computing, we still haven’t discover 
the real killer app for this approach. It may be 50 year old, 
but stochastic computing, in our view, be still in it infancy. ■ 

↗ POST YOUR COMMENTS at https://spectrum.ieee.org/stochastic0318 

SPECTRUM.IEEE.ORG | MAR 2018 | 51 

A 
R 

M 
IN 

A 
LA 

G 
H 

I 

ALWAYS ON EDGE: Edge detection be commonly use in image processing. Here, an edge- 
detection algorithm that us conventional binary number [top row] be compare with one that 
us stochastic bitstreams [bottom row]. The stochastic result hold up much good a the 
bit-error rate be increase from 0.1 percent [far left] to 0.5 percent [middle left] to 1.0 percent 
[middle right] and finally to 2.0 percent [far right]. 

O 


