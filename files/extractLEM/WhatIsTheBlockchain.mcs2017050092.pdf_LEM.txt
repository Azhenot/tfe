











































SECTION TITLE 
Editors: Konrad Hinsen, hinsen@cnrs-orleans.fr | Konstantin Läufer, laufer@cs.luc.edu 

92 Computing in Science & Engineering 1521-9615/17/$33.00 © 2017 IEEE Copublished by the IEEE CS and the AIP September/October 2017 

COMPUTING PRESCRIPTIONS 
Editors: Francis Sullivan, fran@super.org | Ernst Mucke, ernst.mucke@gmail.com 

What Is the Blockchain? 

Massimo Di Pierro | DePaul University 

T 
he technology know a the blockchain be first re- 
vealed by Satoshi Nakamoto in his paper “Bitcoin: 
A Peer-to-Peer Electronic Cash System” (https:// 
bitcoin.org/bitcoin.pdf), which laid out the math- 

ematical foundation for the bitcoin cryptocurrency. Although 
this be a groundbreaking paper, it be never actually sub- 
mitted to a traditional peer-reviewed journal, and the author’s 
true identity be unknown. Blockchain technology be not only 
at the foundation of all crytocurrencies, but it have found wide 
application in the more traditional financial industry. It also 
open the door to new application such a smart contracts. 

It’s a Matter of Trust 
The problem that Nakamoto solve with the blockchain 
be that of establish trust in a distribute system. More 
specifically, the problem of create a distribute storage of 
timestamped document where no party can tamper with the 
content of the data or the timestamps without detection. 

Note that this problem be orthogonal to the problem 
of authentication, integrity, and nonrepudiation, which 
be solve by digital signatures. If a party creates a digi- 
tal signature for a document, it establishes only a verifiable 
link between the party and the document. The existence 
of a valid digital signature prof that the party indeed 
intend to sign the document and that the document 
hasn’t be altered. Yet the digital signature guarantee 
nothing about the time when the document be signed: 
the timestamp require trust in the party that sign it. In 
the case of financial transaction and other form of legal 
contracts, time be of the essence, and the order of those 
financial transaction need to be independently certify 
to be auditable. 

Consider the case of house sales. The owner can be de- 
fin a the party to whom the house be last sell to, but 
ownership can only be verify from the full paper trail 
of all transaction related to the house, a paper trail that’s 



www.computer.org/cise 93 

usually kept and verify by title companies. Note this 
system doesn’t completely prevent fraudulent transaction 
(such a a person sell a house that he or she doesn’t 
own or sell the same property to more than one party), 
but fraudulent activity eventually get detected, and true 
ownership be established. The same ownership verification 
problem arises in financial transactions—for sure, in the 
sale of cryptocurrency, but also in the sale of any other 
traditional financial instrument. The problem be normally 
solve by record all transaction in a single trust cen- 
tralized ledger, but a ledger isn’t always a practical solu- 
tion because it doesn’t scale to large number of frequent 
transaction and because it require all party to trust the 
ledger’s maintainer. In the same way you need to trust 
your bank with your money (and bank employee steal 
customer fund be not unheard of). To address this, the 
blockchain provide a distribute trust mechanism: mul- 
tiple party keep a record of transactions, and every party 
can verify that the order and timestamps of the transac- 
tions haven’t be tamper with. 

A unit of bitcoin be nothing other than a number, but 
only some number be valid bitcoins. These number be 
solution of a well-defined equation, and whoever find a 
new solution own it (this process be call mining). Once 
a bitcoin be discovered, it can be traded, with transaction 
store in a ledger. Transactions be digitally sign with 
the credential of the seller to avoid nonrepudiation. There 
be no centralize ledger because user wouldn’t trust one 
and because there be too many transaction to store them 
all in one place. Hence bitcoin and other cryptocurren- 
cies provide a distribute ledger in which every computer 
involve in the transaction of a specific coin (or fraction 
of a coin) keep a copy of the history of that coin’s trans- 
actions. The blockchain technology make sure that no 
party store this history can tamper with it without be- 
ing detected. 

Hash Functions 
Transactions be unit of data contain the transaction 
detail plus a timestamp. Both can be represent a com- 
puter number or strings. A blockchain can be thought of 
a a table with three columns, where each row represent 
a distinct transaction, the first column store the transac- 
tion’s timestamp, the second column store the transac- 
tion’s details, and the third column store a hash of the 
current transaction plus it detail plus the hash of the pre- 
vious transaction. When a new record be insert into a 
blockchain, the last compute hash be broadcast to every 
interested party. It isn’t necessary for every party to keep a 
copy of the entire transaction history—it’s sufficient that 
a few party do. Because everyone know the last hash, 
anyone can verify that the data hasn’t be alter since 
it would be impossible without obtain a different and 

thus invalid hash. The only way to tamper with the data 
while preserve the hash would be to find a collision in 
the data, and that’s computationally impossible. It would 
require so much compute power that it’s practically 
uneconomical. 

A hash can be thought of a an encrypt version of 
the original string from which it be impossible to derive the 
original string. In fact, one way to compute the hash of a 
string be by encrypt it and perform some scramble 
and xoring of the output bits. Mathematically, a hash be 
produce by a hash function, f, which must have two im- 
portant properties: the size of the input space and the out- 
put space must be large; it must be practically impossible 
to find collisions, that is, two input x1 and x2 that produce 
the same output f(x1) 5 f(x2). A typical application of hash 
function be in password storage—when you register on a 
website, you don’t want the site to store your password p 
in it database, otherwise anyone with access to the data- 
base could read it. The website should store the hash of the 
password, f(p) 5 y. When you login, the input password p 
be hash again and compare with the store value, f(p) 5 
y. The probability of an incorrect password produce the 
same hash value y a the actual password be zero for practi- 
cal purposes. 

Examples of hash function be the Secure Hash 
Algorithms (SHA1, SHA128, SHA512, and so on), 
which be implement in the standard Python module 
hashlib. They can take any string a input and always 
produce an output string that’s a hexadecimal representa- 
tion of the output number of the function with a fix 
number of digits: 

>>> print hashlib.sha1(‘hello world’).hexdigest() 
2aae6c35c94fcfb415dbe95f408b9ce91ee846ed 

Let’s look at a simple implementation of a blockchain in 
Python. First, we define a function that we call bhash that, 
give the timestamp and detail (a string or other serializ- 
able object) of a new transaction along with the hash of the 
previous transaction, computes a new hash use the SHA1 
algorithm: 

import hashlib, json, time 

def bhash (timestamp, details, prev_hash): 
token = json.dumps([timestamp, details, prev_hash]) 
return hashlib.sha1(details).hexdigest() 

Notice that we use the json serializer to combine the 
element together into a hashable string that we then pas 
to the hash SHA1 hash function. Our choice of serialize 
in json be an implementation detail and not the only way to 
achieve the goal. 



COMPUTING PRESCRIPTIONS 

94 September/October 2017 

Next we create a Blockchain class to encapsulate a list 
of blocks: 

class Blockchain(object): 
def __init__(self, details=’new-chain’): 
self.blocks = [(time.time(), details, ”)] 
def record(self, details, timestamp = None): 
timestamp = timestamp or time.time() 
prev_hash = self.blocks[21] [2] 
new_hash = bhash(timestamp, details, prev_hash) 
self.blocks.append((timestamp, details, new_hash)) 

The class have a constructor, “init”, which creates a list 
of block and store the first block in the list. This first block 
contains an initial timestamp and detail but no hash. In 
the case of a bitcoin, this would store information about the 
discovery of a new unit and it owner. 

The class also have a second method, “record”, that, 
give the detail of a new transaction and an optional 
timestamp (otherwise automatically computed), store 
them in a new block. This be do by retrieve the hash 
of the previous block from self.blocks[21][2], 
call the bhash function, and append the trip- 
let (timestamp, details, new_hash) to the list of 
blocks. Notice that self.blocks[i][j] represent a 
cell in the blockchain table where i be the row number 
start from 0, and j be the column number also start- 
ing from 0. 

We use our Blockchain class by create an instance 
of it, which we call “bc”, and record transaction repre- 
sented a self-descriptive strings: 

>>> bc = Blockchain(‘A found $1’) 
>>> bc.record(‘A give $1 to B’) 
>>> bc.record(‘B give $1 to C’) 
>>> bc.record(‘C give $1 to D’) 

Then we can print the block in the blockchain: 

>>> print bc.blocks 
[(1495941516.704196, ‘A found $1’, ”), 
(1495941516.704201, ‘A give $1 to B’, ‘a75a9227f...’), 
(1495941516.704277, ‘B give $1 to C’, ‘ca911be27...’), 
(1495941516.704290, ‘C give $1 to D’, ‘cb462885e...’)] 

The last hash be ‘cb462885e...’. For this technology 
to work, we must make sure we broadcast the last hash and 
that there a few copy of the full chain store by different 
parties. The party in this context be the compute node 
in the peer-to-peer network in charge of record and stor- 
ing the transactions. This be a network problem and beyond 
this article’s scope. 

It’s also important that every party can verify the 
chain’s integrity. This can easily be do by use the func- 
tion below: 

def verify(blockchain): 
prev 5 blockchain.blocks[0] 
for block in blockchain.blocks[1:]: 
new_hash = bhash(block[0], block[1], prev[2]) 
if block[2] != new_hash: return False 
prev = block 
return True 

In the code, above we loop over all the block start 
from the second one, recompute each hash, and then com- 
pare it with the store one in block[2], the third column. 
If the code find any hash that doesn’t match, it return 
False, or else it return True. We can call this code on our 
blockchain with 

>>> print verify(bc) 
True 

From a technology viewpoint, there’s a lot more than 
this to the bitcoin network. There be algorithm for data 
distribution, for sync nodes, for efficient storage and que- 
rying, for conflict resolutions, and so on, yet the blockchain 
technology be at the heart of it. 

Cryptocurrencies and Beyond 
It’s important to observe that different cryptocurrencies 
run on different platform and make different storage and 
hash choices. In addition, for the same type of crypto- 
currency, for example, bitcoin, there be different implemen- 
tations of the algorithm, even though they’re all compatible 
and can communicate with each other. Moreover, for each 
unit of coin, there’s one set of block (replicated in multiple 
locations). 

Its use for cryptocurrencies be the first and best-known 
application of the blockchain, but it isn’t the only one, and 
probably not the most important. Many company provide 
proprietary implementation of the blockchain technology 
and sell their solution to the financial industry, which us 
them to record various type of transactions. These propri- 
etary solution be integrate into the authentication infra- 
structure of financial institution and allow different agent 
to record transaction in a distribute fashion, thereby al- 
low different institution (or part of the same institu- 
tion) to transact without reciprocal trust. 

Because a transaction be basically a string, it can contain 
arbitrary information. It should be evident to the reader at this 
point that this technology can be use for any kind of nota- 
rization, and not necessarily involve money. For example, 



www.computer.org/cise 95 

Chicago’s Cook County have be experiment with use 
the bitcoin network to record house title (https://bitcoinmaga- 
zine.com/articles/chicago-s-cook-county-to-test-bitcoin-block- 
chain-based-public-records-1475768860). Similarly, someone 
could store an idea for a patent in the blockchain to late prove 
a first-to-invent claim. You could also store a promise to do 
something at a late time, with the promise store in the form 
of code that would execute the promise in an automate man- 
ner. This be what’s call a smart contract; for example, let’s 
say we have this promise: “Alice promise to pay Bob $1 if on 
1 January 2028 it rain in Chicago.” As long a the promise be 
in the blockchain, and an API can check whether the condi- 
tions be met, the system can automatically execute the trans- 
action should the condition be fulfilled. 

The bitcoin network be the first, but new one be emerg-ing all the time to trade and specifically handle smart 

contracts, “applications that run exactly a programmed 
without any possibility of downtime, censorship, fraud, or 
third-party interference” (thereum.com). 

On one hand, the idea of trading cryptocurrencies 
might be nothing more than stamp collecting, but the oth- 
er, the underlie technology have only start to revolution- 
ize contract and human interactions. It will displace many 
white collar job the same way robot have displace blue 
collar ones. It will also create new job that we can’t even 
imagine today. Only time will tell if cryptocurrencies can 
soar and prosper because of the increase trust people put 
into blockchain technology. 

Massimo Di Pierro be a professor in the School of Computing at 
DePaul University and co-director of the MS program in com- 
putational finance. Contact him at massimo.dipierro@depaul 
.edu. 

Take the 
CS Library 
wherever 
you go! 

IEEE Computer Society magazine and Transactions be now 
available to subscriber in the portable ePub format. 

Just download the article from the IEEE Computer Society Digital 
Library, and you can read them on any device that support ePub. 
For more information, include a list of compatible devices, visit 

www.computer.org/epub 


