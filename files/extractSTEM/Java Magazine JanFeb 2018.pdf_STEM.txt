



































reactiv 
program 
handl larg data stream eicient 

oracle.com/javamagazin 

magazin 

By and for the java commun 

rxjava— 
reactiv 
librari for 
the jvm 

32 
reactiv 
program 
with jax-r 

16 
reactor IN 
spring 5.0 

61 
cqrs: not 
the usual 
crud 

69 

interfac IN depth 90 | book ON java 9 07 

january/februari 2018 

http://www.oracle.com/javamagazin 


https://www.jetbrains.com/idea?utm_source=javamag&utm_medium=cpc&utm_campaign=idea2018 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

02 

//tabl of content / 

90 
the evolv natur 
of java interfac 
By michael kölling 

understand multipl inherit 

in java 

101 
fix thi 
By simon robert and mikalai zaikin 

our late quiz with question that 

test intermedi and advanc 

knowledg of the languag 

32 
go reactiv 
with eclips vert.x 
and rxjava 

By clement escoier 

and julien pong 

build fast scalabl system 

with one of the most popular 

reactiv java librari 

61 
reactiv spring 

By josh long 

proceed from fundamentals, 

use the spring framework 

to quickli build a reactiv 

application. 

69 
command queri 
respons 
segreg 
with java 

By sebastian daschner 

get around the limit of 

crud by use event stream 

and an eventu consist 

architecture. 

//tabl of content / 

reactiv program with jax-r 
By mert çalışkan 

use an asynchron approach and stag to develop 

respons reactiv app 

cover featur 

other featur depart 

05 
from the editor 
the declin of dynam type 

07 
java book 
review of java 9 modular and 
java 9 for programm 

10 
event 
upcom java confer and event 

13 
user group 
the denver jug 

114 
contact Us 
have a comment? suggestion? want to 

submit an articl proposal? here’ how. 

cover art BY pedro murteira 

16 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ///////////////////////////////// january/februari 2018 

03 

editori 

editor in chief 
andrew binstock 

manag editor 
clair breen 

copi editor 
karen perkins, lesli steer 

technic review 
stephen chin 

design 

senior creativ director 
francisco G delgadillo 

design director 
richard merchán 

senior design 
arianna pucherelli 

design 
jaim ferrand 

senior public design 
sheila brennan 

product design 
kathi cygnarowicz 

publish 

publish and audienc develop 
director 
karin kinnear 

audienc develop manag 
jennif kurtz 

advertis sale 

sale director 
tom cometa 

account manag 
mark makinney 

mailing-list rental 
contact your sale representative. 

resourc 

oracl product 
+1.800.367.8674 (us/canada) 

oracl servic 
+1.888.283.0591 (us) 

articl submiss 

If you be interest in submit an article, pleas email the editors. 

subscript inform 

subscript be complimentari for qualifi individu who complet the 
subscript form. 

magazin custom servic 

java@omeda.com 

privaci 

oracl publish allow share of it mail list with select third parties. If you prefer 
that your mail address or email address not be includ in thi program, contact 
custom service. 

copyright © 2018, oracl and/or it affiliates. all right reserved. No part of thi public may be reprint or otherwis 
reproduc without permiss from the editors. java magazin IS provid ON AN “a is” basis. oracl expressli 
disclaim all warranties, whether express OR implied. IN NO event shall oracl BE liabl for ani 

damag OF ani kind aris from your use OF OR relianc ON ani inform provid herein. opinion 

express by authors, editors, and interviewees—even if they be oracl employees—do not necessarili reflect the view of oracle. 

the inform be intend to outlin our gener product direction. It be intend for inform purpos only, and may not 

be incorpor into ani contract. It be not a commit to deliv ani material, code, or functionality, and should not be reli 

upon in make purchas decisions. the development, release, and time of ani featur or function describ for oracle’ 

product remain at the sole discret of oracle. oracl and java be regist trademark of oracl corpor and/or it 

affiliates. other name may be trademark of their respect owners. 

java magazin be publish bimonthli and make avail at no cost to qualifi subscrib by 
oracle, 500 oracl parkway, MS opl-3a, redwood city, CA 94065-1600. 

associ profession master expert specialist 

display your oracl certif digit badg 

claim your certif badg and valid 
your skill across all onlin platforms. 

you’v earn It 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
mailto:karin.kinnear%40oracle.com?subject= 
mailto:jennifer.s.kurtz%40oracle.com?subject= 
mailto:tom.cometa%40oracle.com?subject= 
mailto:mark.m.makinney%40oracle.com?subject= 
mailto:javamag_us%40oracle.com?subject= 
https://www.sub-forms.com/dragon/init.do?site=ora6028_jfnew 
mailto:java%40omeda.com?subject= 
mailto:java%40omeda.com?subject= 
http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=861 


regist now 
oracl code be back! | 1-day, free event 

developer.oracle.com/cod 
come to a citi near you: 

• devops, containers, microservices, and api 

• mysql, nosql, oracle, and open sourc databas 

• develop tool and low code platform 

• open sourc technolog 

• machin learning, ai, and chatbot 

explor the latest develop trends: 

https://developer.oracle.com/cod 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

05 

//from the editor / 

photograph BY bob adler/th verbatim agenc 

If you follow the rise and fall of program languages—eith from the comfort of an 
armchair, ensconc with your prefer tool 

but interest in other people’ choices, or from 

a keyboard, happi to hyperkinet tri out all 

kind of new idioms—y will have notic an 

unmistak trend in modern languag design: 

a prefer for static typing. 

look at the major languag that have 

emerg in the past decade—go, swift, kotlin, 

and rust—they’r all static typed. moreover, 

languag that be onc dynam have add 

static typing. the most conspicu exampl be 

the recent set of updat to javascript (or more 

accurately, ecmascript). apple’ choic to replac 

dynam type objective-c with swift also 

follow thi trend. 

As a quick refresher, static type refer to a 

type system that make it possibl to know the 

type of everi data item and express at compil 

time. speciically, thi mean that the languag 
do not allow the use of type that be resolv 

at runtime. for example, in javascript (a dynami- 

calli type language) a variabl be declar by 

use var, rather than a speciic type. A variabl 
can hold a string, a number, or a boolean at vari- 

ou time in the same program. In contrast, static 

types, such a those found in java, forc you to 

declar the type when you dein the variable. 
static type provid sever import 

advantages. the irst advantag be that the com- 
piler can perform signiic program verii- 
cation. becaus the compil know that i, for 

example, have be declar an integer, it can 

the declin of dynam type 
A featur onc view a a conveni have becom more troublesom than it’ worth. 

#developersrul 

start here: 
developer.oracle.com 

oracl cloud. 

built for modern app dev. 

built for you. 

oracl cloud deliv 

high-perform and 

battle-test platform 

and infrastructur servic 

for the most demand 

java apps. 

java in 
the cloud 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://developer.oracle.com 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

06 

//from the editor / 

check that all place where i be 

use do expect or at least can 

support an integer. likewise, 

static sourc code checker be 

much more capabl when they 

have complet type information. 

A second key beneit be per- 
formance. A runtim that must 

determin the type of everi vari- 

abl and the method that be 

avail to it while the program 

be run have signiic over- 
head that static type lan- 

guag don’t require. In part, thi 

be whi mani of the tradit 

dynam languages—python, 

perl, and ruby—run much more 

slowli than static type 

options. An except to thi 

might be javascript, which run 

much faster than mani dynam 

languages. but thi speed be a 

compar recent advanc 

driven by massiv invest by 

googl and microsoft into their 

respect javascript engines. 

A inal beneit, which in my 
view be the one that have turn 

the tide against dynam lan- 

guages, be maintainability. first, 

for readability, it be much easi 

to understand code if type be 

declar static becaus it be 

then possibl to tell exactli what 

you’r look at. for debugging, 

thi aspect be invaluable. step 

through code in which the con- 

tent of a variabl can chang 

type be not anybody’ idea of fun. 

the dynam aspect also intro- 

duce a kind of uncertainti when 

a bug be discovered. say the vari- 

abl i, which previous held an 

integer, now hold a string; be 

that a spell error by the devel- 

oper, who meant to store it in u, 

or be it an intent reus 

of a variable? and if the latter, 

how should you understand 

other instanc of i in the code- 

base? these problem be bear- 

abl in the small but extrem 

troublesom in the large. thi 

problem—precis a it appear 

in larg projects—wa the pri- 

mari motiv for microsoft to 

creat typescript, it superset of 

javascript that add one princi- 

pal feature: types. 

dynam type lourish 
in popular languag in the mid- 

1990 (python, ruby, javascript, 

and php all appear within 

a four-year window), when PC 

hardwar have becom power- 

ful enough to run languag 

that need runtim support. At 

the time, tool be primit 

and compil time be long, so 

dynam typing, which facilit 

quick and easi development, be 

a welcom step forward. 

but while dynam languag 

have retain consider popu- 

larity, some 15 year late the 

cost of dynam type be more 

appar a codebas grow 

larger, perform becom 

more important, and the cost 

of mainten rise steadily. 

while those dynam type 

languag will sure be with 

u for a long time, it be unlik 

that mani new languag will 

embrac the model. 

andrew binstock, editor in chief 

javamag_us@oracle.com 

@platypusguy 

#developersrul 

developer.oracle.com 

trials. downloads. 

tutorials. start here: 

developer.oracle.com 

the oracl develop 

gateway be the best place 

to jump-start your modern 

cloud develop skill 

with free trials, downloads, 

tutorials, documentation, 

and more. 

the best 
resourc 
for modern 
cloud dev 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
mailto:javamag_us%40oracle.com?subject= 
https://twitter.com/platypusguy 
http://developer.oracle.com 
http://developer.oracle.com 


oracle.com/javamagazin ///////////////////////////////// january/februari 2018 

07 

java 9 modular 
By sander mak and paul bakker 

the introduct of modul in 

java 9 signiicantli chang how 
java applic be built and 

delivered. these chang be par- 

ticularli import for develop 
of java libraries, who need to work 
out their strategi for deliv 

//java book / 

java 9 book 
the wave of book for the new releas be now arriving. 

A s with all previou major releases, the arriv of java 9 have unleash a wave of book examin and explain it new features. the next few book column will review import titl that you’ll want 
to be awar of. In thi installment, I look at two books, one speciic on java 9 modul and one on the 

larg language. 

modular jar ile while continu- 
ing to provid the tradit bit 

that run on jvm prior to thi 

new release. although you cer- 
tainli can run app on the java 9 
runtim without use modules, 
it be expect that most site will 
switch over to module-bas bina- 
rie dure the next few years. 
some sites, especi those wres- 
tling with so-cal “classpath 
hell,” will like ind incent to 
move to modul a quickli a pos- 
sible. those site will discov a 
trove of use inform in mak 
and bakker’ new work. 

the book open with a detail 
explan of what modul be 
and how they work. the irst four 
chapter cover the anatomi and 
use of modul in detail, with 

plenti of examples. it’ a veri 
readabl guide. the remain 

180 page be where the valu be 
realli apparent. these page start 
out cover modular patterns, 
which be way of architect 
modul so that they work togeth 
ideally. the goal be to ind the bal- 
anc between devis modul 
that natur (that is, conceptu- 
ally) it togeth while creat the 
minimum number of depend 

on extern modules. thi tension 
be familiar to java architect 

design jars. however, the 
impetu to get the design right in 

tradit jar histor have 
be more of a desir goal than 

an imperative. with modules, it 

becom a much more seriou 

proposition. the whole point of 

http://www.oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://shop.oreilly.com/product/0636920049494.do 


oracle.com/javamagazin ///////////////////////////////// january/februari 2018 

08 

//java book / 

modular be to manag depen- 
denci intellig to get rid of 
classpath conlict and enabl 
deliveri of modestli size binaries. 

the author tackl mani 
aspect of the problem: split 

modules, aggreg modules, and 

creat new modul a facades. 
they then move into technic 
problem such a encapsul 

resources, after which they explor 
build modul speciic for 
use in containers. 

the inal section have pointer 
for librari design and a handi 
section on conigur tools, such 
a maven and gradle, for modules. 

wedg into all thi good 

be a lengthi discuss of how to 
run java 9 without migrat to 
modules. thi will be particularli 
use to site that be plan 

to adopt modul at some futur 

point and want to understand the 
full scenario, start with limit 
migrat to the new runtim and 
then slowli implement the con- 
sider present in the rest of 

the book. 
taken together, all these topic 

repres a comprehens over- 

view of java 9 modularity. the writ- 
ing be clear and easi to understand, 
and the author do not expect the 

reader to know much more than 
how to program in java; low-level 
detail (such a how classload 
work) be explain on the ly. thi 
book be explicitli recommend 
at devoxx in novemb by mem- 
ber of the core java team, and I 
fulli agre with their assessment. 
—andrew binstock 

java 9 for 
programm 
(4th edition) 
By paul deitel and harvey deitel 

thi book be the irst of the com- 
prehens languag tutori 

to come to market that includ 
extens coverag of java 9. In thi 
context, it compet with other 
1,000-page volum that present 

the entir languag and it princi- 

pal apis. for example, it compet 
with cay horstmann’ excel 

core java, which i’v review 
previous in thi column. both 
entrant be ine works, and 
choos one or the other depend 

in larg part on your person pref- 
erences. (note: core java have not 
be releas for java 9, although 

an abridg version be available.) 
the deitels’ book be notabl for 

it hands-on orientation: it be code- 

intens with numer examples. 
It even includ a full project (com- 
prise 77 pages) that go from 
initi design of an atm machin 

all the way through to comple- 
tion. the design portion includ 

introduct to the basic unii 
model languag (uml) dia- 
grams, put togeth the object- 
orient design, and increment 
develop the code. work 
through thi project be an excel 
educ quit apart from the use 

of java. 

java 9’ most import fea- 
ture receiv rich coverage. for 
example, the section on modul 
be a full 52 page that explor the 
need for modules, how modul 
work, and how to use them in your 
own code. To get a sens of the 
hands-on natur of the explana- 
tions, see the lightli edit excerpt 
from thi section that ran in thi 

magazine. It be one of our most 
popular articl in 2017. 

thi be the irst book i’v 
see on java 9 that have in-depth 

coverag of jshell, the new repl 
introduc in java 9. it peda- 
gogic beneit be not lose on 
the authors, who drill into how 
to make best use of it both a 
a program aid and a a 

teach tool. 

In addit to the languag 
proper, the book cover javafx, 
jdbc, and jpa. each chapter 
includ self-review exercises, 
with accompani solutions; the 
explan be sprinkl with 
caveat for dangers, remind 

about good program prac- 

tices, and tip on write idiomat 
java. In other words, thi be a com- 
plete presentation. 

I have onli one gripe with thi 
volume, and that be the excess 
use of color highlight in the 

code. even if you’r a fan of 
brightli color code, your eye 
will quickli tire of read pale 
blue text or squint at bright 
green comment on a canary- 
yellow background. but if you can 
handl that, you’ll have a veri ine 
book that do an excel job of 
present java 9. —ab 

http://www.oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://www.deitel.com/books/java/java9forprogrammers/tabid/3686/default.aspx 
http://www.deitel.com/books/java/java9forprogrammers/tabid/3686/default.aspx 
http://www.deitel.com/books/java/java9forprogrammers/tabid/3686/default.aspx 
http://www.deitel.com/books/java/java9forprogrammers/tabid/3686/default.aspx 
http://horstmann.com/javaimpatient/ 
http://www.javamagazine.mozaicreader.com/septoct2017#&pageset=18&page=0 
http://www.javamagazine.mozaicreader.com/septoct2017#&pageset=18&page=0 


written by lead expert in java, oracl press book offer the most 

definitive, complete, and up-to-d coverag of java available. 

www.oraclepressbooks.com • @oraclepressavail in print and ebook formats. 

your destin for oracl and java expertis 

java: A beginner’ guide, 

7th edit 

herb schildt 

revis to cover java SE 9, 

thi book get you start 

program in java right away. 

java: the complet 

reference, 

10th edit 

herb schildt 

updat for java SE 9, thi book 

show how to develop, compile, 

debug, and run java programs. 



oca java SE 8 

programm I exam guid 

(exam 1z0-808) 

kathi sierra, bert bate 

get complet coverag of all 

object for exam 1z0-808. 

electron practic exam 

question be included. 

rapid modern 

of java 

applic 

G. venkat 

adopt a high-perform 

enterpris java applic 

modern strategy. 

http://www.oraclepressbooks.com 


10 

oracle.com/javamagazin ///////////////////////////////// january/februari 2018 

//event / 

photograph BY ndinhtran, esq./flickr 

devnexu 

februari 21–23 

atlanta, georgia 

devnexu be an intern open sourc develop conference. 

schedul session thi year includ “java microservic pattern 

& practic with kubernetes/openshift and istio,” “pragmat 

microservic with java EE and wildfli swarm,” and “practic jvm 

perform tune with jpdm.” 

snowcamp 

januari 24, workshop 

januari 25–26, confer 

januari 27, social event 

grenoble, franc 

snowcamp be a develop con- 

ferenc held in the french alp 

that focu on java, web, cloud, 

devops, and softwar architec- 

ture, with a mix of session in 

french (the majority) and english. 

the last day, dub “unconfer- 

ence,” ofer a uniqu opportun 
to social with peer and speak- 

er on the ski slopes. 

agentconf 

januari 25–26, speaker session 

januari 27–28, skiing/ 

network 

dornbirn and lech, austria 

agentconf be two day of talk and 

two day of skiing. It be a confer- 

enc dedic to softwar engi- 

neering, focu on javascript, 

reactjs, reactnative, node, and 

similar technologies. the event 

connect industri expert from 

around the world who use these 

technologies, and whose team 

build project with them. speaker 

session be host at spielboden 

in dornbirn, while ski and net- 

work take place in lech. 

devconf.cz 

januari 26–28 

brno, the czech republ 

devconf.cz be a free, three-day, 

open sourc develop and 

devop conference. all talks, 

presentations, and workshop will 

be conduct in english. sever 

track be usual devot specii- 
calli to java ee, and the confer- 

enc can be attend online. 

developerweek 

februari 3–4, hackathon 

februari 5, workshop 

februari 5–7, confer 

februari 6–7, expo 

oakland, california 

developerweek promis the 

world’ larg develop expo and 

confer series, gather 8,000 

particip for a week-long, 

technology-neutr program 

confer and associ events. 

the theme for 2018 be “industri 

revolut of code,” and track 

includ artiici intelligence, 
serverless development, block- 

chain, api and microservices, 

and javascript. 

https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://oracle.com/javamagazin 
http://www.devnexus.com 
http://snowcamp.io/en/ 
http://www.agent.sh 
https://devconf.cz 
http://www.developerweek.com 


11 

oracle.com/javamagazin ///////////////////////////////// january/februari 2018 

//event / 

domain-driven design europ 

januari 30–31, workshop 

februari 1–2, confer 

amsterdam, the netherland 

thi softwar develop and 

engin event span analy- 

sis, model and design, system 

think and complex theory, 

architecture, test and refactor- 

ing, visualization, and collabora- 

tion. schedul workshop includ 

“event-driven microservic with 

axon framework” (java experi- 

enc required) and “techniqu 
for complex domains.” 

jfoku 

februari 5–7 

stockholm, sweden 

the annual scandinavian java 

develop confer encom- 

pass java SE and java ee, front- 

end and web development, mobile, 

cloud, iot, and jvm languag 

such a scala and clojure. 

o’reilli softwar architectur 

confer 

februari 25–26, train 

februari 26–28, tutori 

and confer 

new york, new york 

photograph BY briyyz/flickr 

thi event promis four day of 

in-depth profession train 

that cover softwar architec- 

ture fundamentals; real-world 

case studies; and the late trend 

in technologies, frameworks, 

and techniques. schedul ses- 
sion includ “high-perform 

javascript web app architecture,” 

“pragmat event-driven 

microservices,” and “evolv 

databas architecture.” 

embed world 

februari 27–march 1 

nuremberg, germani 

the theme for the 16th annual 

gather of emb system 

develop be “embed goe 

autonomous.” topic includ 

iot, autonom systems, soft- 

ware engineering, and safeti 

and security. 

jsconf iceland 

march 1–2 

reykjavik, iceland 

jsconf will take place at harpa, 

one of reykjavik’ most distin- 

guish landmarks, and fea- 

ture two track of educ 

javascript talk by more than 30 

speaker from around the world, 

follow by even parti 

and socializing. 

qcon london 

march 5–7, confer 

march 8–9, workshop 

london, england 

qcon confer featur track 

relat to web development, 

devops, cloud computing, and 

more. conirm speaker thi 
year includ java champion 

trisha gee, docker engin anil 

madhavapeddy, and netlix cloud 
platform engin allen wang. 

vox day zürich 

march 8 

zürich, switzerland 

vox day zürich share the 

devoxx philosophi that con- 

tent come irst, and draw 
intern renown and 

local speakers. session includ 

“the power and practic of 

immutability” and “A hitchhiker’ 

guid to the function except 

handl in java.” 

javaland 

march 13–15 

brühl, germani 

thi confer featur lectur 

on subject such a core java 

and jvm languages, micro- 

servic architecture, front-end 

development, and much more. 

schedul present includ 

https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://oracle.com/javamagazin 
https://dddeurope.com/2018/ 
https://www.jfokus.se/jfokus/index.jsp 
https://conferences.oreilly.com/software-architecture/sa-ni 
https://conferences.oreilly.com/software-architecture/sa-ni 
http://www.embedded-world.eu/home.html 
https://2018.jsconf.is/about/ 
https://qconlondon.com 
https://voxxeddays.com/zurich/ 
https://www.javaland.eu/en/home/ 


12 

//event / 

oracle.com/javamagazin ///////////////////////////////// january/februari 2018 

“the java 9 modul system 

beyond the basics,” “secur 

jax-rs,” and “next-gener 

web compon with java 

vaadin flow.” 

jax devop 

april 9 and 12, workshop 

april 10–11, confer 

london, england 

thi event for softwar expert 

highlight the late technolog 

and methodolog for acceler 

deliveri cycles, faster chang 

in functionality, and increas 

qualiti in delivery. more than 60 
workshops, sessions, and key- 

note will be lead by intern 

speaker and industri experts. 

there’ also a two-in-on confer- 

enc packag that provid free 

access to a parallel conference, 

jax finance. 

vox day melbourn 

may 2–3 

melbourne, australia 

vox day be head down 

under to melbourne, australia. 

the event will featur insight 

into cloud, contain and infra- 

structure, real-world architec- 

tures, data and machin learning, 

the modern web, and program- 

ming languages. 

java day istanbul 

may 5 

istanbul, turkey 

java day istanbul be one of the most 

efect intern community- 
driven softwar confer in 

turkey, organ by the istanbul 

java user group. the confer 

help develop network and learn 

the new technologies, includ 

java, web, mobile, big data, cloud, 

devops, and agile. 

wearedevelop world congress 

may 16–18 

vienna, austria 

bill a the larg develop con- 

gress in europe, wear develop 

expect more than 8,000 partici- 

pant and more than 150 speaker 

for keynotes, panel discussions, 

workshops, hackathons, contests, 

and exhibitions. the program 

includ talk and session on 

front-end and back-end develop- 

ment, artiici intelligence, robot- 
ics, blockchain, security, and more. 

jeeconf 

may 18–19 

kiev, ukrain 

jeeconf, the larg java confer- 

enc in eastern europe, focu 

on practic experi and devel- 

opment. topic includ modern 

approach in develop of 

oracl code event 

oracl code be a free event for devel- 
oper to learn about the late pro- 
gram technologies, practices, 
and trends. learn from technic 
experts, industri leaders, and other 
develop in keynotes, sessions, 
and hands-on labs. experi cloud 
develop technolog in the code loung with workshop 
and other live, interact experi and demos. 

februari 27, lo angeles, california 

march 8, new york, new york 

april 4, hyderabad, india 

april 10, bangalore, india 

april 17, boston, massachusett 

may 17, singapor 

distributed, highli loaded, scal- 

able, enterpris system with java 

and innov and new direc- 

tion in applic develop 

use java. 

J On the beach 

may 23–25 

malaga, spain 

J On the beach (jotb) be an inter- 

nation workshop and confer 

event for develop interest in 

big data, jvm and .net technolo- 

gies, emb and iot develop- 

ment, function programming, 

and data visualization. 

jprime 

may 29–30 

sofia, bulgaria 

jprime will featur two day of 

talk on java, jvm languages, 

mobil and web programming, 

and best practices. the event be 

run by the bulgarian java user 

group and provid opportun 

https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://oracle.com/javamagazin 
https://devops.jaxlondon.com 
https://voxxeddays.com/melbourne/ 
https://javaday.istanbul/ 
https://www.wearedevelopers.com/congress/ 
http://jeeconf.com 
https://developer.oracle.com/cod 
https://www.jonthebeach.com 
https://jprime.io/ 


13 

//event / 

oracle.com/javamagazin ///////////////////////////////// january/februari 2018 

for hack and networking. 

riga dev day 

may 29–31 

riga, latvia 

the big tech confer in 

the baltic state cover java, .net, 

devops, cloud, softwar architec- 

ture, and emerg technologies. 

thi year, java champion simon 

ritter be schedul to speak. 

o’reilli fluent 

june 11–12, train 

june 12–14, tutori 

and confer 

san jose, california 

the o’reilli fluent confer 

be devot to practic train- 

ing for build site and app 

for the modern web. thi event 

be design to appeal to applica- 

tion, web, mobile, and interact 

developers, a well a engineers, 

architects, and ui/ux designers. 

the confer will be colloc 

with o’reilly’ veloc confer- 

enc for system engineers, appli- 

cation developers, and devop 

professionals. 

eclipsecon franc 

june 13–14 

toulouse, franc 

eclipsecon franc be the eclips 

foundation’ event for the entir 

european eclips community. 

the confer program includ 

technic session on current 

topic pertin to develop 

communities, such a modeling, 

emb systems, data analyt 

and data science, iot, devops, and 

more. attend at eclipsecon 

franc qualii for french 
train credits. 

javaon 

octob 28–novemb 1 

san francisco, california 

whether you be a season 

coder or a new java programmer, 

javaon be the ultim sourc of 

technic inform and learn- 

ing about java. for ive days, the 
world’ larg collect of java 

develop gather to talk about 

all aspect of java and jvm lan- 

guages, develop tools, and 

trend in programming. tutori 

on numer ou relat java and jvm 

topic be ofered. 

are you host an upcom 

java confer that you would 

like to see includ in thi calen- 

dar? pleas send u a link 

and a descript of your event 

at least 90 day in advanc at 

javamag_us@oracle.com. other 

way to reach u appear on the 

last page of thi issue. 

//user group / 

the denver jug 
the irst denver java 
user group (djug) meet- 

ing be held in novemb 

1995 a an opportun for 

technic discuss of 

the java language, apis, 

applets, and applications. 

sinc then, the djug 

have grown to more than 

2,500 members. 

it goal be to promot 

the use of java, educ user of java technology, provid a 

venu for the exchang of ideas, and creat a commun for 

java develop in the denver, colorado, area. 

membership in the djug be free, and all denver java 

enthusiast be encourag to join. djug member have 

access to confer discount for event such a the No 

fluf just stuf softwar symposium, uberconf, and devoxx. 
meet attende also have the opportun to win discount 

on software-rel products. 

djug meet be held on the second wednesday of 

everi month, and the typic meet have between 70 and 

120 attendees. present topic from the past year includ 

machin learning, microservices, project jigsaw, hack-proof 

security, and lightn talks. 

organ and run by volunteers, the meet follow a 

typic format: network time, speaker presentation, door 

prizes, and then more network at a local restaurant. door 

prize and food and beverag for the network session 

be provid with the gener help of sponsors. 

follow the djug’ activ by join it meetup group 

or visit it website. contact the djug on twitter with pro- 

posal for talks. 

https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://oracle.com/javamagazin 
https://rigadevdays.lv 
https://conferences.oreilly.com/fluent/fl-ca 
https://www.eclipsecon.org/france2018/ 
https://www.oracle.com/javaone/index.html 
mailto:javamag_us%40oracle.com?subject= 
https://www.meetup.com/denverjavausersgroup/ 
https://www.meetup.com/denverjavausersgroup/ 
http://denverjug.org 
http://www.twitter.com/denverjug 


https://voxxeddays.com 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

15 

//reactiv program / 

R 
eactiv program be a term that mean slightli difer thing to difer 

people. central to the concept, though, be a model of comput that be alert to 

certain kind of events, can process or ignor those events, and work with the 

event sourc to manag the number of event to be processed. 

In practice, thi model rest on sever technologies: a message-pass 

framework, a subscription-bas notiic system, and an asynchron execut of the 

event-driven tasks. the beneit be a loos coupl implement that be scalabl and tend 

to isol failures. the scalabl here refer to the abil to scale horizont quickly, and 

it anticip handl the number of event associ with big data—million to billion of 

incom events. thi aspect in particular be what make the reactiv model 

difer from it familiar forebear, the event loop in gui development. 

In thi issue, we provid an overview of reactiv develop (page 16) 

and then do a deep dive into rxjava (page 32), one of the lead librari 

for develop reactiv applic on the jvm. We follow that up by look- 

ing at the reactiv capabl built into the most recent releas of spring 

5.0 (page 61). finally, we examin a slightli difer model for develop- 

ing crud applications, call command queri respons segregation, 

or cqr (page 69), which while not reactiv per se implement an approach 

that overlap with reactiv programming. 

It might seem that reactiv program be a design that would lead 

natur to microservic implementation. and inde it is. 

what Is reactiv 
programming? 

reactiv program with 

jax-r 16 

use vert.x and rxjava 32 

reactiv spring 5.0 61 

cqr 69 

art BY pedro murteira 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

16 

//reactiv program / 

reactiv program sound like the name of an emerg program paradigm at irst, but it refer to a program techniqu that ofer an event-driven approach for handl 
asynchron stream of data. base on data that low continuously, reactiv system react to 

the data by execut a seri of events. 

reactiv program follow the observ design pattern, which can be dein a fol- 

lows: when there be a chang of state in one object, the other object be notii and updat 

accordingly. therefore, instead of poll event for the changes, event be push asynchro- 

nousli so the observ can process them. In thi example, observ be function that be 

execut when an event be emitted. and the data stream that I mention be the actual observ- 

abl that will be observed. 

nearli all languag and framework have adopt thi program approach in their 

ecosystems, and java have kept the pace up in it late releases. In thi article, I explain how 

reactiv program can be appli by use the late version of jax-r from java EE 8 and 

by use java 8 featur under the hood. 

the reactiv manifesto 

the reactiv manifesto list four fundament aspect an applic must have in order to be 

more lexible, loos coupled, and easili scalable—and, therefore, capabl of be reactive. It 

say an applic should be responsive, elast (that is, scalable), resilient, and message-driven. 

have an applic that be truli respons be the foundat goal. suppos you have 

an applic that heavili depend on one big thread to handl user requests, and thi thread 

reactiv program 
with jax-r 
use an async approach and stag to develop respons reactiv app 

mert çalişkan 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://www.reactivemanifesto.org 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

17 

//reactiv program / 

typic send respons back to it origin 

request after do it work. when the applica- 

tion get more request than it can handle, thi 

thread will start to be a bottleneck and the appli- 

cation itself will not be abl to be a respons a 

it be before. To have the applic be respon- 

sive, you need to make it scalabl and resilient, 

becaus respons be possibl onli with both scalabl and resilience. resili occur 

when an applic exhibit featur such a auto-recoveri and self-healing. In most devel- 

opers’ experience, onli a message-driven architectur can enabl a scalable, resilient, and 

respons application. 

reactiv program have start to be bake into the bit of the java 8 and java EE 8 

releases. the java languag introduc concept such a completionstag and it implementa- 

tion, completablefuture, and java EE start to employ these featur in speciic such a 

the reactiv client api of jax-rs. 

jax-r 2.1 reactiv client api 

let’ look at how reactiv program can be use in java EE 8 applications. To follow along, 

you’ll need familiar with the basic java EE apis. 

jax-r 2.1 introduc a new way of creat a rest client with support for reactiv pro- 

gramming. the default invok implement provid by jax-r be synchronous, which 

mean the client that be creat will make a block call to the server endpoint. An exampl for 

thi implement be show in list 1. 

list 1. 

respons respons = 

clientbuilder.newclient() 

.target("http://localhost:8080/service-url") 

.request() 

the reactiv implement might 
look more complic at first glance, but 
after closer examin you will see that 
it’ fairli straightforward. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

18 

//reactiv program / 

.get(); 

As of version 2.0, jax-r provid support for creat an asynchron invok on the client 

api by just invok the async() method, a show in list 2. 

list 2. 

future<response> respons = 

clientbuilder.newclient() 

.target("http://localhost:8080/service-url") 

.request() 

.async() 

.get(); 

use an asynchron invok on the client return an instanc of futur with type javax.ws.r 

.core.response. thi would either result in poll the response, with a call to future.get(), or 

regist a callback that would be invok when the http respons be available. both of these 

implement approach be suitabl for asynchron programming, but thing usual 

get complic when you want to nest callback or you want to add condit case in those 

asynchron execut lows. 

jax-r 2.1 ofer a reactiv way to overcom these problem with the new jax-r reactiv 

client api for build the client. it’ a simpl a invok the rx() method while build the 

client. In list 3, the rx() method return the reactiv invok that exist on the client’ run- 

time and the client return a respons of type completionstage.rx(), which enabl the switch 

from sync to async invok by thi simpl invocation. 

list 3. 

completionstage<response> respons = 

clientbuilder.newclient() 

.target("http://localhost:8080/service-url") 

.request() 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

19 

//reactiv program / 

.rx() 

.get(); 

completionstage<t> be a new interfac introduc in java 8, and it repres a comput that 

can be a stage within a larg computation, a it name implies. it’ the onli reactiv portion of 

java 8 that make it into the jax-rs. 

after get a respons instance, I can just invok thenacceptasync(), where I can provid 

the code snippet that would be execut asynchron when the respons becom available, 

such a show in list 4. 

list 4. 

response.thenacceptasync(r -> { 

temperatur t = res.readentity(temperature.class); 

//do stuff with t 

}); 

ad reactiv good to a rest endpoint 

the reactiv approach be not limit to the client side in jax-rs; it’ also possibl to leverag it 

on the server side. To demonstr this, I will irst creat a simpl scenario where I can queri a 

list of locat from one endpoint. for each location, I will make anoth call to anoth end- 

point with that locat data to get a temperatur value. the interact of the endpoint would 

be a show in figur 1. 

figur 1. interact between endpoint 

forecast 
servic 

locat 
servic 

temperatur 
servic 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

20 

//reactiv program / 

first, I simpli dein the domain model and then I dein the servic for each domain 

model. list 5 dein the forecast class, which wrap the temperatur and locat classes. 

list 5. 

public class temperatur { 

privat doubl temperature; 

privat string scale; 

// getter & setter 

} 

public class locat { 

string name; 

public location() {} 

public location(str name) { 

this.nam = name; 

} 

// getter & setter 

} 

public class forecast { 

privat locat location; 

privat temperatur temperature; 

public forecast(loc location) { 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

21 

//reactiv program / 

this.loc = location; 

} 

public forecast settemperature( 

final temperatur temperature) { 

this.temperatur = temperature; 

return this; 

} 



// getter 

} 

for wrap a list of forecasts, the servicerespons class be implement in list 6. 

list 6. 

public class servicerespons { 

privat long processingtime; 

privat list<forecast> forecast = new arraylist<>(); 

public void setprocessingtime(long processingtime) { 

this.processingtim = processingtime; 

} 

public servicerespons forecasts( 

list<forecast> forecasts) { 

this.forecast = forecasts; 

return this; 

} 



// getter 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

22 

//reactiv program / 

} 

locationresource, which be show in list 7, dein three sampl locat return with the 

path /location. 

list 7. 

@path("/location") 

public class locationresourc { 

@get 

@produces(mediatype.application_json) 

public respons getlocations() { 

list<location> locat = new arraylist<>(); 

locations.add(new location("london")); 

locations.add(new location("istanbul")); 

locations.add(new location("prague")); 

return response.ok( 

new genericentity<list<location>>(locations){}) 

.build(); 

} 

} 

temperatureresource, show in list 8, return a randomli gener temperatur valu 

between 30 and 50 for a give location. A delay of 500 m be add within the implement to 

simul the sensor reading. 

list 8. 

@path("/temperature") 

public class temperatureresourc { 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

23 

//reactiv program / 

@get 

@path("/{city}") 

@produces(mediatype.application_json) 

public respons getaveragetemperature( 

@pathparam("city") string cityname) { 

temperatur temperatur = new temperature(); 

temperature.settemperature( 

(double) (new random().nextint(20)+30)); 

temperature.setscale("celsius"); 

tri { 

thread.sleep(500); 

} catch (interruptedexcept ignored) {} 

return response.ok(temperature).build(); 

} 

} 

I will irst show the implement for the synchron forecastresourc (shown in list 9), 

which irst fetch all locations. then, for each location, it invok the temperatur servic to 

retriev the celsiu value. 

list 9. 

@path("/forecast") 

public class forecastresourc { 

@uri("location") 

privat webtarget locationtarget; 

@uri("temperature/{city}") 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

24 

//reactiv program / 

privat webtarget temperaturetarget; 

@get 

@produces(mediatype.application_json) 

public respons getlocationswithtemperature() { 

long starttim = system.currenttimemillis(); 

servicerespons respons = new serviceresponse(); 

list<location> locat = locationtarget.request() 

.get(new generictype<list<location>>() {}); 

locations.foreach(loc -> { 

temperatur temperatur = temperaturetarget 

.resolvetemplate("city", location.getname()) 

.request() 

.get(temperature.class); 

response.getforecasts().add( 

new forecast(location) 

.settemperature(temperature)); 

}); 

long endtim = system.currenttimemillis(); 

response.setprocessingtime(endtim - starttime); 

return response.ok(response).build(); 

} 

} 

when the forecast endpoint be request a /forecast, you should see output similar to list 10. 

notic that the process time of the request take 1,533 ms, which make sens becaus request- 

ing temperatur valu for three difer locat synchron would add up to 1,500 ms. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

25 

//reactiv program / 

list 10. 

{ 

"forecasts": [ 

{ 

"location": { 

"name": "london" 

}, 

"temperature": { 

"scale": "celsius", 

"temperature": 33 

} 

}, 

{ 

"location": { 

"name": "istanbul" 

}, 

"temperature": { 

"scale": "celsius", 

"temperature": 38 

} 

}, 

{ 

"location": { 

"name": "prague" 

}, 

"temperature": { 

"scale": "celsius", 

"temperature": 46 

} 

} 

], 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

26 

//reactiv program / 

"processingtime": 1533 

} 

So far, so good. now it’ time to introduc reactiv program on the server side, where a 

call for each locat could be do in parallel after get all the locations. thi can deinit 

enhanc the synchron low show earlier. thi be do in list 11, which dein a reactiv 

version of thi forecast service. 

list 11. 

@path("/reactiveforecast") 

public class forecastreactiveresourc { 



@uri("location") 

privat webtarget locationtarget; 



@uri("temperature/{city}") 

privat webtarget temperaturetarget; 



@get 

@produces(mediatype.application_json) 

public void getlocationswithtemperature( 

@suspend final asyncrespons async) { 



long starttim = system.currenttimemillis(); 



// creat a stage on retriev locat 

completionstage<list<location>> locationc = 

locationtarget.request() 

.rx() 

.get(new generictype<list<location>>() {}); 



http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

27 

//reactiv program / 

// By compos anoth stage on the locat stage 

// creat above, collect the list of forecast 

// a in one big complet stage 

final completionstage<list<forecast>> forecastc = 

locationcs.thencompose(loc -> { 



// creat a stage for retriev forecast 

// a a list of complet stage 

list<completionstage<forecast>> forecastlist = 

// stream locat and process each 

// locat individu 

locations.stream().map(loc -> { 



// creat a stage for fetch the 

// temperatur valu just for one citi 

// give by it name 

final completionstage<temperature> tempc = 

temperaturetarget 

.resolvetemplate("city", 

location.getname()) 

.request() 

.rx() 

.get(temperature.class); 



// then creat a complet futur that 

// contain an instanc of forecast 

// with locat and temperatur valu 

return completablefuture.completedfuture( 

new forecast(location)) 

.thencombine(tempcs, 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

28 

//reactiv program / 

forecast::settemperature); 

}).collect(collectors.tolist()); 

// return a final complet futur instanc 

// when all provid complet futur be 

// complet 

return completablefuture.allof( 

forecastlist.toarray( 

new completablefuture[forecastlist.size()])) 

.thenapply(v -> forecastlist.stream() 

.map(completionstage::tocompletablefuture) 

.map(completablefuture::join) 

.collect(collectors.tolist())); 

}); 

// creat an instanc of serviceresponse, 

// which contain the whole list of forecast 

// along with the process time. 

// creat a complet futur of it and combin to 

// forecastc in order to retriev the forecast 

// and set into servic respons 

completablefuture.completedfuture( 

new serviceresponse()) 

.thencombine(forecastcs, 

serviceresponse::forecasts) 

.whencompleteasync((response, throwable) -> { 

response.setprocessingtime( 

system.currenttimemillis() - starttime); 

async.resume(response); 

}); 

} 

} 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

29 

//reactiv program / 

the reactiv implement might 

look more complic at irst glance, 

but after closer examin you will 

see that it’ fairli straightforward. 

within the forecastreactiveresourc 

implementation, I irst creat a client 

invoc on the locat servic 

with the help of the jax-r reactiv client api. As I mention previously, thi be an addit to 

java EE 8, and it help to creat a reactiv invok simpli by use of the rx() method. 

now I compos anoth stage base on locat to collect the list of forecasts. they will be 

store in one big complet stage, name forecastcs, a a list of forecasts. I will ultim 

creat the respons of the servic call by use onli forecastcs. 

let’ continu by collect the forecast a a list of complet stage a dein in the 

forecastlist variable. To creat the complet stage for each forecast, I stream on the loca- 

tion and then creat the tempc variabl by again use the jax-r reactiv client api, which 

will invok the temperatur servic with citi name. I use the resolvetemplate() method here to 

build a client, and that enabl me to pa the name of the citi to the builder a a parameter. 

As a last step of stream on locations, I do a call to completablefuture.completedfuture() 

by provid a newli creat instanc of forecast a the parameter. I combin thi futur with 

the tempc stage so that I have the temperatur valu for the iter locations. 

the completablefuture.allof() method in list 11 transform the list of complet stage 

to forecastcs. execut of thi step return the big complet futur instanc when all pro- 

vide complet futur be completed. 

the respons from the servic be an instanc of the servicerespons class, so I creat a com- 

plete futur for that a well, and then I combin the forecastc complet stage with the list 

of forecast and calcul the respons time of the service. 

Of course, thi reactiv program make onli the server side execut asynchronously; 

the client side will be block until the server send the respons back to the requester. In 

order to overcom thi problem, server sent event (sses) can also be use to partial send 

reactiv program be more than enhanc 
the implement from synchron to asynchronous; 
it also ea develop with concept such a 
nest stages. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

30 

//reactiv program / 

the respons onc it’ avail so that for each location, the temperatur valu can be push 

to the client one by one. the output of forecastreactiveresourc will be someth similar to 

list 12. As show in the output, the process time be 515 ms, which be the ideal execut 

time for retriev a temperatur valu for one location. 

list 12. 

{ 

"forecasts": [ 

{ 

"location": { 

"name": "london" 

}, 

"temperature": { 

"scale": "celsius", 

"temperature": 49 

} 

}, 

{ 

"location": { 

"name": "istanbul" 

}, 

"temperature": { 

"scale": "celsius", 

"temperature": 32 

} 

}, 

{ 

"location": { 

"name": "prague" 

}, 

"temperature": { 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

31 

//reactiv program / 

"scale": "celsius", 

"temperature": 45 

} 

} 

], 

"processingtime": 515 

} 

conclus 

throughout the exampl in thi article, I irst show the synchron way to retriev the 

forecast inform by choreograph locat and temperatur services. then I move on 

to the reactiv approach in order to have the asynchron process occur between servic 

calls. when you leverag the use of the jax-r reactiv client api of java EE 8 and class such 

a completionstag and completablefutur ship with java 8, the power of asynchron pro- 

cess be unleash with the help of reactive-styl programming. 

reactiv program be more than enhanc the implement from a synchro- 

nou to an asynchron model; it also ea develop with concept such a nest 

stages. the more it be adopted, the easi it will be to handl complex scenario in parallel 

programming. </article> 

mert çalişkan (@mertcal) be a java champion and a coauthor of primefac cookbook (packt publishing, 

2013) and begin spring (wiley publications, 2015). He current be work on hi late book, java EE 8 

microservices, and he work a a develop on the payara server insid the payara foundation. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

32 

//reactiv program / 

eclips vert.x be a toolkit for implement reactiv and distribut system on top of the jvm. It be design from the start with a reactiv design and asynchroni in mind. vert.x be 
also about freedom. It do not tell you how to shape your system; you be in charge. it exten- 

sive ecosystem provid everyth you need to build responsive, distributed, and interact 

applications. thi articl describ how vert.x combin an asynchron execut model and 

a reactiv implement to let you build applic that can handl uncertain and ever- 

evolv develop needs. 

what doe It mean to Be reactive? 

let’ start from the beginning: what do reactiv actual mean? the oxford english dictionari 

dein reactiv a “show a respons to a stimulus.” so, by extension, reactiv softwar can 

be dein a softwar that react to stimuli. but use that deinition, softwar have be reactiv 

sinc the earli age of computers. softwar be design to react to user demand such a input, 

clicks, commands, and so on. 

however, with the rise of distribut systems, applic start react to messag 

sent by peer and by failur events. the recent reactiv renaiss be mainli due to the dif- 

iculti of build robust distribut systems. As develop pain learned, distribut 

system be diicult, and they fail for mani reason such a capac issues, network outages, 

hardwar problems, and bugs. In response, a few year ago, the reactiv manifesto dein 

reactiv system a distribut system with the follow characteristics: 

■■ message-driven: they use asynchron messag pass to communicate. 
julien pong photograph BY 

matt bostock/getti imag 

go reactiv with eclips vert.x 
and rxjava 
build responsive, scalabl app with one of the most popular reactiv librari 

clement escoffi 

julien pong 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://vertx.io 
http://vertx.io 
https://www.reactivemanifesto.org/ 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

33 

//reactiv program / 

■■ elastic: they stay respons under vari workloads. 

■■ resilient: they stay respons in the face of failure. 

■■ responsive: they respond in a time manner. 

thi architectur style promot a new way to build distribut systems, infus asynchroni 

into the core of these systems. while reactiv system be describ a “distribut system 

do right,” they can be diicult to build. tame the asynchron beast be particularli dii- 

cult from the develop standpoint. In addition, the tradit thread model (one thread per 

request) tend to creat memori and cpu hogs, and, when deal with asynchron code, thi 

approach be particularli ineicient. 

sever develop model have emerg to make the develop of asynchron 

applic easier, includ actors, ibers, coroutines, and reactiv programming. thi articl 

focu on the latter. 

reactiv program (and it main derivative, reactiv extensions, or rx) be an asyn- 

chronou program paradigm focu on the manipul of data streams. It provid an 

api to compos asynchron and event-driven applications. when use reactiv program- 

ming, you be handl stream of data in which data lows. you observ these stream and 

react when new data be available. 

but data stream have an inher law. what happen if you receiv too mani messag 

and you can’t process them in time? you could put a bufer between the sourc and the han- 

dler, but it would help onli with handl small bumps. drop incom data be also a solu- 

tion, but that be not alway acceptable. ultimately, you need a way to control the pace. thi be 

what the reactiv stream speciic proposes. It dein an asynchron and nonblock 

back-pressur protocol. In thi low of control, the consum notii the produc of it current 

capacity. so, the produc do not send too much data on the stream, and your system auto- 

adapt to it capac without burning. 

whi Do reactiv system matter? 

whi do reactiv program becom so preval in the past few years? for a veri long 

time, most applic have be develop use a synchron execut model and 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

34 

//reactiv program / 

most api have be design to follow 

thi approach. 

however, comput system and 

distribut system be asynchronous. 

synchron process be a simpliica- 

tion make to provid eas of comprehen- 

sion. for years, the asynchron natur 

of system have be ignored, and now 

it’ time to catch up. mani modern applic be reli on i/o operations, such a remot 

invoc or access to the ile system. becaus of the synchron natur of applic 

code, however, these i/o oper be design to be blocking, so the applic wait for 

a respons befor it can continu it execution. To enabl concurrency, the applic reli 

on multithread and increas the number of threads. but, thread be expensive. first, the 

code have to protect itself from concurr access to it state. second, thread be expens in 

term of memori and—often overlooked—in cpu time, becaus switch between thread 

requir cpu cycles. 

therefore, a more eicient model be needed. the asynchron execut model promot 

a task-bas concurr in which a task releas the thread when it cannot make progress 

anymor (for instance, it invok a remot servic use nonblock i/o and will be notii 

when the result be available). thus, the same thread can switch to anoth task. As a result, a 

singl thread can handl sever interleav tasks. 

tradit develop and execut paradigm be not abl to exploit thi new model. 

however, in a world of cloud and containers, where applic be massiv distribut and 

interconnect and they must handl continu grow traic, the promis make by reac- 

tive system be a perfect match. but, implement reactiv system requir two shifts: an 

execut shift to use an asynchron execut model and a develop shift to write asyn- 

chronou api and applications. thi be what eclips vert.x ofers. In the rest of thi article, we 

present how vert.x combin both to give you superpowers. 

implement reactiv system requir 
two shifts: an execut shift to use an 
asynchron execut model and a develop 
shift to write asynchron api and applications. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

35 

//reactiv program / 

rxjava: the reactiv program toolbox for java 

let’ focu on reactiv programming—a develop model for write asynchron code. 

when use reactiv programming, the code manipul stream of data. the data be gener- 

ate by publishers. the data low between a publish and consumers, which process the data. 

consum observ a data stream be notii when a new item be available, when the stream 

completes, and when an error be caught. To avoid overload consumers, a back-pressur pro- 

tocol be requir to control the amount of data low in the stream. thi be gener handl 

transpar by the reactiv framework. 

there be sever implement of the reactiv program paradigm. rxjava be a 

straightforward implement of reactiv extens (rx) for the java program lan- 

guage. It be a popular librari for reactiv program that can be use to develop applic 

in network data processing, graphic user interfac with javafx, and android apps. rxjava 

be the princip toolkit for reactiv librari in java, and it provid ive data type to describ 

data publish depend on the type of data streams, a show in tabl 1. 

these type repres data publish and convey data process by consum observ- 

ing them. depend on the number of item low in the stream, the type be diferent. for 

stream with a bound or unbound sequenc of items, the type observ and flowabl 

be used. 

the difer between observ and flowabl be that flowabl handl back-pressur 

(that is, it implement a reactiv stream protocol) while observ do not. flowabl be good 

tabl 1. rxjava reactiv publish type 

use case number OF expect item 
IN the stream 

rxjava type 

notification, data flow 0..n observable, flowabl 

asynchron oper produc 
(mayb ) A result 

1..1 
0..1 

singl 

mayb 

asynchron oper that doe 
not produc A result 

0 complet 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

36 

//reactiv program / 

suit for larg stream of data come from a sourc that support back-pressur (for exam- 

ple, a tcp connection), while observ be good suit at handl so-cal “hot” observ- 

abl for which back-pressur cannot be appli (such a gui event and other user actions). 

It be import to note that not all stream can support back-pressure. In fact, most of the 

stream convey data captur in the physic world be not capabl of this. reactiv pro- 

gram librari propos strategi such a bufer and accept data loss for handl 

these cases. 

get start with rxjava. it’ time to see some code and make reactiv clearer. the com- 

plete project sourc code be avail online. clone or download thi project and check the 

content of the rxjava-sampl subproject. It us rxjava 2.x and the logback-class log 

library. you will see late how it help you understand thread with rxjava. 

In the previou section, we brieli examin the difer reactiv type propos by 

rxjava. the follow class creat instanc of these type and appli some basic operations: 

packag samples; 

import io.reactivex.completable; 

import io.reactivex.flowable; 

import io.reactivex.maybe; 

import io.reactivex.single; 

import io.reactivex.functions.consumer; 

import org.slf4j.logger; 

import org.slf4j.loggerfactory; 

public class rxhello { 

privat static final logger logger = 

loggerfactory.getlogger(rxhello.class); 

public static void main(string[] args) { 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
https://github.com/jponge/oracle-javamag-vertx-rxjava/tree/master/vertx-sampl 
https://logback.qos.ch/ 
https://logback.qos.ch/ 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

37 

//reactiv program / 

single.just(1) 

.map(i -> i * 10) 

.map(object::tostring) 

.subscribe((consumer<string>) logger::info); 

maybe.just("something") 

.subscribe(logger::info); 

maybe.never() 

.subscribe(o -> logger.info("someth be here...")); 

completable.complete() 

.subscribe(() -> logger.info("completed")); 

flowable.just("foo", "bar", "baz") 

.filter( -> s.startswith("b")) 

.map(string::touppercase) 

.subscribe(logger::info); 

} 

} 

run thi exampl yield output similar to this: 

11:24:28.638 [main] info samples.rxhello - 10 

11:24:28.661 [main] info samples.rxhello - someth 

11:24:28.672 [main] info samples.rxhello - complet 

11:24:28.716 [main] info samples.rxhello - bar 

11:24:28.716 [main] info samples.rxhello - baz 

It be import to note that a with java collect streams, no process happen until an end 

event take place. In rxjava, that event be a subscription. In thi example, we use subscribe() 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

38 

//reactiv program / 

with a singl parameter, which be a lambda call to receiv each event. the follow be other 

form of subscrib depend on the event the consum want to receive: 

■■ No arguments, which just trigger the process 

■■ two argument to process event and error 

■■ three argument to process events, to process errors, and to provid notiic when the 

process be complet 

creat publish and recov from errors. Of course, rxjava would be quit limit if cre- 

ate data stream such a observ be limit to call the just() factori method a we 

do in the previou example. all type of publish support a create() method to dein the 

code to deal with new subscribers: 

list<string> data = 

arrays.aslist("foo", "bar", "baz"); 

random random = new random(); 

observable<string> sourc = 

observable.create(subscrib -> { 

for (string s : data) { 

if (random.nextint(6) == 0) { 

subscriber.onerror( 

new runtimeexception("bad luck for you...")); 

} 

subscriber.onnext(s); 

} 

subscriber.oncomplete(); 

}); 

the exampl abov creat an observ of string valu (in other words, a stream of string 

values), where the valu be be pick from a predein list. We also introduc random 

failures. the follow three method can be use to notifi subscribers: 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

39 

//reactiv program / 

■■ onnext, when a new valu be sent to the subscriber, possibl pass through intermedi 

oper befor it reach the subscrib 

■■ oncomplet to indic that no more valu will be sent 

■■ onerror to indic that an error happen and that no further valu will be sent; ani 

throwabl can be use a an error valu 

note that create() be not the onli way to dein custom publishers, but present all 

option would be outsid the scope of thi article. 

becaus there be a good probabl that error will happen, we can test thi observ 

10 times: 

for (int i = 0; i < 10; i++) { 

logger.info("======================================="); 

source.subscribe( 

next -> logger.info("next: {}", next), 

error -> logger.error("whoops"), 

() -> logger.info("done")); 

} 

We can observ success complet a well a error in the execut traces: 

11:51:47.469 [main] info samples.rxcreateobserv - 

======================================= 

11:51:47.469 [main] info samples.rxcreateobserv - next: foo 

11:51:47.469 [main] info samples.rxcreateobserv - next: bar 

11:51:47.469 [main] info samples.rxcreateobserv - next: baz 

11:51:47.469 [main] info samples.rxcreateobserv - done 

11:51:47.469 [main] info samples.rxcreateobserv - 

======================================= 

11:51:47.469 [main] info samples.rxcreateobserv - next: foo 

11:51:47.469 [main] info samples.rxcreateobserv - next: bar 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

40 

//reactiv program / 

11:51:47.469 [main] error samples.rxcreateobserv - whoop 

11:51:47.469 [main] info samples.rxcreateobserv - 

======================================= 

11:51:47.469 [main] info samples.rxcreateobserv - next: foo 

11:51:47.469 [main] error samples.rxcreateobserv - whoop 

rxjava support variou way to recov from errors, such a switch to anoth stream or 

provid a default value. anoth option be to use retry(): 

sourc 

.retry(5) 

.subscribe(next -> logger.info("next: {}", next), 

error -> logger.error("whoops"), 

() -> logger.info("done")); 

above, we specii that in case of error, we should retri at most ive time with new subscrip- 

tions. note that retri might use anoth thread for execution. becaus error be random, 

your exact output trace will vari across executions, but the follow output show an exampl 

of retries: 

11:51:47.472 [main] info samples.rxcreateobserv - next: foo 

11:51:47.472 [main] info samples.rxcreateobserv - next: bar 

11:51:47.472 [main] info samples.rxcreateobserv - next: foo 

11:51:47.472 [main] info samples.rxcreateobserv - next: bar 

11:51:47.472 [main] info samples.rxcreateobserv - next: baz 

11:51:47.472 [main] info samples.rxcreateobserv - done 

rxjava and threads. So far, we haven’t care much about multithreading. let’ take anoth 

exampl and run it: 

flowable.range(1, 5) 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

41 

//reactiv program / 

.map(i -> i * 10) 

.map(i -> { 

logger.info("map({})", i); 

return i.tostring(); 

}) 

.subscribe(logger::info); 

thread.sleep(1000); 

you can see from the log that all process happen on the main thread: 

12:01:01.097 [main] info samples.rxthread - map(10) 

12:01:01.100 [main] info samples.rxthread - 10 

12:01:01.100 [main] info samples.rxthread - map(20) 

12:01:01.100 [main] info samples.rxthread - 20 

12:01:01.100 [main] info samples.rxthread - map(30) 

12:01:01.100 [main] info samples.rxthread - 30 

12:01:01.100 [main] info samples.rxthread - map(40) 

12:01:01.100 [main] info samples.rxthread - 40 

12:01:01.100 [main] info samples.rxthread - map(50) 

12:01:01.100 [main] info samples.rxthread - 50 

In fact, both the oper process and the subscrib notiic happen from that main 

thread. By default, a publish (and the chain of oper that you appli to it) will do it work, 

and will notifi it consumers, on the same thread on which it subscrib method be called. 

rxjava ofer schedul to oload work to special thread and executors. schedul be 

respons for notifi the subscrib on the correct thread even if it’ not the thread use 

to call subscribe. 

the io.reactivex.schedulers.schedul class ofer sever schedulers, with the most 

interest be these: 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

42 

//reactiv program / 

■■ computation() for cpu-intens work with no block i/o oper 

■■ io() for all block i/o oper 

■■ single(), which be a share thread for oper to execut in order 

■■ from(executor) to oload all schedul work to a custom executor 

now, back to our previou example, we can specifi how the subscript and observ will 

be scheduled: 

flowable.range(1, 5) 

.map(i -> i * 10) 

.map(i -> { 

logger.info("map({})", i); 

return i.tostring(); 

}) 

.observeon(schedulers.single()) 

.subscribeon(schedulers.computation()) 

.subscribe(logger::info); 

thread.sleep(1000); 

logger.info("==================================="); 

the subscribeon method specii the schedul for the subscript and oper processing, 

while the observeon method specii the schedul for observ the events. In thi example, 

the map oper be invok on the comput thread pool while the subscrib callback 

(logger::info) be invok by a difer thread (which do not change). run the exampl 

give an execut trace where you clearli see difer thread be involved: 

12:01:03.127 [rxcomputationthreadpool-1] info 

samples.rxthread - map(10) 

12:01:03.128 [rxcomputationthreadpool-1] info 

samples.rxthread - map(20) 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

43 

//reactiv program / 

12:01:03.128 [rxsinglescheduler-1] info 

samples.rxthread - 10 

12:01:03.128 [rxcomputationthreadpool-1] info 

samples.rxthread - map(30) 

12:01:03.128 [rxsinglescheduler-1] info 

samples.rxthread - 20 

12:01:03.128 [rxcomputationthreadpool-1] info 

samples.rxthread - map(40) 

12:01:03.128 [rxsinglescheduler-1] info 

samples.rxthread - 30 

12:01:03.128 [rxsinglescheduler-1] info 

samples.rxthread - 40 

12:01:03.128 [rxcomputationthreadpool-1] info 

samples.rxthread - map(50) 

12:01:03.128 [rxsinglescheduler-1] info 

samples.rxthread - 50 

12:01:04.127 [main] info 

samples.rxthread 

=================================== 

combin observables. rxjava ofer mani way to combin streams. we’ll illustr that with 

the merg and zip operations. merg stream provid a singl stream that mix element 

from the variou sources, a the follow exampl shows: 

packag samples; 

import io.reactivex.flowable; 

import io.reactivex.schedulers.schedulers; 

import org.slf4j.logger; 

import org.slf4j.loggerfactory; 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

44 

//reactiv program / 

import java.util.uuid; 

import java.util.concurrent.timeunit; 

public class rxmerg { 

privat static final logger logger = 

loggerfactory.getlogger(rxmerge.class); 

public static void main(string[] args) 

throw interruptedexcept { 

flowable<string> interv = flowabl 

.interval(100, timeunit.milliseconds, 

schedulers.computation()) 

.limit(10) 

.map(tick -> "tick #" + tick) 

.subscribeon(schedulers.computation()); 

flowable<string> string = flowable.just( 

"abc", "def", "ghi", "jkl") 

.subscribeon(schedulers.computation()); 

flowable<object> uuid = flowabl 

.generate(emitt -> emitter.onnext(uuid.randomuuid())) 

.limit(10) 

.subscribeon(schedulers.computation()); 

flowable.merge(strings, intervals, uuids) 

.subscribe(obj -> logger.info("received: {}", obj)); 

thread.sleep(3000); 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

45 

//reactiv program / 

} 

} 

run thi exampl give a trace in which element from the variou sourc may be inter- 

leaved. anoth use option be zip(), which take element from variou sourc and assem- 

ble them: 

flowable.zip(intervals, uuids, strings, 

(i, u, s) -> string.format("% {%s} -> %s", i, u, s)) 

.subscribe(obj -> logger.info("received: {}", obj)); 

It produc a trace similar to this: 

14:32:40.127 [rxcomputationthreadpool-7] info 

samples.rxmerg - received: tick #0 

{67e7cde0-3f29-49cb-b569-e01474676d98} -> abc 

14:32:40.224 [rxcomputationthreadpool-7] info 

samples.rxmerg - received: tick #1 

{a0a0cc83-4bed-4793-9ee0-11baa7707610} -> def 

14:32:40.324 [rxcomputationthreadpool-7] info 

samples.rxmerg - received: tick #2 

{7b7d81b6-cc39-4ec0-a174-fbd61b1d5c71} -> ghi 

14:32:40.424 [rxcomputationthreadpool-7] info 

samples.rxmerg - received: tick #3 

{ae88eb02-52a5-4af7-b9cf-54b29b9cdb85} -> jkl 

In real-world scenarios, zip() be use for gather data from other parties, such a services, 

and then produc a result base on what be received. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

46 

//reactiv program / 

implement reactiv system with reactiv program 

while reactiv program let you compos asynchron and event-driven applications, 

don’t lose sight of the overal goal. To success build respons distribut system in 

a world of cloud and containers, embrac the asynchron execut model be essential. 

reactiv program address the asynchron develop model, but you still need a 

task-bas concurr model and nonblock i/o. eclips vert.x provid these two miss 

piec a well a rxjava-friendli apis. 

the vert.x execut model be base on the concept of an event loop. An event loop be a 

thread consum event from a queue. for each event, it look for a handler interest in the 

event and call it. handler be method that receiv an event a a parameter. In thi model, 

your code can be single-thread while handl lot of concurr and entangl tasks. 

however, thi approach come with some drawbacks. the execut handler must never block 

the event loop: if they do, the system lose it respons and the number of unprocess 

event in the queue rises. 

fortunately, vert.x come with a larg ecosystem for implement almost anyth in an 

asynchron and nonblock way. for instance, vert.x provid build block for build 

modern web applications, access databases, and interact with legaci systems. let’ look 

at a few examples. the vert.x “hello world” applic (code avail online) be the following: 

packag samples; 

import io.vertx.core.vertx; 

public class httpapplic { 

public static void main(string[] args) { 

// 1 - creat a vert.x instanc 

vertx vertx = vertx.vertx(); 

// 2 - creat the http server 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
https://github.com/jponge/oracle-javamag-vertx-rxjava/blob/master/vertx-samples/src/main/java/samples/httpapplication.java 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

47 

//reactiv program / 

vertx.createhttpserver() 

// 3 - attach a request handler process the request 

.requesthandler(req -> req.response() 

.end("hello, request handl from " 

+ thread.currentthread().getname())) 

// 4 - start the server on the port 8080 

.listen(8080); 

} 

} 

for each incom http request (event), the request handler be called. notic that the handler be 

alway call by the same thread: the event loop thread. now, if you want to call anoth servic 

(use http) in the request handler, you would do someth like this: 

packag samples; 

import io.vertx.core.vertx; 

import io.vertx.ext.web.client.webclient; 

public class twitterfeedappl { 

public static void main(string[] args) { 

vertx vertx = vertx.vertx(); 

// 1 - creat a web client 

webclient client = webclient.create(vertx); 

vertx.createhttpserver() 

.requesthandler(req -> { 

// 2 - In the request handler, retriev a twitter feed 

client 

.getabs("https://twitter.com/vertx_project") 

.send(r -> { 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

48 

//reactiv program / 

// 3 - write the respons base on the result 

if (res.failed()) { 

req.response().end("cannot access " 

+ "the twitter feed: " 

+ res.cause().getmessage()); 

} els { 

req.response().end(res.result() 

.bodyasstring()); 

} 

}); 

}) 

.listen(8080); 

} 

} 

thi exampl reli on the vert.x nonblock i/o, so the entir code run on the vert.x event 

loop (in a single-thread manner). thi do not prevent handl concurr requests. it’ 

actual the opposite; a singl thread handl all the requests. however, you can quickli see the 

issue: the code becom diicult to understand becaus of the nest callbacks. thi be where 

rxjava come into play. the previou code can be rewrit a follows: 

packag samples; 

import io.vertx.reactivex.core.vertx; 

import io.vertx.reactivex.core.http.httpserver; 

import io.vertx.reactivex.ext.web.client.httpresponse; 

import io.vertx.reactivex.ext.web.client.webclient; 

public class rxtwitterfeedappl { 

public static void main(string[] args) { 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

49 

//reactiv program / 

vertx vertx = vertx.vertx(); 

webclient client = webclient.create(vertx); 

httpserver server = vertx.createhttpserver(); 

server 

// 1 - transform the sequenc of request into a stream 

.requeststream().toflowable() 

// 2 - for each request, call the twitter api 

.flatmapcompletable(req -> 

client.getabs("https://twitter.com/vertx_project") 

.rxsend() 

// 3 - extract the bodi a string 

.map(httpresponse::bodyasstring) 

// 4 - In case of a failur 

.onerrorreturn(t -> "cannot access the twitter " + 

"feed: " + t.getmessage()) 

// 5 - write the respons 

.doonsuccess(r -> req.response().end(res)) 

// 6 - just transform the restul into a complet 

.tocompletable() 

) 

// 7 - never forget to subscrib to a reactiv type, 

// or noth happen 

.subscribe(); 

server.listen(8080); 

} 

} 

By restructur the code around the rxjava reactiv types, you beneit from the rxjava 

operators. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

50 

//reactiv program / 

implement a reactiv edg servic 

let’ look at anoth simpl yet efect example. suppos that you have three servic ofer 

bids, and you want to ofer an edg servic to select the best ofer at a point in time. let these 

servic ofer simpl http/json endpoints. obvious in real-world scenarios, these servic 

might fail temporarily, and their respons time might greatli vary. 

We will simul such a system by develop the following: 

■■ A bid service, with artiici delay and random error 
■■ An edg servic to queri servic through http 

By use rxjava, we can show how to combin request streams, deal with failures, and provid 

time-bound guarante for return the best ofer. all verticl will be deploy within the 

same applic a we be prototyping, but thi do not result in ani loss of generality. the 

complet code be avail in the vertx-sampl subproject. 

instead of start the applic use a main method, we be go to use verticles. A 

verticl be a chunk of code, gener a java class, that be deploy and run by vert.x. verticl 

be simpl and scalable, and they use an actor-lik deploy and concurr model. they 

let you organ your code into a set of loos coupl components. By default, verticl be 

execut by the event loop and observ difer type of event (http requests, tcp frames, 

messages, and so on). when the applic starts, it instruct vert.x to deploy a set of verticles. 

bid servic verticle. the verticl be design with the http port be conigurable, 

a follows: 

public class biddingserviceverticl extend abstractverticl { 

privat final logger logger = 

loggerfactory.getlogger(biddingserviceverticle.class); 

@overrid 

public void start(future<void> verticlestartfuture) throw except { 

random random = new random(); 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
https://github.com/jponge/oracle-javamag-vertx-rxjava/tree/master/vertx-sampl 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

51 

//reactiv program / 

string myid = uuid.randomuuid().tostring(); 

int portnumb = config().getinteger("port", 3000); 

// (...) 

} 

} 

the config() method provid access to a verticl coniguration, and accessor method such a 

getinteg support a default valu a a second argument. So here, the default http port be 3000. 

the servic have a random uuid to identifi it endpoint in responses, and it make use of a ran- 

dom number generator. 

the next step be to use the vert.x web router to accept http get request on path /offer: 

router router = router.router(vertx); 

router.get("/offer").handler(context -> { 

string clientidhead = context.request() 

.getheader("client-request-id"); 

string clientid = 

(clientidhead != null) ? clientidhead : "n/a"; 

int mybid = 10 + random.nextint(20); 

jsonobject payload = new jsonobject() 

.put("origin", myid) 

.put("bid", mybid); 

if (clientidhead != null) { 

payload.put("clientrequestid", clientid); 

} 

long artificialdelay = random.nextint(1000); 

vertx.settimer(artificialdelay, id -> { 

if (random.nextint(20) == 1) { 

context.response() 

.setstatuscode(500) 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

52 

//reactiv program / 

.end(); 

logger.error("{} inject an error (client-id={}, " 

+ "artificialdelay={})", 

myid, mybid, clientid, artificialdelay); 

} els { 

context.response() 

.putheader("content-type", 

"application/json") 

.end(payload.encode()); 

logger.info("{} offer {} (client-id={}, " + 

"artificialdelay={})", 

myid, mybid, clientid, artificialdelay); 

} 

}); 

}); 

note that to simul failures, we built in a 5 percent chanc of failur (in which case, the ser- 

vice issu an http 500 response) and the inal http respons be delay by use a random 

timer between 0 and 1,000 milliseconds. 

finally, the http server be start a usual: 

vertx.createhttpserver() 

.requesthandler(router::accept) 

.listen(portnumber, ar -> { 

if (ar.succeeded()) { 

logger.info("bid servic listen on http " + 

"port {}", portnumber); 

verticlestartfuture.complete(); 

} els { 

logger.error("bid servic fail to start", 

ar.cause()); 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

53 

//reactiv program / 

verticlestartfuture.fail(ar.cause()); 

} 

}); 

edg service: select the best ofer. thi servic be implement use the rxjava api pro- 

vide by vert.x. here be the preambl and the start method of the verticl class: 

public class bestofferserviceverticl extend abstractverticl { 

privat static final jsonarray default_target = new jsonarray() 

.add(new jsonobject() 

.put("host", "localhost") 

.put("port", 3000) 

.put("path", "/offer")) 

.add(new jsonobject() 

.put("host", "localhost") 

.put("port", 3001) 

.put("path", "/offer")) 

.add(new jsonobject() 

.put("host", "localhost") 

.put("port", 3002) 

.put("path", "/offer")); 

privat final logger logger = loggerfactori 

.getlogger(bestofferserviceverticle.class); 

privat list<jsonobject> targets; 

privat webclient webclient; 

@overrid 

public void start(future<void> startfuture) throw except { 

webclient = webclient.create(vertx); 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

54 

//reactiv program / 

target = config().getjsonarray("targets", 

default_targets) 

.stream() 

.map(jsonobject.class::cast) 

.collect(collectors.tolist()); 

vertx.createhttpserver() 

.requesthandler(this::findbestoffer) 

.rxlisten(8080) 

.subscribe((server, error) -> { 

if (error != null) { 

logger.error("could not start the best offer " + 

"service", error); 

startfuture.fail(error); 

} els { 

logger.info("th best offer servic be run " + 

"on port 8080"); 

startfuture.complete(); 

} 

}); 

} 

there be sever interest point in thi code: 

■■ To access the rxjava api ofer by vert.x, we import and extend the 

io.vertx.reactivex.core.abstractverticl class. 

■■ It be possibl to specifi the target services, with the default be on the local host and 

port 3000, 3001, and 3002. such conigur can be pass a a json array contain json 

object with host, port, and path keys. 

■■ variant of the vert.x api that return rxjava object be preix with “rx”: here rxlisten 

return a single<httpserver>. the server be not actual start until we subscribe. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

55 

//reactiv program / 

We can now focu on the implement of the findbestoff method. It irst issu http 

request to each service, obtain a list of single<jsonobject> responses, and then it reduc 

them to the single, best respons and eventu end the http response: 

privat final atomiclong requestid = new atomiclong(); 

privat static final jsonobject empty_respons = new jsonobject() 

.put("empty", true) 

.put("bid", integer.max_value); 

privat void findbestoffer(httpserverrequest request) { 

string requestid = string.valueof(requestids.getandincrement()); 

list<single<jsonobject>> respons = targets.stream() 

.map(t -> webclient 

.get(t.getinteger("port"), 

t.getstring("host"), 

t.getstring("path")) 

.putheader("client-request-id", 

string.valueof(requestid)) 

.as(bodycodec.jsonobject()) 

.rxsend() 

.retry(1) 

.timeout(500, timeunit.milliseconds, 

rxhelper.scheduler(vertx)) 

.map(httpresponse::body) 

.map(bodi -> { 

logger.info("#{} receiv offer {}", requestid, 

body.encodeprettily()); 

return body; 

}) 

.onerrorreturnitem(empty_response)) 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

56 

//reactiv program / 

.collect(collectors.tolist()); 

single.merge(responses) 

.reduce((acc, next) -> { 

if (next.containskey("bid") && ishigher(acc, next)) { 

return next; 

} 

return acc; 

}) 

.flatmapsingle(best -> { 

if (!best.containskey("empty")) { 

return single.just(best); 

} els { 

return single.error(new exception("no offer " + 

"could be found for requestid=" + requestid)); 

} 

}) 

.subscribe(best -> { 

logger.info("#{} best offer: {}", requestid, 

best.encodeprettily()); 

request.response() 

.putheader("content-type", 

"application/json") 

.end(best.encode()); 

}, error -> { 

logger.error("#{} end in error", requestid, error); 

request.response() 

.setstatuscode(502) 

.end(); 

}); 

} 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

57 

//reactiv program / 

It be interest to note the follow for each http request: 

■■ the respons be convert to a jsonobject use the as() method. 

■■ A retri be attempt if the servic issu an error. 
■■ the process time out after 500 millisecond befor return an empti response, which be 

how we avoid wait for all respons and error to arrive. 

note that all rxjava oper that expect a schedul can use rxhelper::schedul to ensur 

that all event remain process on vert.x event loops. 

the whole process be just a matter of compos function idiom such a map, flatmap, 

and reduc and handl error with a default value. If no servic can deliv a bid within 500 

milliseconds, no ofer be be made, result in an http 502 error. otherwise, the best ofer 

be select among the respons received. 

deploy verticl and interact with the services. the main verticl code be a follows: 

public class mainverticl extend abstractverticl { 

@overrid 

public void start() { 

vertx.deployverticle(new biddingserviceverticle()); 

vertx.deployverticle(new biddingserviceverticle(), 

new deploymentoptions().setconfig( 

new jsonobject().put("port", 3001))); 

vertx.deployverticle(new biddingserviceverticle(), 

new deploymentoptions().setconfig( 

new jsonobject().put("port", 3002))); 

vertx.deployverticle("samples.bestofferserviceverticle", 

new deploymentoptions().setinstances(2)); 

} 

} 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

58 

//reactiv program / 

We deploy the bid servic three time on difer port to simul three services, pass- 

ing the http port those servic should listen on in the json coniguration. We also deploy 

the edg servic verticl with two instanc to process the incom traic on two cpu core 

rather than one. the two instanc will listen on the same http port, but note that there will 

be no conlict becaus vert.x distribut the traic in a round-robin fashion. 

We can now interact with the http services, for instance, by use the httpie command- 

line tool. let’ talk to the servic on port 3000: 

$ http get localhost:3000/off 'client-request-id:1234' --verbos 

get /offer http/1.1 

accept: */* 

accept-encoding: gzip, deflat 

client-request-id: 1234 

connection: keep-al 

host: localhost:3000 

user-agent: httpie/0.9.9 

http/1.1 200 OK 

content-length: 83 

content-type: application/json 

{ 

"bid": 21, 

"clientrequestid": "1234", 

"origin": "fe299565-34be-4a7b-ac09-d88fcc1e42e2" 

} 

the log reveal both artiici delay and errors: 

[info] 16:08:03.443 [vert.x-eventloop-thread-1] error 

samples.biddingserviceverticl - 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

59 

//reactiv program / 

6358300b-3f2d-40be-93db-789f0f1cde17 inject an error ( 

client-id=1234, artificialdelay=n/a) 

[info] 16:11:10.644 [vert.x-eventloop-thread-1] 

info samples.biddingserviceverticl - 

6358300b-3f2d-40be-93db-789f0f1cde17 offer 10 ( 

client-id=1234, artificialdelay=934) 

similarly, you can play with the edg service, observ responses, and check the log to see how 

a respons be be assembled. sometim you will get an error: 

$ http get localhost:8080 'client-request-id:1234' 

http/1.1 502 bad gateway 

content-length: 0 

thi be becaus all respons take longer than 500 millisecond to arriv and some servic 

inject an error: 

[info] 16:12:51.869 [vert.x-eventloop-thread-2] 

info samples.biddingserviceverticl - 

d803c4dd-1e9e-4f76-9029-770366e82615 offer 16 ( 

client-id=0, artificialdelay=656) 

[info] 16:12:51.935 [vert.x-eventloop-thread-1] 

info samples.biddingserviceverticl - 

6358300b-3f2d-40be-93db-789f0f1cde17 offer 17 ( 

client-id=0, artificialdelay=724) 

[info] 16:12:52.006 [vert.x-eventloop-thread-3] 

info samples.biddingserviceverticl - 

966e8334-4543-463e-8348-c6ead441c7da offer 14 ( 

client-id=0, artificialdelay=792) 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

60 

//reactiv program / 

sometim you will observ that onli one or two respons have be take into account. 

the key point in thi sampl be that the combin of vert.x and rxjava ofer a declara- 

tive and function model for describ how to perform and process a lexibl number of net- 

work request while remain pure driven by asynchron events. 

conclus 

In thi article, you have see how eclips vert.x combin reactiv program and the asyn- 

chronou execut model to build reactiv systems. reactiv program let you compos 

asynchron and event-driven applic by manipul and combin data streams. 

modern reactiv program librari such a rxjava implement reactiv stream to handl 

back-pressure. however, a reactiv approach be not limit to reactiv programming. don’t 

lose sight that you want to build good system that be responsive, robust, and interactive. By 

use the execut model and nonblock i/o capabl promot by vert.x, you be on the 

path to becom truli reactive. 

thi articl just scratch the surface. vert.x give you signiic power and agil to 

creat compelling, scalable, twenty-irst-centuri applic the way you want to. whether 

it’ simpl network utilities, sophist modern web applications, http/rest microservices, 

high-volum event processing, or a full-blown back-end message-bu application, vert.x be a 

great it. </article> 

clement escoier (@clementplop) be a princip softwar engin at red hat, where he be work a a 

vert.x core developer. He have be involv in project and product touch mani domain and technolog 

such a osgi, mobil app development, continu delivery, and devops. escoier be an activ contributor to 

mani open sourc projects, includ apach felix, ipojo, wisdom framework, and eclips vert.x. 

julien pong (@jponge) be an associ professor at insa lyon and a research at the citi-inria laboratory. 

He be a longtim open sourc developer, have creat izpack and the golo program language, and be now 

a member of the eclips vert.x team. pong be current on leav from insa and work a a deleg con- 

sultant to red hat on the vert.x project. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

61 

//reactiv program / 

R eactiv program be an approach to write softwar that embrac asynchron i/o. asynchron i/o be a small idea that portend big chang for software. the idea be simple: 
allevi ineici resourc util by use resourc that would otherwis sit idl a they 

wait for i/o activity. asynchron i/o invert the normal design of i/o processing: client be 

notii of new data instead of ask for it. thi approach free the client to do other thing 

while wait for new notiications. 

there is, of course, alway the risk that too mani notiic will overwhelm a client; so, a 

client must be abl to push back, reject work it can’t handle. thi be a fundament aspect of 

low control in distribut systems. In reactiv programming, the abil of the client to signal 

how much work it can manag be call back-pressure. 

mani projects, such a akka streams, vert.x, and rxjava, support reactiv programming. 

[vert.x and rxjava be examin in detail in the accompani article, “go reactiv with 

eclips vert.x and rxjava,” on page 32. —ed.] the spring team have a project call reactor, 

which provid reactiv capabl for the spring framework. there’ common ground across 

these difer approaches, which have be summar in the reactiv stream initiative—an 

inform standard of sorts. 

the fundament data type 

the reactiv stream initi dein four data types. publish be a produc of valu that 

might eventu arrive. A publish produc valu of type T, a show in list 1. 

reactiv spring 
proceed from fundamentals, use the spring framework to quickli build 

a reactiv application. 

josh long 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://www.reactive-streams.org/ 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

62 

//reactiv program / 

list 1: the reactiv stream publisher<t> 

packag org.reactivestreams; 

public interfac publisher<t> { 

void subscribe(subscriber<? super T> s); 

} 

A subscrib subscrib to a publisher, receiv notiic on ani new valu of type T, a 

show in list 2. 

list 2: the reactiv stream subscrib 

packag org.reactivestreams; 



public interfac subscriber<t> { 

public void onsubscribe(subscript s); 

public void onnext(t t); 

public void onerror(throw t); 

public void oncomplete(); 

} 

when a subscrib subscrib to a publisher, it result in a subscription, a show in list 3. 

list 3: the reactiv stream subscript 

packag org.reactivestreams; 



public interfac subscript { 

public void request(long n); 

public void cancel(); 

} 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

63 

//reactiv program / 

A publish that be also a subscrib be call a processor, which be show in list 4. 

list 4: the reactiv stream processor 

packag org.reactivestreams; 

public interfac processor<t, R> extend subscriber<t>, publisher<r> { 

} 

the speciic be not meant to be a prescript for the implementations; instead, it dein 

type for interoperability. the reactiv stream type eventu found their way into java 9 a 

one-to-on semant equival interfac in the java.util.concurrent.flow class. 

reactor 

the reactiv stream type be not enough; you’ll need higher-ord implement to sup- 

port oper such a ilter and transformation. pivotal’ reactor project be a good choic 

here; it build on top of the reactiv stream speciication. It provid two special of 

publisher<t>. the irst, flux, be a publish that produc zero or more values. it’ unbounded. 

the second, mono<t>, be a publish that produc one or zero values. they’r both publish and 

you can treat them that way, but they go much further than the reactiv stream speciication. 

they both provid way to process a stream of values. reactor type compos nicely: the output 

of one thing can be the input to another. 

reactiv spring 

As use a project reactor is, it’ onli a foundation. applic need to talk to data sources. 

they need to produc and consum http, server-s event (sse), or websocket endpoints. 

they support authent and authorization. spring framework 5.0 provid these things. It 

be releas in septemb 2017 and build on reactor and the reactiv stream speciication. It 

includ a new reactiv runtim and compon model call spring webflux. spring webflux 

do not depend on or requir the servlet api to work. It ship with adapt that allow it to 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

64 

//reactiv program / 

work on top of a servlet engine, if need be, but that be not required. It also provid a netty- 

base web server. spring framework 5, which work with a baselin of java 8 and java EE 7, be 

the foundat for chang in much of the spring ecosystem. let’ look at an example. 

exampl applic 

let’ build a simpl spring boot 2.0 applic that repres a servic to manag books. you 

could call the project librari or someth like that. Go to the spring initializr. make sure that 

some version of spring boot 2.0 (or later) be select in the version drop-down menu. you’r 

write a servic to manag access to book in the library, so give thi project the artifact ID 

library-service. select the element you’ll need: reactiv web, actuator, reactiv mongodb, 

reactiv security, and lombok. 

I often use the kotlin language, even if most of the project I be build be in java. I keep 

java artifact colloc in a kotlin project. click gener and it’ll download an archive. unzip 

it and open it in your favorit ide that support java 8 (or later), kotlin (optionally), and maven. 

while you could have chosen gradl in the spring initializr, I chose maven for the purpos 

of thi article. the stock standard spring boot applic have an entri class that look like 

list 5. 

list 5: the empti husk of a new spring boot project 

packag com.example.libraryservice; 

import org.springframework.boot.springapplication; 

import org.springframework.boot.autoconfigure.springbootapplication; 

@springbootappl public class libraryserviceappl { 

public static void main(string[] args) { 

system.setproperty("spring.profiles.active", 

"security,authorization,frpjava"); 

springapplication.run(libraryserviceapplication.class, args); 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
http://start.spring.io/ 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

65 

//reactiv program / 

} 

} 

data access with reactiv spring data modul 

the most recent releas of spring data debut support for reactiv data access when that be sup- 

port in the underli datastor (such a mongodb, cassandra, redis, and couchbase). the 

releas also introduc new reactiv repositori and templat implementations. becaus you 

have the reactiv mongodb driver and spring data modul on the classpath, let’ use them to 

manag some data. creat a new entiti call book, a show in list 6. 

list 6: A mongodb @document entity, book 

packag com.example.libraryservice; 

import lombok.allargsconstructor; 

import lombok.data; 

import lombok.noargsconstructor; 

import org.springframework.data.annotation.id; 

import org.springframework.data.mongodb.core.mapping.document; 

@document 

@data 

@allargsconstructor 

@noargsconstructor 

public class book { 

@id 

privat string id; 

privat string title; 

privat string author; 

} 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

66 

//reactiv program / 

next, creat a spring data repositori to support the data manag lifecycl of the entity. 

thi should look veri familiar to anyon who have ever use spring data, except that the reposi- 

tori support reactiv interactions: method return publish types, and input can be give a 

publish instances. see list 7. 

list 7: A reactiv spring data mongodb repositori 

packag com.example.libraryservice; 

import org.springframework.data.mongodb.repository.reactivemongorepository; 

import reactor.core.publisher.flux; 

public interfac bookrepositori extend reactivemongorepositori { 

flux findbyauthor(str author); 

} 

instal some sampl data 

with that, you now have enough to instal some sampl data (just for your demo). spring 

boot invok the #run(applicationarguments) method when the applic have started, 

pass wrapper for the argument (string [] args) into the application. let’ creat an 

applicationrunn that delet all the data in the data source, then emit a few book titles, then 

map them to book entities, and then persist those books. finally, it queri all the record in 

the data sourc and then print out everything. list 8 show all this. 

list 8: An applicationrunn to write data 

packag com.example.libraryservice; 

import lombok.extern.slf4j.slf4j; 

import org.springframework.boot.applicationarguments; 

import org.springframework.boot.applicationrunner; 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

67 

//reactiv program / 

import org.springframework.stereotype.component; 

import reactor.core.publisher.flux; 

@slf4j 

@compon 

class samplebookiniti implement applicationrunn { 

privat final bookrepositori bookrepository; 

samplebookinitializer(bookrepositori bookrepository) { 

this.bookrepositori = bookrepository; 

} 

@overrid 

public void run(applicationargu args) throw except { 

this.bookrepositori 

.deleteall() 

.thenmany( 

flux.just( 

"cloud nativ java|jlong", 

"spring secur 3.1|rwinch", 

"spring in action|cwalls")) 

.map(t -> t.split("\\|")) 

.map(tupl -> new book(null, tuple[0], tuple[1])) 

.flatmap(this.bookrepository::save) 

.thenmany(this.bookrepository.findall()) 

.subscribe(book -> log.info(book.tostring())); 

} 

} 

the exampl look at the titl of variou book and one of the (possibl numerous) books’ 

authors, and then it write them to the database. first the string be split by the | delimiter. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

68 

//reactiv program / 

then the titl and book author be use to creat a book. then the record be save to the data 

source, mongodb. the result of the save oper be a mono<book>. someth need to sub- 

scribe to each of those result publisher<t> instances, so I use the flatmap operator. then, I 

turn my focu to the result of ind all record and then to log them for inspection. 

thi code dein a pipeline; each oper dein a stage in a pipeline. the pipelin be not 

eager; that is, it won’t be execut until it be activated. you activ the pipelin by subscrib 

to it (the last step in the code in list 8). publish dein onli one type of subscription, but 

reactor provid hook to process each emit value, a well a ani except thrown, among 

other things. 

were you to put a breakpoint in ani of the lambda in list 8 and then inspect 

thread.currentthread().getname(), you’d see that the thread on which process be run- 

ning be difer than the main thread (which be name main). reactor defer to a schedul 

implement for it processing. you can specifi the default global schedul you’d like to 

use by call schedulers.setfactory(factory). you can specifi on which thread a particu- 

lar publish should run when it subscrib by specifi mono::subscribeon(scheduler) or 

flux::subscribeon(scheduler). 

conclus 

you have now use spring boot and spring initializr to quickli creat and run a reactiv data 

applic that hew close to the requir of reactiv development. In the second (and 

inal) part of thi article, i’ll use spring framework 5.0 to stand up a rest api and to implement 

secur access to thi data. meanwhile, if you want to look at the complet application, the sourc 

code be all online. </article> 

josh long (@starbuxman) be a java champion and a spring develop advoc at pivotal. He be the author of 

sever book on spring programming, and he speak frequent at develop conferences. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
https://github.com/joshlong/reactive-spring-articl 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

69 

//beyond crud / 

most of today’ enterpris applic be base on a crud data model that be simpl and straightforward to implement. event sourcing, event-driven architectures, and command 
queri respons segreg (cqrs) ofer anoth way to model applic that enabl 

interest solut and use cases, especi with the rise demand of scalability. befor 

get into cqrs, i’ll quickli describ some of the limit of the crud model. 

shortcom of crud-bas applic 

A crud-bas applic alway contain the current state of the system. the domain entiti 

be store in the databas or in an in-memori represent with their properti a they be 

at ani give moment. that aspect come in handi when user read the current state, but it fall 

short in other aspects. 

for example, a model that be sole crud-bas have no inform about the histori or 

the context—whi the system, includ all domain objects, be in it current state and how it get 

there. onc an updat be performed, the object be then in a new state and their old state be 

forgotten. thi can make it tricki to reproduc and debug situat in production. it’ harder to 

comprehend the current state and ind potenti bug if the whole histori be not available. 

anoth challeng of crud-bas model be that due to store onli the current state, all 

transact and interact need to modifi the system in a consist way. thi sound nor- 

mal to enterpris develop but can becom quit complex when you be deal with compet- 

ing transactions—for example, when user want to updat their contact inform and at the 

command queri respons 
segreg with java 
combin event sourc and event-driven architectur to build scalable, 

eventu consist system 

sebastian daschner 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

70 

//beyond crud / 

same time some other use case updat their 

account balance. If thi inform afect the 

same databas entries, the two activ lead 

to a lock situation. usually, thi optimis- 

tic lock result in one transact win 

over the other. however, strictli speaking, 

there should be no need to mutual exclud 

either transaction. 

A similar problem occur when a use case updat busi object whose new state 

requir veriic to keep the system in a consist state. verifi and maintain these 

consist state can becom both redund and complex. 

becaus crud-bas applic need to store the statu quo and keep a consist state 

within their data model, they cannot scale horizontally. To maintain consistency, such applica- 

tion need to lock the data (a in good old atomicity, consistency, isolation, and durabl [acid] 

transactions) until the updat have take place. If sever distribut system be involved, the 

synchron will becom a bottleneck. 

event sourc 

In contrast to a crud data model, event-sourc system store all modiic that happen to 

a system a atom entities. the applic do not necessarili contain the current state, but 

it can be calcul by appli all event that have happen in the past. these event be the 

singl sourc of truth in the system. 

the most promin exampl for thi model be bank accounts. you can calcul your cur- 

rent balanc by start at zero and add or subtract the amount of all transact 

accordingly. the exampl in figur 1 show a simpl set of customer-rel event that can be 

use to arriv at a custom representation. 

the event be atom and immutable, becaus they happen in the past and cannot be 

undone. thi impli that, for example, a delet action also chang the current state by just 

add a customerdelet event to the log—no entri be actual deleted. 

becaus the real world be all about 
distribut collaboration—often in an 
asynchron way—it make sens to model 
applic in an event-driven way. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

71 

//beyond crud / 

while the current state could be calcul on demand use all event that have happen 

in the past, enterpris system use so-cal snapshot that repres the state a of a certain 

moment in time. event that aros after that moment be then appli to the snapshot in order 

to form a new state, which again can be persisted. thi is, however, an optim techniqu 

to deal with a grow number of events—th atom event remain the golden sourc of truth. 

one of the beneit of thi architectur be that the full histori of what have happen 

enabl develop to reproduc complex use-cas scenario and debug the system with ease. 

anoth advantag of event-sourc system be the possibl of calcul statist and 

implement futur use case later. becaus all atom inform that ever be appli to 

the system be available, you can use thi inform and simpli redeploy the applic with 

updat behavior and recalcul the statu from the events. that make it possibl to imple- 

ment futur use case on event that happen in the past—a if that new function be 

alway there. for example, answer the question, “how mani user sign up on a tuesday?” 

be possibl use the inform contain in the event even if thi function wasn’t 

consid previously. 

figur 1. event that determin the current state of a custom entri 

john_doe_123 : custom 

customercr 

customeraddresschang 

customeraccountverifi 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

72 

//beyond crud / 

event sourc alon doesn’t impli that the applic have to be implement use an 

event-driven or cqr approach. however, in order to appli cqrs, you need to model applica- 

tion with event sourcing. 

event-driven applic 

In contrast to the beneit of an event-sourc system, the motiv behind event-driven 

applic difer. If you want to model distribut systems—such a microservices—that aim 

to maintain a consist state throughout sever systems, you need to take transact into 

account. becaus distribut transact don’t scale well, you split up a transact into sever 

transact that still maintain consistency—at least in an eventu consist way. 

An event-driven architectur (see figur 2) realiz use case that involv multipl system 

by collabor via command and events. for order a cup of cofe at a café, for example, 

you would irst attempt to place an order, which result in an orderplac event—or an error. 

figur 2. exampl event-driven architectur 

order_123 : order 

co�e order system bean storag system 

validateorder() 

orderaccept 

placeorder() 

orderplac 

completeorder() 

ordercomplet 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

73 

//beyond crud / 

thi orderplac event then caus the cofe bean storag to check whether there be bean 

avail and to publish either an orderaccept event or an orderfailedinsufficientbean 

event. the current state of the order be calcul by appli all event relat to that order a 

in an event-sourc system. 

thi way of model caus the process to be eventu consistent, and becaus the appli- 

cation ensur that all event be publish in a reliabl way, the inal outcom of the use case 

will be consistent. 

If you compar thi way of model to the real world, you can see that these method of 

collabor be common. when you order a cup of cofee, the waiter accept your order—even 

though it’ possibl that for some reason the 

cofe will never make it to you. In that case, 

the waiter will come back late and apolog 

for not be abl to deliv the cofe and 

will ofer a compens transaction—even 

though the order be accept in the irst 

place. eventually, you will end up with your 

cofee, anoth drink, or your money back. 

becaus the real world be all about distribut collaboration—often in an asynchron 

way—it make sens to model applic in an event-driven way. 

enter cqr 

now that i’v summar implement event-driven and event-sourc applications, I will 

introduc the cqr principle, which prescrib separ the respons of read and 

writes. cqr caus method to either modifi the state of the system without return ani 

valu or to return valu without ani side efect. the command (that is, the writes) be not 

suppos to return values; they either return success or throw an error. the queri (that is, 

the reads) onli return data (see figur 3). 

thi principl be simpl in theori but have import implications. onc you split up a sys- 

tem follow thi approach, the applic collabor onli by event that be publish to 

one of the benefit of separ the 
respons of read and write in 
the cqr model be the fact that the queri and 
command side can scale independently. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

74 

//beyond crud / 

an event store. the command and queri compon maintain their own domain object rep- 

resent by consum the event from the hub and updat the state of their intern 

model. the storag represent of each side can difer and be optim accord to their 

best it. 

when an updat command, placeorder(order), reach the command side, the servic per- 

form the action use the domain object represent in it intern storag and publish 

event (orderplaced). when the client read at the queri side, thi servic return the current 

state from it intern storage. the servic be coupl onli by the event store and can oper 

and be deploy independ from each other. 

the event that be publish from the event store be consum by all subscrib consum- 

figur 3. exampl of a cqr implement 

eventstor 

orderplac 

commandservic 

void placeorder() Co 
eeorder getorder() 

queryservic dbdb 

orderplac 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

75 

//beyond crud / 

er to updat their intern model—but onli one subscriber, eventhandler, be suppos to trigger 

further command from these events. publish the event have to happen in a reliabl way to 

keep the system in a consist state in the long run. 

benefit of cqr 

one of the beneit of separ the respons of read and write in the cqr model be 

the fact that the queri and command side can scale independently. In typic enterpris appli- 

cations, the read oper outnumb the write operations. becaus be eventu consis- 

tent on the read side is, in most cases, not a big problem, return replic data have a posit 

impact on the overal performance. use cqr enabl you to deploy, for example, a great 

number of queri servic instanc to scale out just the read side. 

the domain model represent of each of the servic solv the problem of the rise 

number of event in an event-sourc system. becaus more and more event be store in the 

system over time, the overal perform of oper would decreas if the applic state 

be sole calcul on demand by appli all event each time. updat the represent 

continu and use these model in the command and queri maintain a constant level 

of performance. thi correspond to the concept of snapshots. 

anoth beneit of thi separ be the give failov capacity—at least for the read side. 

becaus all instanc maintain an eventu consist represent of the system’ state, 

thi cach state be still avail if the event store go down. even though no new event can 

be written, the client can still access the last state. 

applic that implement cqr also have the capabl to implement further use case 

that oper on event from the past, becaus they implement event sourc a well. 

now, I will show an actual cqr implement in a java EE application. 

exampl cqr applic 

As an example, i’m use a scalabl cofe shop that consist of three services, respons for 

order manag (orders), bean storag (beans), and cofe brew (barista). each servic be 

free to choos it intern domain object representation, and the collabor be do use 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

76 

//beyond crud / 

apach kafka a the event hub. onc event be publish to kafka, the servic handl the 

event accordingli and updat their representation. 

the busi use case for order a cup of cofe be show in figur 4. 

when a client creat an order, the command servic publish an event (orderplaced) and 

return the request successfully—even though the system can’t tell yet whether the order will 

be inish successfully. the client can request the statu of the order from the queri servic 

figur 4. use case for order a cup of cofe 

orderdeliv 

deliverorder() 

finishorder() 

orderfinish 

orderstart 

startorder() 

orderaccept 

acceptorder() 

orderplac 

orderco�ee() 

co�e order system bean storag system barista system 

validatebeans() 

orderbeansvalid 

fetchbeans() 

makeco�ee() 

co�eebrewstarted() 

co�eebrewfinish 

co�eedeliv 

beansfetch 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

77 

//beyond crud / 

anytime, with the state be updat on incom events. 

applic architectur 

the java EE applic be organ with the entiti control boundari (ecb) pattern. the appli- 

cation boundari contain the extern rest interface, a *commandservic and *queryservice, and 

the event handl function that will call subsequ commands. the control packag 

contain the storag represent that contain the current domain object representations, 

a well a function to access kafka. the entiti packag consist of the event and domain 

object deinitions. 

the command servic contain the busi method and publish event at the event 

hub. the queri servic access the storag onli to return data. 

the follow code show exampl for the order command service, which process the 

command by publish the event to the event hub. thi servic be the use-cas entri point 

from both the applic boundari and the event handler. 

public class ordercommandservic { 

@inject 

eventproduc eventproducer; 

@inject 

coffeeord coffeeorders; 

public void placeorder(orderinfo orderinfo) { 

eventproducer.publish(new orderplaced(orderinfo)); 

} 

void acceptorder(uuid orderid) { 

orderinfo orderinfo = coffeeorders.get(orderid) 

.getorderinfo(); 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

78 

//beyond crud / 

eventproducer.publish(new orderaccepted(orderinfo)); 

} 

void cancelorder(uuid orderid, string reason) { 

eventproducer.publish( 

new ordercancelled(orderid, reason)); 

} 

void startorder(uuid orderid) { 

eventproducer.publish(new orderstarted(orderid)); 

} 

void finishorder(uuid orderid) { 

eventproducer.publish(new orderfinished(orderid)); 

} 

void deliverorder(uuid orderid) { 

eventproducer.publish(new orderdelivered(orderid)); 

} 

} 

the order queri service, show in the follow code, be use to retriev the cofe order repre- 

sentations. It us the cofe order store, which keep track of the orders. 

public class orderqueryservic { 

@inject 

coffeeord coffeeorders; 

public coffeeord getorder(uuid orderid) { 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

79 

//beyond crud / 

return coffeeorders.get(orderid); 

} 

} 

incom event be deliv a context and depend inject (cdi) event within the 

application. the store itself observ these cdi event and updat and store the domain object 

representations. for simplicity, in the follow code, i’m use sole in-memori storag with 

the kafka event be redeliv and reappli at applic startup. In a product envi- 

ronment, thi function would like be integr with a persist databas that store the 

last calcul state. 

@singleton 

@startup 

@concurrencymanagement(concurrencymanagementtype.bean) 

public class coffeeord { 

privat final map<uuid, coffeeorder> coffeeord = 

new concurrenthashmap<>(); 

public coffeeord get(uuid orderid) { 

return coffeeorders.get(orderid); 

} 

public void apply(@observ orderplac event) { 

coffeeorders.putifabsent(event.getorderinfo() 

.getorderid(), new coffeeorder()); 

applyfor(event.getorderinfo().getorderid(), 

o -> o.place(event.getorderinfo())); 

} 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

80 

//beyond crud / 

public void apply(@observ ordercancel event) { 

applyfor(event.getorderid(), coffeeorder::cancel); 

} 

public void apply(@observ orderaccept event) { 

applyfor(event.getorderinfo().getorderid(), 

coffeeorder::accept); 

} 

public void apply(@observ orderstart event) { 

applyfor(event.getorderid(), coffeeorder::start); 

} 

public void apply(@observ orderfinish event) { 

applyfor(event.getorderid(), coffeeorder::finish); 

} 

public void apply(@observ orderdeliv event) { 

applyfor(event.getorderid(), coffeeorder::deliver); 

} 

privat void applyfor(uuid orderid, 

consumer<coffeeorder> consumer) { 

coffeeord coffeeord = coffeeorders.get(orderid); 

if (coffeeord != null) 

consumer.accept(coffeeorder); 

} 

} 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

81 

//beyond crud / 

for simplicity, both the queri and command servic be use the same coffeeord instance. 

however, thi could be split into sever compon or system and further optim for 

each side accordingly. for my purpose—to show an exampl implementation—thi model 

be suicient. 

the connect for incom event that trigger subsequ command be do in the event 

handler. thi handler call the command servic for further process of orders. It both con- 

sume kafka messag and ire the correspond cdi events. 

@singleton 

@startup 

public class ordereventhandl { 

privat eventconsum eventconsumer; 

@resourc 

managedexecutorservic mes; 

@inject 

properti kafkaproperties; 

@inject 

event<coffeeevent> events; 

@inject 

ordercommandservic orderservice; 

@inject 

logger logger; 

public void handle(@observ orderbeansvalid event) { 

orderservice.acceptorder(event.getorderid()); 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

82 

//beyond crud / 

} 

public void handle(@observ 

orderfailedbeansnotavail event) { 

orderservice.cancelorder(event.getorderid(), 

"no bean of the origin be available"); 

} 

public void handle(@observ coffeebrewstart event) { 

orderservice.startorder(event.getorderinfo().getorderid()); 

} 

public void handle(@observ coffeebrewfinish event) { 

orderservice.finishorder(event.getorderid()); 

} 

public void handle(@observ coffeedeliv event) { 

orderservice.deliverorder(event.getorderid()); 

} 

@postconstruct 

privat void initconsumer() { 

kafkaproperties.put("group.id", "order-handler"); 

eventconsum = new eventconsumer(kafkaproperties, ev -> { 

logger.info("fir = " + ev); 

events.fire(ev); 

}, "barista", "beans"); 

mes.execute(eventconsumer); 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

83 

//beyond crud / 

} 

@predestroy 

public void closeconsumer() { 

eventconsumer.stop(); 

} 

} 

integr apach kafka 

apach kafka serf a a reliable, persistent, and scalabl event hub that deliv event to the 

servic involved. I make use of event topic that be consum in so-cal consum groups. 

In thi case, I conigur kafka to deliv the event reliabl onc in everi consum group. By 

conigur the same group for all event handlers, I ensur that onli one instanc process 

an event. 

the event producer, show in the follow code, publish the event to kafka: 

@applicationscop 

public class eventproduc { 

privat producer<string, coffeeevent> producer; 

@inject 

properti kafkaproperties; 

@inject 

logger logger; 

@postconstruct 

privat void init() { 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

84 

//beyond crud / 

kafkaproperties.put("transactional.id", 

uuid.randomuuid().tostring()); 

produc = new kafkaproducer<>(kafkaproperties); 

producer.inittransactions(); 

} 

public void publish(coffeeev event) { 

producerrecord<string, coffeeevent> record = 

new producerrecord<>("order", event); 

tri { 

producer.begintransaction(); 

logger.info("publish = " + record); 

producer.send(record); 

producer.committransaction(); 

} catch (producerfencedexcept e) { 

producer.close(); 

} catch (kafkaexcept e) { 

producer.aborttransaction(); 

} 

} 

@predestroy 

public void close() { 

producer.close(); 

} 

} 

the follow code us transact produc that be introduc in kafka version 0.11. 

they ensur that an event have be sent reliabl befor the client call returns. the event con- 

sumer ininit consum new kafka event and pass them to a function consumer. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

85 

//beyond crud / 

public class eventconsum implement runnabl { 

privat kafkaconsumer<string, coffeeevent> consumer; 

privat final consumer<coffeeevent> eventconsumer; 

privat final atomicboolean close = new atomicboolean(); 

public eventconsumer(properti kafkaproperties, 

consumer<coffeeevent> eventconsumer, 

string... topics) { 

this.eventconsum = eventconsumer; 

consum = new kafkaconsumer<>(kafkaproperties); 

consumer.subscribe(aslist(topics)); 

} 

@overrid 

public void run() { 

tri { 

while (!closed.get()) { 

consume(); 

} 

} catch (wakeupexcept e) { 

// will wake up for close 

} final { 

consumer.close(); 

} 

} 

privat void consume() { 

consumerrecords<string, coffeeevent> record = 

consumer.poll(long.max_value); 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

86 

//beyond crud / 

for (consumerrecord<string, coffeeevent> record : records) { 

eventconsumer.accept(record.value()); 

} 

consumer.commitsync(); 

} 

public void stop() { 

closed.set(true); 

consumer.wakeup(); 

} 

} 

after an event have be processed, I commit to the consumpt by call commitsync. thi 

event consum be start from both the event handler and the updat consumer. both be 

then respons for ire the cdi events. see the ordereventhandl deinit show earli 

and the follow orderupdateconsumer: 

@startup 

@singleton 

public class orderupdateconsum { 

privat eventconsum eventconsumer; 

@resourc 

managedexecutorservic mes; 

@inject 

properti kafkaproperties; 

@inject 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

87 

//beyond crud / 

event<coffeeevent> events; 

@inject 

logger logger; 

@postconstruct 

privat void init() { 

kafkaproperties.put("group.id", "order-consumer-" + 

uuid.randomuuid()); 

eventconsum = new eventconsumer(kafkaproperties, ev -> { 

logger.info("fir = " + ev); 

events.fire(ev); 

}, "order"); 

mes.execute(eventconsumer); 

} 

@predestroy 

public void close() { 

eventconsumer.stop(); 

} 

} 

To ensur that the consum be manag correctly, I use java ee’ manag executor servic 

to run the consum in thread manag by the applic server. for the updat consum- 

ers, uniqu group id be gener to ensur that everi servic get all events. 

when these servic start, they connect to their correspond kafka topic and ask for all 

the undeliv event in their consum group. To updat the domain object represent to 

the late state, the updat consum group that have the match ID appli the events—for 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

88 

//beyond crud / 

example, in the coffeeorders—that occur sinc the veri beginning. As I mention before, 

i’m use onli in-memori storag without persist snapshots. for the full exampl applica- 

tion, see the scalable-cofee-shop project on github. 

conclus 

cqr provid a use altern to the tradit crud-bas way of build enterpris 

applic by combin the beneit of event sourc and event-driven architectur to 

build scalable, eventu consist systems. 

Of course, thi approach be no silver bullet. If the situat do not requir the scalabil- 

iti of event-driven architectures, it’ advis to go with monolithic, consist applic 

instead. cqr introduc some overhead, which certainli be avoid in most enterpris appli- 

cations. An applic that sole requir the beneit of event sourc can be base on thi 

approach while still use a relat databas and consist use cases. </article> 

sebastian daschner (@daschners) be a java champion who work a a consult and trainer. He particip 

in the java commun process (jcp), serv in the jsr 370 and jsr 374 expert groups. daschner be also a 

heavi user of linux and contain technolog such a docker. when not work with java, he love to travel. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
https://github.com/sdaschner/scalable-coffee-shop 


push a button 
move your java app 
to the oracl cloud 

…or back to your data center 

same java runtim 

same dev tool 

same standard 

same architectur 

http://cloud.oracle.com/java 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

90 

//new to java / 

In the occasion “new to java” series, I tri to pick topic that invit a deeper understand of the conceptu background of a languag construct. often, novic programm have a work- 
ing knowledg of a concept—that is, they can use it in mani situations, but they lack a deeper 

understand of the underli principl that would lead to write good code, creat bet- 

ter structures, and make good decis about when to use a give construct. java interfac 

be often just such a topic. 

In thi article, I assum that you have a basic understand of inheritance. java interfac 

be close relat to inheritance, a be the extend and implement keywords. so, I will discu 

whi java have two difer inherit mechan (indic by these keywords), how abstract 

class it in, and what variou task interfac can be use for. 

As be so often the case, the stori of these featur start with some quit simpl and eleg 

idea that lead to the deinit of concept in earli java versions, and the stori get more com- 

plicat a java advanc to tackl more-intricate, real-world problems. thi challeng lead to 

the introduct of default method in java 8, which muddi the water a bit. 

A littl background on inherit 

inherit be straightforward to understand in principle: a class can be specii a an exten- 

sion of anoth class. In such a case, the present class be call a subclass, and the class it’ 

extend be call the superclass. object of the subclass have all the properti of both the 

superclass and the subclass. they have all ield dein in either subclass or superclass and 

also all method from both. So far, so good.photograph BY john blyth 

the evolv natur 
of java interfac 
understand multipl inherit in java 

michael kölling 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

91 

//new to java / 

inherit is, however, the equival of the swiss armi knife in programming: it can be 

use to achiev some veri divers goals. I can use inherit to reus some code I have writ- 

ten before, I can use it for subtyp and dynam dispatch, I can use it to separ speciic 

from implementation, I can use it to specifi a contract between difer part of a system, and 

I can use it for a varieti of other tasks. these be all important, but veri diferent, ideas. It be 

necessari to understand these difer to get a good feel for inherit and interfaces. 

type inherit versu code inherit 

two main capabl that inherit provid be the abil to inherit code and the abil to 

inherit a type. It be use to separ these two idea conceptually, especi becaus standard 

java inherit mix them together. In java, everi class I dein also dein a type: a soon a 

I have a class, I can creat variabl of that type, for example. 

when I creat a subclass (use the extend keyword), the subclass inherit both the code 

and the type of the superclass. inherit method be avail to be call (i’ll refer to thi a 

“the code”), and object of the subclass can be use in place where object of the superclass be 

expect (thus, the subclass creat a subtype). 

let’ look at an example. If student be a subclass of person, then object of class student have 

the type student, but they also have the type person. A student be a person. both the code and 

the type be inherited. 

the decis to link type inherit and code inherit in java be a languag design 

choice: it be do becaus it be often useful, but it be not the onli way a languag can be 

designed. other program languag allow inherit the code without inherit the type 

(such a c++ privat inheritance) or inherit the type without inherit the code (which java 

also supports, a I explain shortly). 

multipl inherit 

the next idea enter the mix be multipl inheritance: a class may have more than one super- 

class. let me give you an example: phd student at my univers also work a instructors. In 

that sense, they be like faculti (they be instructor for a class, have a room number, a payrol 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

92 

//new to java / 

number, and so on). but they be also students: they be enrol in a course, have a student ID 

number, and so on. I can model thi a multipl inherit (see figur 1). 

phdstudent be a subclass of both faculti and student. thi way, a phd student will have the 

attribut of both student and faculty. conceptu thi be straightforward. In practice, how- 

ever, the languag becom more complic if it allow multipl inheritance, becaus that 

introduc new problems: what if both superclass have ield with the same name? what if 

they have method with the same signatur but difer implementations? for these cases, 

I need languag construct that specifi some solut to the problem of ambigu and name 

overloading. however, it get worse. 

diamond inherit 

A more complic scenario be know a diamond inherit (see figur 2). thi be where a class 

(phdstudent) have two superclass (faculti and student), which in turn have a common super- 

class (person). the inherit graph form a diamond shape. 

now, consid thi question: If there be a ield in the top-level superclass (person, in thi 

case), should the class at the bottom (phdstudent) have one copi of thi ield or two? It inherit 

faculti student 

phdstudent 

person 

figur 2. An exampl of diamond inherit 

faculti student 

phdstudent 

figur 1. An exampl of multipl inherit 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

93 

//new to java / 

thi ield twice, after all, onc via each of it inheri- 

tanc branches. 

the answer is: it depends. If the ield in question 

is, say, an ID number, mayb a phd student should 

have two: a student ID and a faculty/payrol ID that 

might be a difer number. If the ield is, however, 

the person’ famili name, then you want onli one 

(the phd student have onli one famili name, even though it be inherit from both superclasses). 

In short, thing can becom veri messy. languag that allow full multipl inherit need 

to have rule and construct to deal with all these situations, and these rule be complicated. 

type inherit to the rescu 

when you think about these problem carefully, you realiz that all the problem with multipl 

inherit be relat to inherit code: method implement and ields. multipl code 

inherit be messy, but multipl type inherit caus no problems. thi fact be coupl 

with anoth observation: multipl code inherit be not terribl important, becaus you can 

use deleg (use a refer to anoth object) instead, but multipl subtyp be often veri 

use and not easili replac in an eleg way. 

that be whi the java design arriv at a pragmat solution: allow onli singl inherit 

for code, but allow multipl inherit for types. 

interfac 

To make it possibl to have difer rule for type and code, java need to be abl to specifi 

type without specifi code. that be what a java interfac does. 

interfac specifi a java type (the type name and the signatur of it methods) without 

specifi ani implementation. No ield and no method bodi be speciied. interfac can 

contain constants. you can leav out the modiier (public static final for constant and public 

for methods)—they be implicitli assumed. 

the java design arriv at a 
pragmat solution: allow onli singl 
inherit for code, but allow multipl 
inherit for types. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

94 

//new to java / 

thi arrang provid me with two type of inherit in java: I can inherit a class 

(use extends), in which I inherit both the type and the code, or I can inherit a type onli (use 

implements) by inherit from an interface. and I can now have difer rule concern mul- 

tipl inheritance: java permit multipl inherit for type (interfaces) but onli singl inheri- 

tanc for class (which contain code). 

benefit of multipl inherit for type 

the beneit of allow the inherit of multipl types—essenti of be abl to declar 

that one object can be view a have a difer type at difer times—ar quit easi to 

see. suppos you be write a traic simulation, and in it you have object of class car. apart 

from cars, there be other kind of activ object in your simulation, such a pedestrians, 

trucks, traic lights, and so on. you may then have a central collect in your program—say, a 

list—that hold all the actors: 

privat list<actor> actors; 

actor, in thi case, could be an interfac with an act method: 

public interfac actor 

{ 

void act(); 

} 

your car class can then implement thi interface: 

class car implement actor 

{ 

public void act() 

{ 

... 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

95 

//new to java / 

} 

} 

note that, becaus car inherit onli the type, includ the signatur of the act method, but 

no code, it must itself suppli the code to implement the type (the implement of the act 

method) befor you can creat object from it. 

So far, thi be just singl inherit and could have be achiev by inherit a class. but 

imagin now that there be also a list of all object to be drawn on screen (which be not the same 

a the list of actors, becaus some actor be not drawn, and some drawn object be not actors): 

privat list<drawable> drawables; 

you might also want to save a simul to perman storag at some point, and the object to 

be save might, again, be a difer list. To be saved, they need to be of type serializable: 

privat list<serializable> objectstosave; 

In thi case, if the car object be part of all three list (they act, they be drawn, and they 

should be saved), the class car can be dein to implement all three interfaces: 

class car implement actor, drawable, serializ ... 

situat like thi be common, and allow multipl supertyp enabl you to view a sin- 

gle object (the car, in thi case) from difer perspectives, focu on difer aspect to 

group them with other similar object or to treat them accord to a certain subset of their 

possibl behaviors. 

java’ gui event-process model be built around the same idea: event handl be 

achiev via event listeners—interfac (such a actionlistener) that often just implement 

a singl method—so that object that implement it can be view a be of a listen type 

when necessary. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

96 

//new to java / 

abstract class 

I should say a few word about abstract classes, becaus it be common to wonder how they relat 

to interfaces. abstract class sit halfway between class and interfaces: they dein a type 

and can contain code (a class do), but they can also have abstract methods—method that be 

specii only, but not implemented. you can think of them a partial implement class 

with some gap in them (code that be miss and need to be ill in by subclasses). 

In my exampl above, the actor interfac could be an abstract class instead. the act method 

itself might be abstract (becaus it be difer in each speciic actor and there be no reason 

default), but mayb it contain some other code that be common to all actors. 

In thi case, I can write actor a an abstract class, and the inherit declar of my car 

class would look like this: 

class car extend actor implement drawable, serializ ... 

If I want sever of my interfac to contain code, turn them all into abstract class do 

not work. As I state before, java allow onli singl inherit for class (that mean onli one 

class can be list after the extend keyword). multipl inherit be for interfac only. 

there be a way out, though: default methods, which be introduc in java 8. i’ll get to 

them shortly. 

empti interfac 

sometim you come across interfac that be empty—they dein onli the interfac name 

and no methods. serializable, mention previously, be such an interface. cloneabl be another. 

these interfac be know a marker interfaces. they mark certain class a possess a spe- 

ciic property, and their purpos be more close relat to provid metadata than to imple- 

ment a type or dein a contract between part of a program. java, sinc version 5, have have 

annotations, which be a good way of provid metadata. there be littl reason today to use 

marker interfac in java. If you be tempted, look instead at use annotations. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

97 

//new to java / 

A new dawn with java 8 

So far, I have purpos ignor some new featur that be introduc with java 8. thi be 

becaus java 8 add function that contradict some of the earli design decis of the 

languag (such a “onli singl inherit for code”), which make explain the relationship 

of some construct quit diicult. argu the difer between and justiic for the exis- 

tenc of interfac and abstract classes, for instance, becom quit tricky. As I will show in a 

moment, interfac in java 8 have be extend so that they becom more similar to abstract 

classes, but with some subtl diferences. 

In my explan of the issues, I have take you down the histor path—explain 

the pre-java 8 situat irst and now add the newer java 8 features. I do thi on purpose, 

becaus understand the justiic for the combin of featur a they be today be pos- 

sibl onli in light of thi history. 

If the java team be to design java from scratch now, and if break backward compat- 

ibil be not a problem, they would not design it in the same way. the java languag is, how- 

ever, not foremost a theoret exercise, but a system for practic use. and in the real world, 

you must ind way to evolv and extend your languag without break everyth that have 

be do before. default method and static method in interfac be two mechan that 

make progress possibl in java 8. 

evolv interfac 

one problem in develop java 8 be how to evolv interfaces. java 8 add lambda and sev- 

eral other featur to the java languag that make it desir to adapt some of the exist 

interfac in the java library. but how do you evolv an interfac without break all the exist- 

ing code that us thi interface? 

imagin you have an interfac magicwand in your exist library: 

public interfac magicwand 

{ 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

98 

//new to java / 

void domagic(); 

} 

thi interfac have alreadi be use and implement by mani class in mani projects. but 

you now come up with some realli great new functionality, and you would like to add a realli 

use new method: 

public interfac magicwand 

{ 

void domagic(); 

void doadvancedmagic(); 

} 

If you do that, then all class that previous implement thi interfac break, becaus they 

be requir to provid an implement for thi new method. so, at irst glance, it seem you 

be stuck: either you break exist user code (which you don’t want to do) or you’r doom to 

stick with your old librari without a chanc to improv them easily. (in reality, there be some 

other approach that you could try, such a extend interfac in subinterfaces, but these 

have their own problems, which I do not discu here.) java 8 come up with a clever trick to get 

the best of both worlds: the abil to add to exist interfac without break exist code. 

thi be do use default method and static methods, which I discu now. 

default method 

default method be method in interfac that have a method body—th default implementa- 

tion. they be dein by use the default modiier at the begin of the method signature, 

and they have a full method body: 

public interfac magicwand 

{ 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

99 

//new to java / 

void domagic(); 

default void doadvancedmagic() 

{ 

... // some code here 

} 

} 

class that implement thi interfac now have the chanc to provid their own implementa- 

tion for thi method (bi overrid it), or they can complet ignor thi method, in which case 

they receiv the default implement from the interface. old code continu to work, while 

new code can use thi new functionality. 

static method 

interfac can now also contain static method with implementations. these be dein by 

use the usual static modiier at the begin of the method signature. As always, when 

write interfaces, the public modiier may be left out, becaus all method and all constant in 

interfac be alway public. 

so, what about the diamond problem? 

As you can see, abstract class and interfac have becom quit similar now. both can contain 

abstract method and method with implementations, although the syntax be diferent. there 

still be some difer (for instance, abstract class can have instanc ields, wherea inter- 

face cannot), but these difer support a central point: sinc the releas of java 8, you have 

multipl inherit (via interfaces) that can contain code! 

At the begin of thi articl I point out how the java design tread veri care 

to avoid multipl code inherit becaus of possibl problems, mostli relat to inherit 

multipl time and to name clashes. So what be the situat now? 

As usual, the java design devis the follow sensibl and practic rule to deal with 

these problems: 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

100 

//new to java / 

■■ inherit multipl abstract method with the same name be not a problem—they be view 

a the same method. 

■■ diamond inherit of ields—on of the diicult problems—i avoided, becaus interfac 

be not allow to contain ield that be not constants. 
■■ inherit static method and constant (which be also static by deinition) be not a problem, 

becaus they be preix by the interfac name when they be used, so their name do not clash. 
■■ inherit from difer interfac multipl default method with the same signatur and 

difer implement be a problem. but here java choos a much more pragmat solu- 

tion than some other languages: instead of dein a new languag construct to deal with 

this, the compil just report an error. In other words, it’ your problem. java just tell you, 

“don’t do this.” 

conclus 

interfac be a power featur in java. they be use in mani situations, includ for 

dein contract between difer part of the program, dein type for dynam dispatch, 

separ the deinit of a type from it implementation, and allow for multipl inheri- 

tanc in java. they be veri often use in your code; you should make sure you understand 

their behavior well. 

the new interfac featur in java 8, such a default methods, be most use when you 

write libraries; they be less like to be use in applic code. however, the java librari 

now make extens use of them, so make sure you know what they do. care use of interfac 

can signiicantli improv the qualiti of your code. </article> 

[an earli version of thi articl ran in the september/octob 2016 issu of java magazine. —ed.] 

michael kölling be a java champion and a professor at the univers of kent, england. He have publish two 

java textbook and numer paper on object orient and comput educ topics, and he be the lead 

develop of bluej and greenfoot, two educ program environments. kölling be also a distinguish 

educ of the acm. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

101 

//ix thi / 

If you’r a regular reader of thi quiz, you know that these question simul the level of dif-iculti of two difer certiic tests. those mark “intermediate” correspond to ques- 
tion from the oracl certii associ exam, which contain question for a preliminari level 

of certiication. question mark “advanced” come from the 1z0-809 programm II exam, 

which be the certiic test for develop who have be certii at a basic level of java 8 

program knowledg and now be look to demonstr more-advanc expertise. 

these question reli on java 8. i’ll begin cover java 9 in futur columns, of course, and I 

will make that transit quit clear when it occurs. 

i’d also like to welcom mikalai zaikin to thi column a a coauthor. he’ be work 

on these question with me for some time now, so you’v alreadi be see the beneit of 

hi work. 

question 1 (advanced). given thi code: 
public class onevalu { 

privat final int x; 

} 

consid these possibl changes: 

chang 1. chang the declar of x a follows: 
privat final int x = 99; 

chang 2. add to the class a follows: 
public onevalue() { 

quiz yourself 
more intermedi and advanc test question 

simon robert 

mikalai zaikin 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1z0-808 
https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1z0-809 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

102 

//ix thi / 

x = 100; 

} 

chang 3. add to the class a follows: 
privat void setx(int x) { 

this.x = x; 

} 

public onevalue() { 

setx(100); 

} 

which be true? choos two. 

A. the code compil a it is. 

B. the code compil if chang 1 be done. 

C. the code compil if chang 2 be done. 

D. the code compil if chang 3 be done. 

E. the code compil if chang 1 and chang 2 be both done. 

question 2 (advanced). which of the follow class produc immut objects? choos two. 

A. 

public class immut1 { 

final int[] data = { 1, 1, 2, 3, 5, 8, 13 }; 

string name; 

public immut1(str n) { this.nam = n; } 

} 

B. 

public class immut2 { 

final int[] data = { 1, 1, 2, 3, 5, 8, 13 }; 

final string name; 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

103 

//ix thi / 

public immut2(str n) { this.nam = n; } 

} 

C. 

public class immut3 { 

privat int x; 

public immut3(int x) { this.x = x; } 

} 

D. 

public class immut4 { 

privat list<string> ls; 

public immut4() { 

l = arrays.aslist("fred", "jim", "sheila"); 

} 

public string get(int idx) { 

return ls.get(idx); 

} 

} 

E. 

public class immut5 { 

privat list<string> ls; 

public immut5(string... strings) { 

l = collections.unmodifiablelist(arrays.aslist(strings)); 

} 

public string get(int idx) { 

return ls.get(idx); 

} 

} 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

104 

//ix thi / 

question 3 (intermediate). given thi method: 
public final void dostuff(int val) /* point A */ { 

if (val < 0) throw new nullpointerexception(); 

if (val < 1) throw new ioexception(); 

if (val < 2) throw new outofmemoryerror(); 

} 

which of the follow be best? 

A. insert the follow at point A: 
throw except 

B. insert the follow at point A: 
throw nullpointerexception, outofmemoryerror 

C. insert the follow at point A: 
throw ioexception, outofmemoryerror, sqlexcept 

D. insert the follow at point A: 
throw ioexcept 

E. insert the follow at point A: 
throw nullpointerexcept 

question 4 (intermediate). given this: 
string s = "hello"; 

stringbuild sb = new stringbuilder("hello"); 

stringbuild sb2 = new stringbuilder("hello"); 

// line n1 

which be true? 

A. place at line n1, the follow fragment: 
system.out.println(sb + sb); 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

105 

//ix thi / 

print this: 
hellohello 

B. place at line n1, the follow fragment: 
system.out.println(sb.equals(sb2)); 

print this: 
true 

C. place at line n1, the follow fragment compil successfully: 
string val = sb.equals(s)?sb:"differ"; 

system.out.println(val); 

D. place at line n1, the follow fragment: 
charsequ val = sb.equals(s)?sb:"differ"; 

system.out.println(val); 

print this: 
hello 

E. place at line n1, the follow fragment: 
system.out.println(sb.equals(s)?sb:"differ"); 

print this: 
differ 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

106 

//ix thi / 

answer 1. the correct answer be option B and C. java languag speciic section 8.3.1.2 

say thi about inal ields: “A blank inal instanc variabl must be deinit assign at the 

end of everi constructor of the class in which it be declared, or a compile-tim error occurs.” 

thi mean that the inal ield x must receiv exactli one explicit assignment, which must 

happen befor the constructor be complete. thi tell you immedi that option A must be 

incorrect, becaus in the origin code present in the question there be no assign to the 

ield. note that the ield a declar be term a “blank inal” (the terminolog use in the java 

speciic paragraph above) and a such, the default assign to zero that be implicit for all 

object member do not satisfi the requirement. 

chang 1 assign a valu to x a part of it declar and, therefore, x be deinit assign 

even befor ani constructor runs. therefore, option B be correct. 

chang 2 add a simpl constructor that initi the valu of x. thi change, make in 

isolation, would result in exactli one constructor and caus that constructor to uncondit 

assign a valu to x. becaus the blank inal be deinit assigned, exactli once, befor the end of 

the onli constructor, thi chang works, and option C be correct. 

chang 3 suggest add a constructor that might seem function equival to the one 

propos in chang 2. however, in thi case, the chang fails. the privat method that attempt 

to assign the valu to x will not compile, becaus it’ possibl for it to be invok after the object 

have be initialized. becaus thi fail to compile, option D must be incorrect. 

perform both chang 1 and chang 2 also fails, becaus thi would result in an attempt 

to perform two assign to the variabl x, and the java speciic demand exactli one 

assignment. therefore, option E be also incorrect. 

answer 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

107 

//ix thi / 

answer 2. the correct answer be option C and D. An object be immut if no syntact 

permiss interact with it by extern code can chang it state after construction, and no 

code within the class ever make ani such chang either. literally, onc it be created, the valu 

remain the same. 

now, befor analyz thi question, be awar that if you decid to creat class that yield 

immut object (which be a design style that can reap signiic reward in term of correct- 

ness, particularli in concurr systems), you should do a good job than the exampl show 

here. In particular, although you’ll see that 

the final keyword be not suicient to render 

everyth it touch unalterable, it should 

almost certainli be use anyway. In particu- 

lar, it have some valu in concurr that 

be not part of thi discussion. also keep in 

mind that it’ possibl to break mani form 

of immut through relection, which 

might have unexpect consequences. 

In option A, the ield have default accessibility, rather than be private, so it’ a simpl 

matter for ani other class that have access (that is, ani other class in the same package) to mutat 

the valu of the string name to point to a difer string. therefore, option A be incorrect. 

In option B, the string name ield have be mark inal, so even though it’ access to 

other member of the package, it cannot be mutated; it must refer to the string object that’ 

pass into the constructor. string themselv be immutable, so that ield’ valu can never 

be changed. however, the content of final int [] data can, in fact, be chang (and actually, it 

could be chang in option A, too, although you alreadi know option A be incorrect base on the 

string ield). thi be becaus the final keyword prevent the valu of data—which be a pointer— 

from be modiied. so, data can never refer to ani array other than the one with which it’ 

initialized. Of course, the length of array can never chang after they be created, but their 

content can be changed. therefore, the valu in the data array be actual mutabl by ani 

code in other class in the same package. hence, option B be incorrect. 

thi question investig the rule and 
purpos of java’ except mechanism, 
and it also dare to stray into that troublesom 
territori of ask what’ “best” rather than 
mere what’ “correct.” 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

108 

//ix thi / 

In option C, there be a singl ield: int x. the ield be privat but not inal. the valu of the 

ield be initi with a copi of the valu pass to the constructor. (all argument in non- 

remot java method invoc be pass by value, and with primit types, the “value” 

realli be the valu be represented, not the “valu of the reference.”) becaus of this, chang 

to the origin variabl that be pass a an argument to the constructor do not afect the 

valu of x. also, no code in the class ever chang the valu of x after the object be constructed. 

so, even though the ield be not mark inal, instanc of thi class be immutable, and option 

C be correct. 

In option D, you again see a private, nonin ield. thi time, it’ list<string> ls. becaus 

it’ private, and noth outsid the class ever have a copi of the refer valu in ls, noth 

will ever chang the content of the list 

or point the variabl at a difer list. 

therefore, option D be correct. 

option E be a littl more subtle. you 

have a variable, ls, which be ident 

to the one describ in option D. 

therefore, you know that noth 

chang the valu of l to make it refer to a difer list object. If you can be sure that the list 

that l refer to cannot be alter in ani way, you would know the object be immutable. 

the variabl l be initi to refer to a list creat by the arrays.aslist method, which 

be a util that describ itself a creat a “structur immut list”—which sound 

promising; the list will not allow the addit or remov of elements. however, the list cre- 

ate by arrays.aslist actual honor attempt to reassign ani give element of the list. but to 

counter that, thi list be wrap in collections.unmodifiablelist, which put a proxi wrapper 

around the object, so that ani attempt to modifi the list will throw an exception. sure thi 

must be immutable, right? well, it turn out that the list that’ creat us the provid array 

a it back storage. therefore, if the caller of the constructor choos to provid an explicit 

string [] a it argument, ani chang make to that array will be relect in the list. becaus 

of this, the object be not reliabl immut and option E be incorrect. 

it’ prohibit for an overrid method to 
declar check except that be not alreadi 
permit in the context of the overridden method. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

109 

//ix thi / 

If you want to examin thi efect, tri run thi code: 

string [] name = {"tony", "jane"}; 

immut5 i5 = new immut5(names); 

system.out.println("i5.get(0) " + i5.get(0)); 

names[0] = "anthony"; 

system.out.println("i5.get(0) " + i5.get(0)); 

answer 3. the correct answer be option D. thi question investig the rule and purpos of 

java’ except mechanism, and it also dare to stray into that troublesom territori of ask 

what’ “best” rather than mere what’ “correct.” however, we hope to make a good case for 

that valu judgment, and while we be happi to includ thi question becaus it creat a use 

discussion—both about java’ except mechan and about how to evalu a judgment like 

this—w doubt that thi question would surviv unchang in the real exam. 

the irst point be that java distinguish check except from uncheck except 

and errors. In particular, a method that might throw a check except must announc thi 

in that method’ signature. In thi question, the appropri point for the syntax that declar 

such inform be mark /* point A */. therefore, the question be realli ask what excep- 

tion declar would best suit thi method. it’ pretti clear that ani situat that doesn’t 

even compil cannot be consid satisfactory, so a long a some of the option would compil 

they must be “better than” ani that do not. consid the issu of compil irst. 

If the method might throw ani check exceptions, it must carri a declar that 

announc that. In thi case, the onli check except that be potenti thrown be the 

ioexception; so at a minimum, the method must declar someth that encompass that 

exception. option B and E fail on that point, becaus they declar uncheck exceptions. 

(note that outofmemoryerror fall into the categori of “unchecked,” although it’ a subclass of 

throwable, not of exception.) for convenience, we’ll simpli use the term uncheck except to 

includ error that be not parent of ioexception. therefore, option B and E be incorrect. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

110 

//ix thi / 

however, the remain option all declar either ioexcept or a parent class of 

ioexception. it’ import to note that a throw claus that mention a parent except class be 

suicient to encompass ani child classes. becaus of this, option A, C, and D all allow the code 

to compil correctly, so how can you choos the “best” option among these? 

when you declar an except in a throw clause, you impos an oblig on the caller 

of the method; the caller must do someth about the exception. also, the throw claus be 

a form of descript of the type of problem that can aris when call the method. these 

point both suggest that a throw claus should be 

a speciic a possible. To be more gener or to 

mention irrelev except might place an addi- 

tional burden on the caller by creat a perceiv 

requir to handl situat that don’t in fact 

arise. further, addit gener will like have 

the efect of hide the real problem that might 

arise, make it harder for the caller to know how to respond if an except be reported. On 

thi basis, it’ clear that option C, which report one uncheck except (outofmemoryerror) 

with a check except that cannot arise, be unlik to qualifi a “best.” therefore, option C 

be incorrect. 

By the same arguments, you can also see that option A, which simpli (and vaguely) report 

that an except might arise, be also less help than option D, which get directli to the point 

of report the singl check except that could aris from the method. As a result, you can 

conclud that option A be incorrect, and option D be the correct answer. 

there’ anoth small point to consid a part of thi discussion. the question mention 

that the method be inal. whi would that make ani diference? it’ certainli a tenuou point in 

thi case, but it help justifi the “best” valu judgment. often, an abstract method in an inter- 

face declar a fairli gener except (consid the close() method in the autoclos inter- 

face, which throw exception). given that such a method cannot possibl throw ani except 

becaus it doesn’t have ani implementation, whi would thi be? the answer be that it’ prohib- 

test equal between difer 
type almost alway return fals 
regardless of the contents. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

111 

//ix thi / 

ite for an overrid method (which, of course, includ the method that implement interfac 

abstract methods) to declar check except that be not alreadi permit in the context 

of the overridden method. without thi restriction, you could have a refer of a parent type, 

and the compil would let you call a method on it without handl a particular check excep- 

tion, but if the refer turn out to refer—at runtime—to an implement that do throw 

that check exception, you would have efect cheat the check except mechanism. 

generally, allow an overrid method to do someth not permit for the overridden 

method would break the liskov substitut principle, and in thi speciic case, it would break 

the protect provid by check exceptions. 

thi mean that if a method be expect to be overridden, it’ not unreason to declar 

it a throw some check except that simpli don’t aris in it current form. had the 

method not be inal, it would have be much harder to make a convinc case that option C 

be not the “best” choic (becaus it allow addit lexibility). but a it is, declar throw 

sqlexcept be just a sourc of confusion, becaus the method do not throw sqlexcept nor 

be it possibl that ani overrid method might do so. 

answer 4. the correct answer be option E. thi question investig sever aspect of 

stringbuild and it relationship with string. 

In option A, the code us the + oper with two operand that be stringbuild objects. 

one of java’ “special case” rule be that the onli allow oper overload be the language- 

dein abil to concaten string type use the + operator. anoth fundament rule be 

that when a + oper have a string type a an operand, if the other operand be not a string, it 

will be convert into one—and that, of course, bring up a third fundament rule: in java ani 

data type can be convert into a string. (admittedly, the convers isn’t alway veri helpful, 

but it’ deinit legal.) however, in thi case, although both operand repres “text” in the 

gener sense—indeed, they’r both instanc of the interfac charsequence—neith operand 

be a string. therefore, the code fail to compile, becaus it attempt to use the + oper with 

illeg arguments. becaus of this, option A be incorrect. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

112 

//ix thi / 

option B consid equal testing. thi turn out to be a pretti simpl rule, too. test 

equal between difer type almost alway return fals regardless of the content (with 

some exceptions—tak a look at the api-docu requir for the equal method 

in the list and set implementations). however, in thi question, you have two stringbuild 

that contain the same text. In thi situation, it’ easi to assum that the two object will 

test a equal. however, that’ not at all the case; indeed, rel few of the core java api 

class implement a use equal method, and stringbuild be not one of them. the way you 

can determin thi be by look at the document of the class. look at string’ equal 

method, and you’ll see the api doc dein how it test for ident charact sequences. 

but, look at stringbuilder; the onli mention of the equal method be that it’ “inherit from 

java.lang.object.” Of course, the default equal method dein by object test to see if two ref- 

erenc refer to the same object in memory. As a result, the fragment in option B actual print 

false, and option B be incorrect. 

the inal three option all hing on relat points. string and stringbuild be difer 

type on independ branch of the inherit tree. As such, they be not assignment- 

compat with one another. however, they also have element of a share type hierarchy; 

they’r both subclass of object, and they both implement the charsequ interface. 

In these options, a ternari express have string and stringbuild a the two option val- 

ues. the type of such an express cannot be string; it must be some common parent of both 

arguments. therefore, the attempt to assign the result of the ternari express to the string 

variabl val in option C will caus a compil failure. therefore, option C be incorrect. 

In option D, the type of the variabl val have be chang to charsequence. thi now form a 

legal, compil fragment. however, the test in the ternari express sb.equals(s) will evalu- 

ate to false, becaus the argument be of difer types, and stringbuild do not handl 

that. given that the test evalu to false, the ternari express a a whole evalu to the 

third operand, and the fragment print differ. becaus of this, option D be incorrect. 

In option E, the intermedi variabl val have be remov and the ternari express 

be the argument to the println call. In thi case, it’ up to the compil to ind a suitabl type 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

113 

//ix thi / 

for the expression, and it doesn’t realli matter if it choos object or charsequence. either be a 

legitim argument to the println method and, consequently, the code compil successfully. 

Of course, the express sb.equals(s) still evalu to fals and the output that be print be 

differ—a it be in option D. therefore, option E be correct. 

As a side note, the charsequ interfac isn’t explicitli mention in the exam objec- 

tives. however, both string and stringbuild are, and thi interfac be an aspect of both. We 

doubt you’ll come across it in the real exam, but our excus be that by use it here, we be abl 

to make the exampl a littl more interest and, perhaps, teach someth useful. We hope 

you’ll forgiv the indulgence! </article> 

simon robert join sun microsystem in time to teach sun’ irst java class in the uk. He creat the 

sun certii java programm and sun certii java develop exams. He write sever java certiic 

guid and be current a freelanc educ who publish record and live video train through pearson 

informit (avail direct and through the o’reilli safari book onlin service). He remain involv with 

oracle’ java certiic projects. 

mikalai zaikin be a lead java develop at iba IT park in minsk, belarus. dure hi career, he have help oracl 

with develop of the java certiic exams, and he have be a technic review of sever java certii- 

cation books, includ three edit of the famou sun certifi programm for java studi guid by kathi 

sierra and bert bates. 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 


oracle.com/javamagazin ////////////////////////////////// january/februari 2018 

114 

//contact u / 

comment 
We welcom your comments, correc- 

tions, opinion on topic we’v covered, 

and ani other thought you feel impor- 

tant to share with u or our readers. 

unless you speciic tell u that your 

correspond be private, we reserv 

the right to publish it in our letter to 

the editor section. 

articl propos 
We welcom articl propos on all 

topic regard java and other jvm 

languages, a well a the jvm itself. 

We also be interest in propos for 

articl on java util (either open 

sourc or those bundl with the jdk). 

finally, algorithms, unusu but use 

program techniques, and most other 

topic that hard-cor java programm 

would enjoy be of great interest to us, 

too. pleas contact u with your idea 

at javamag_us@oracle.com and we’ll 

give you our thought on the topic and 

send you our nifti writer guidelines, 

which will give you more inform 

on prepar an article. 

custom servic 
If you’r have troubl with your sub- 

scription, pleas contact the folk at 

java@omeda.com, who will do what- 

ever they can to help. 

where? 
comment and articl propos should 

be sent to our editor, andrew binstock, 

at javamag_us@oracle.com. 

while it will have no inluenc on our 

decis whether to publish your articl 

or letter, cooki and edibl treat will 

be grate accept by our staf at 

java magazine, oracl corporation, 

500 oracl parkway, MS opl 3a-3133, 

redwood shores, CA 94065, usa. 

world’ shortest subscript form 

download area for code and 

other item 

java magazin in japanes 

magazin 

By and for the java commun 

http://oracle.com/javamagazin 
https://twitter.com/oraclejavamag 
https://www.facebook.com/javamagazineoracl 
mailto:javamag_us%40oracle.com?subject= 
mailto:javamag_us%40oracle.com?subject= 
mailto:java%40omeda.com?subject= 
mailto:javamag_us%40oracle.com?subject= 
https://www.sub-forms.com/dragon/init.do?site=ora6028_jfnew 
http://bit.ly/2b2txeb 
http://bit.ly/2b2txeb 
http://www.oracle.com/technetwork/jp/articles/java/overview/index.html 

