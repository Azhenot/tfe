




































p:\tex\sisc\33-5\79687\79687.dvi 


siam J. sci. comput. c© 2011 societi for industri and appli mathemat 
vol. 33, no. 5, pp. 2950–2971 

lsmr: AN iter algorithm for spars 
least-squar problems∗ 

david chin-lung fong† and michael saunders‡ 

abstract. An iter method lsmr be present for solv linear system Ax = b and least- 
squar problem min ‖ax−b‖2, with A be spars or a fast linear operator. lsmr be base on the 
golub–kahan bidiagon process. It be analyt equival to the minr method appli 
to the normal equat atax = atb, so that the quantiti ‖atrk‖ be monoton decreas 
(where rk = b−axk be the residu for the current iter xk). We observ in practic that ‖rk‖ also 
decreas monotonically, so that compar to lsqr (for which onli ‖rk‖ be monotonic) it be safer to 
termin lsmr early. We also report some experi with reorthogonalization. 

key words. least-squar problem, spars matrix, lsqr, minres, krylov subspac method, 
golub–kahan process, conjugate-gradi method, minimum-residu method, iter method 

am subject classifications. 15a06, 65f10, 65f20, 65f22, 65f25, 65f35, 65f50, 93e24 

doi. 10.1137/10079687x 

1. introduction. We present a numer method call lsmr for comput 
a solut x to the follow problems: 

unsymmetr equations: minim ‖x‖2 subject to Ax = b, 
linear least squar (ls): minim ‖ax− b‖2, 
regular least squares: minim 

∥∥∥∥(aλi 
) 
x− 

( 
b 
0 

)∥∥∥∥ 
2 

, 

where A ∈ rm×n, b ∈ rm, and λ ≥ 0, with m ≤ n or m ≥ n. the matrix A be use a 
an oper for which product of the form Av and atu can be comput for variou 
v and u. (if A be symmetr or hermitian and λ = 0, minres-qlp [4] be applicable.) 

lsmr be similar in style to the well-known method lsqr [16, 17] in be base 
on the golub–kahan bidiagon of A [6]. lsqr be equival to the conjugate- 
gradient (cg) method appli to the normal equat (ata+λ2i)x = atb. It have the 
properti of reduc ‖rk‖ monotonically, where rk = b − axk be the residu for the 
approxim solut xk. (for simplicity, we be let λ = 0.) In contrast, lsmr 
be equival to minr [15] appli to the normal equation, so that the quantiti 
‖atrk‖ be monoton decreasing. In practic we observ that ‖rk‖ also decreas 
monoton and be never veri far behind the correspond valu for lsqr. hence, 
although lsqr and lsmr ultim converg to similar points, it be safer to use 
lsmr in situat where the solver must be termin early. 

stop condit be typic base on backward error : the norm of some per- 
turbat to A for which the current iter xk solv the perturb problem exactly. 

∗receiv by the editor june 1, 2010; accept for public (in revis form) june 6, 2011; 
publish electron octob 27, 2011. 

http://www.siam.org/journals/sisc/33-5/79687.html 
†icme, stanford university, stanford, CA 94305-4042 (clfong@stanford.edu). thi author’ re- 

search be partial support by a stanford graduat fellowship. 
‡system optim laboratory, depart of manag scienc and engineering, stan- 

ford university, stanford, CA 94305-4026 (saunders@stanford.edu). thi author’ research be par- 
tialli support by offic of naval research grant n00014-08-1-0191 and by the u.s. armi research 
laboratory, through the armi high perform comput research center, cooper agree- 
ment w911nf-07-0027. 

2950 



lsmr: AN iter algorithm for least squar 2951 

experi on mani spars LS test problem show that for lsmr, a certain cheapli 
comput backward error for each xk be close to the optim (smallest possible) 
backward error. thi be an unexpect but highli desir advantage. 

1.1. overview. section 2 introduc the golub–kahan process and deriv the 
basic lsmr algorithm with λ = 0. section 3 deriv variou norm and stop 
criteria. section 4 discu singular system and complexity. section 5 deriv the 
lsmr algorithm with λ ≥ 0. section 6 describ backward error estimates. section 7 
give numer result on a rang of overdetermin and squar systems. section 8 
summar our findings, and appendix A prof one of the main lemmas. 

1.2. notation. matric be denot by a,b, . . . , vector by v, w, . . . , and 
scalar by α, β, . . . . two except be c and s, which denot the signific com- 
ponent of a plane rotat matrix, with c2 + s2 = 1. for a vector v, ‖v‖ alway 
denot the 2-norm of v. for a matrix A, ‖a‖ usual denot the frobeniu norm, 
and the condit number of a matrix A be defin by cond(a) = ‖a‖‖a+‖, where 
A+ denot the pseudoinvers of A. vector e1 and ek denot column of an ident 
matrix. item like β̇k and β̈k be about to chang to someth similar like β̃k. 

2. deriv of lsmr. We begin with the golub–kahan process [6], an 
iter procedur for transform 

( 
b A 

) 
to upper-bidiagon form 

( 
β1e1 Bk 

) 
. 

2.1. the golub–kahan process. 
1. set β1u1 = b (shorthand for β1 = ‖b‖, u1 = b/β1) and α1v1 = atu1. 
2. for k = 1, 2, . . . , set 

(2.1) βk+1uk+1 = avk − αkuk and αk+1vk+1 = atuk+1 − βk+1vk. 
after k steps, we have 

avk = uk+1bk and A 
tuk+1 = vk+1l 

T 
k+1, 

where we defin Vk = 
( 
v1 v2 . . . vk 

) 
, Uk = 

( 
u1 u2 . . . uk 

) 
, and 

Bk = 

⎛⎜⎜⎜⎜⎜⎝ 
α1 
β2 α2 

. . . 
. . . 

βk αk 
βk+1 

⎞⎟⎟⎟⎟⎟⎠ , lk+1 = 
( 
Bk αk+1ek+1 

) 
. 

now consid 

atavk = A 
tuk+1bk = vk+1l 

T 
k+1bk = vk+1 

( 
btk 

αk+1e 
T 
k+1 

) 
Bk 

= vk+1 

( 
btkbk 

αk+1βk+1e 
T 
k 

) 
. 

thi be equival to what would be gener by the symmetr lanczo process with 
matrix ata and start vector atb. (for thi reason, we defin β̄k ≡ αkβk below.) 

2.2. use golub–kahan to solv the normal equation. krylov subspac 
method for solv linear equat form solut estim xk = vkyk for some yk, 
where the column of Vk be an expand set of theoret independ vectors. 
(in thi case, Vk and also Uk be theoret orthonormal.) 



2952 david chin-lung fong and michael saunder 

for the equat atax = atb, ani solut x have the properti of minim ‖r‖, 
where r = b − Ax be the correspond residu vector. thus, in the develop of 
lsqr it be natur to choos yk to minim ‖rk‖ at each stage. sinc 

rk = b− avkyk = β1u1 − uk+1bkyk = uk+1(β1e1 −bkyk), 

where uk+1 be theoret orthonormal, the subproblem minyk ‖β1e1 −bkyk‖ easili 
arose. In contrast, for lsmr we wish to minim ‖atrk‖. let β̄k ≡ αkβk for all k. 
sinc atrk = A 

tb−ataxk = β1α1v1 −atavkyk, we have 

atrk = β̄1v1 − vk+1 
( 

btkbk 
αk+1βk+1e 

T 
k 

) 
yk = vk+1 

( 
β̄1e1 − 

( 
btkbk 
β̄k+1e 

T 
k 

) 
yk 

) 
, 

and we be lead to the subproblem 

(2.2) min 
yk 

‖at rk‖ = min 
yk 

∥∥∥∥β̄1e1 − ( btkbkβ̄k+1etk 
) 
yk 

∥∥∥∥ . 
effici solut of thi LS subproblem be the heart of algorithm lsmr. 

2.3. two QR factorizations. As in lsqr, we form the QR factor 

(2.3) qk+1bk = 

( 
Rk 
0 

) 
, Rk = 

⎛⎜⎜⎜⎜⎝ 
ρ1 θ2 

ρ2 
. . . 

. . . θk 
ρk 

⎞⎟⎟⎟⎟⎠ . 

If we defin tk = rkyk and solv R 
T 
kqk = β̄k+1ek, we have qk = (β̄k+1/ρk)ek = ϕkek 

with ρk = (rk)kk and ϕk ≡ β̄k+1/ρk. then we perform a second QR factor 

(2.4) q̄k+1 

( 
rtk β̄1e1 
ϕke 

T 
k 0 

) 
= 

( 
r̄k zk 
0 ζ̄k+1 

) 
, r̄k = 

⎛⎜⎜⎜⎜⎝ 
ρ̄1 θ̄2 

ρ̄2 
. . . 

. . . θ̄k 
ρ̄k 

⎞⎟⎟⎟⎟⎠ . 

combin what we have with (2.2) give 

min 
yk 

‖at rk‖ = min 
yk 

∥∥∥∥β̄1e1 − (rtkrkqtk Rk 
) 
yk 

∥∥∥∥ = mintk 
∥∥∥∥β̄1e1 − ( rtkϕketk 

) 
tk 

∥∥∥∥ 
= min 

tk 

∥∥∥∥( zkζ̄k+1 
) 
− 
( 
r̄k 
0 

) 
tk 

∥∥∥∥ .(2.5) 
the subproblem be solv by choos tk from r̄ktk = zk. 

2.4. recurr for xk. let Wk and w̄k be comput by forward substitut 
from rtk W 

T 
k = V 

T 
k and R̄ 

T 
k W̄ 

T 
k = W 

T 
k . then from xk = vkyk, rkyk = tk, and 

r̄ktk = zk, we have x0 ≡ 0 and 

xk = wkrkyk = wktk = w̄kr̄ktk = w̄kzk = xk−1 + ζkw̄k. 



lsmr: AN iter algorithm for least squar 2953 

2.5. recurr for Wk and w̄k. If we write 

Vk = 
( 
v1 v2 · · · vk 

) 
, Wk = 

( 
w1 w2 · · · wk 

) 
, 

w̄k = 
( 
w̄1 w̄2 · · · w̄k 

) 
, zk = 

( 
ζ1 ζ2 · · · ζk 

)T 
, 

an import fact be that when k increas to k + 1, all quantiti remain the same 
except for one addit term. 

the first QR factor proce a follows. At iter k we construct a plane 
rotat oper on row l and l + 1: 

Pl = 

⎛⎜⎜⎝ 
il−1 

cl sl 
−sl cl 

ik−l−1 

⎞⎟⎟⎠ . 
now if qk+1 = Pk . . . p2p1, we have 

qk+1bk+1 = qk+1 

( 
Bk αk+1ek+1 

βk+2 

) 
= 

⎛⎝rk θk+1ek0 ᾱk+1 
βk+2 

⎞⎠ , 
qk+2bk+1 = pk+1 

⎛⎝rk θk+1ek0 ᾱk+1 
βk+2 

⎞⎠ = 
⎛⎝rk θk+1ek0 ρk+1 

0 0 

⎞⎠ 
and we see that θk+1 = skαk+1 = (βk+1/ρk)αk+1 = β̄k+1/ρk = ϕk. therefor we can 
write θk+1 instead of ϕk. 

for the second QR factorization, if q̄k+1 = p̄k . . . p̄2p̄1, we know that 

q̄k+1 

( 
rtk 

θk+1e 
T 
k 

) 
= 

( 
r̄k 
0 

) 
, 

and so 

(2.6) q̄k+2 

( 
rtk+1 

θk+2e 
T 
k+1 

) 
= p̄k+1 

⎛⎝r̄k θ̄k+1ekc̄kρk+1 
θk+2 

⎞⎠ = 
⎛⎝r̄k θ̄k+1ekρ̄k+1 

0 

⎞⎠ . 
By consid the last row of the matrix equat rtk+1w 

T 
k+1 = V 

T 
k+1 and the last 

row of r̄tk+1w̄ 
T 
k+1 = W 

T 
k+1 we obtain equat that defin wk+1 and w̄k+1: 

θk+1w 
T 
k + ρk+1w 

T 
k+1 = v 

T 
k+1, 

θ̄k+1w̄ 
T 
k + ρ̄k+1w̄ 

T 
k+1 = w 

T 
k+1. 

2.6. the two rotations. To summarize, the rotat Pk and p̄k have the 
follow effect on our computation:( 

ck sk 
−sk ck 

)( 
ᾱk 
βk+1 αk+1 

) 
= 

( 
ρk θk+1 
0 ᾱk+1 

) 
,( 

c̄k s̄k 
−s̄k c̄k 

)( 
c̄k−1ρk ζ̄k 
θk+1 ρk+1 

) 
= 

( 
ρ̄k θ̄k+1 ζk 
0 c̄kρk+1 ζ̄k+1 

) 
. 



2954 david chin-lung fong and michael saunder 

2.7. speed up forward substitution. the forward substitut for com- 
put w and w̄ can be make more effici if we defin hk = ρkwk and h̄k = ρkρ̄kw̄k. 
We then obtain the updat describ in part 6 of the pseudocod below. 

2.8. algorithm lsmr. the follow summar the main step of algorithm 
lsmr for solv Ax ≈ b, exclud the norm and stop rule develop later: 

1. (initialize) 

β1u1 = b, α1v1 = A 
tu1, ᾱ1 = α1, ζ̄1 = α1β1, ρ0 = 1, ρ̄0 = 1, 

c̄0 = 1, s̄0 = 0, h1 = v1, h̄0 = 0, x0 = 0. 

2. for k = 1, 2, 3 . . . , repeat step 3–6. 
3. (continu the bidiagonalization) 

βk+1uk+1 = avk − αkuk, αk+1vk+1 = atuk+1 − βk+1vk. 
4. (construct and appli rotat pk) 

ρk = 
( 
ᾱ2k + β 

2 
k+1 

) 1 
2 , ck = ᾱk/ρk, sk = βk+1/ρk,(2.7) 

θk+1 = skαk+1, ᾱk+1 = ckαk+1.(2.8) 

5. (construct and appli rotat p̄k) 

θ̄k = s̄k−1ρk, ρ̄k = 
( 
(c̄k−1ρk)2 + θ2k+1 

) 1 
2 , 

c̄k = c̄k−1ρk/ρ̄k, s̄k = θk+1/ρ̄k,(2.9) 
ζk = c̄k ζ̄k, ζ̄k+1 = −s̄kζ̄k.(2.10) 

6. (updat h, h̄ x) 

h̄k = hk − (θ̄kρk/(ρk−1ρ̄k−1))h̄k−1, 
xk = xk−1 + (ζk/(ρkρ̄k))h̄k, 

hk+1 = vk+1 − (θk+1/ρk)hk. 
3. norm and stop rules. here we deriv ‖rk‖, ‖at rk‖, ‖xk‖ and esti- 

mate of ‖a‖ and cond(a) for use within stop rules. all quantiti requir o(1) 
comput at each iteration. 

3.1. comput ‖rk‖. We transform r̄tk to upper-bidiagon form use a 
third QR factorization: r̃k = q̃kr̄ 

T 
k with q̃k = p̃k−1 . . . p̃1. thi amount to one 

addit rotat per iteration. now let 

(3.1) t̃k = q̃ktk, b̃k = 

( 
q̃k 

1 

) 
qk+1e1β1. 

then rk = b−axk = β1u1 −avkyk = uk+1e1β1 − uk+1bkyk give 

rk = uk+1 

( 
e1β1 −qtk+1 

( 
Rk 
0 

) 
yk 

) 
= uk+1 

( 
e1β1 −qtk+1 

( 
tk 
0 

)) 
= uk+1 

( 
qtk+1 

( 
q̃tk 

1 

) 
b̃k −qtk+1 

( 
q̃tk t̃k 
0 

)) 
= uk+1q 

T 
k+1 

( 
q̃tk 

1 

)( 
b̃k − 

( 
t̃k 
0 

)) 
. 



lsmr: AN iter algorithm for least squar 2955 

therefore, assum orthogon of uk+1, we have 

(3.2) ‖rk‖ = 
∥∥∥∥b̃k − (t̃k0 

)∥∥∥∥ . 
the vector b̃k and t̃k can be write in the form 

(3.3) b̃k = 
( 
β̃1 · · · β̃k−1 β̇k β̈k+1 

)T 
, t̃k = 

( 
τ̃1 · · · τ̃k−1 τ̇k 

)T 
. 

the vector t̃k can be comput by forward substitut from R̃ 
T 
k t̃k = zk. 

lemma 3.1. In (3.2)–(3.3), β̃i = τ̃i for i = 1, . . . , k − 1. 
proof. appendix A prof the lemma by induction. 
use thi lemma we can estim ‖rk‖ from just the last two element of b̃k and 

the last element of t̃k, a show in (3.6). 

3.1.1. pseudocod for comput ‖rk‖. the follow summar how ‖rk‖ 
may be obtain from quantiti aris from the first and third QR factorizations: 

1. (initialize) 

β̈1 = β1, β̇0 = 0, ρ̇0 = 1, τ̃−1 = 0, θ̃0 = 0, ζ0 = 0. 

2. for the kth iteration, repeat step 3–6. 
3. (appli rotat pk) 

β̂k = ckβ̈k, β̈k+1 = −skβ̈k.(3.4) 
4. (if k ≥ 2, construct and appli rotat p̃k−1) 

ρ̃k−1 = 
( 
ρ̇2k−1 + θ̄ 

2 
k 

) 1 
2 , 

c̃k−1 = ρ̇k−1/ρ̃k−1, s̃k−1 = θ̄k/ρ̃k−1,(3.5) 

θ̃k = s̃k−1ρ̄k, ρ̇k = c̃k−1ρ̄k, 

β̃k−1 = c̃k−1β̇k−1 + s̃k−1β̂k, β̇k = −s̃k−1β̇k−1 + c̃k−1β̂k. 
5. (updat t̃k by forward substitution) 

τ̃k−1 = (ζk−1 − θ̃k−1τ̃k−2)/ρ̃k−1, τ̇k = (ζk − θ̃k τ̃k−1)/ρ̇k. 
6. (form ‖rk‖) 

(3.6) γ = (β̇k − τ̇k)2 + β̈2k+1, ‖rk‖ = 
√ 
γ. 

3.2. comput ‖atrk‖. from (2.5) we have ‖atrk‖ = |ζ̄k+1|, which by (2.10) 
be monoton decreasing. 

3.3. comput ‖xk‖. from section 2.4 we have xk = vkr−1k r̄−1k zk. from 
the third QR factor q̃kr̄ 

T 
k = r̃k in section 3.1 and a fourth QR factor 

q̂k(q̃krk) 
T = r̂k we can write 

xk = vkr 
−1 
k R̄ 

−1 
k zk = vkr 

−1 
k R̄ 

−1 
k r̄kq̃ 

T 
k z̃k = vkr 

−1 
k Q̃ 

T 
k q̃krkq̂ 

T 
k ẑk = vkq̂ 

T 
k ẑk, 

where z̃k and ẑk be defin by forward substitut R̃ 
T 
k z̃k = zk and R̂ 

T 
k ẑk = z̃k. 

assum orthogon of Vk we arriv at the estim ‖xk‖ = ‖ẑk‖. sinc onli 
the last diagon of r̃k and the bottom 2 × 2 part of r̂k chang each iteration, thi 
estim of ‖xk‖ can again be updat cheaply. the pseudocode, omit here, can be 
deriv a in section 3.1.1. experiment we have observ that for everi iteration, 
‖xk‖ > ‖xk−1‖ be either true or veri nearli true. 



2956 david chin-lung fong and michael saunder 

3.4. estim of ‖a‖ and cond(a). It be know that the singular valu 
of Bk be interlac by those of A and be bound abov and below by the larg 
and small nonzero singular valu of A [16]. therefor we can estim ‖a‖ and 
cond(a) by ‖bk‖ and cond(bk), respectively. consid the frobeniu norm of bk, 
we have the recurr relat ‖bk+1‖2f = ‖bk‖2f +α2k +β2k+1. from (2.3)–(2.4) and 
(2.6), we can show that the follow qlp factor [23] holds: 

qk+1bkq̄ 
T 
k = 

( 
r̄tk−1 
θ̄ke 

T 
k−1 c̄k−1ρk 

) 

(the same a r̄tk except for the last diagonal). sinc the singular valu of Bk be 
approxim by the diagon element of that lower-bidiagon matrix [23], and sinc 
the diagon be all positive, we can estim cond(a) by the ratio of the larg and 
small valu in {ρ̄1, . . . , ρ̄k−1, c̄k−1ρk}. those valu can be updat cheaply. 

3.5. stop criteria. with exact arithmetic, the golub–kahan process ter- 
minat when either αk+1 = 0 or βk+1 = 0. for certain data b, thi could happen in 
practic when k be small (but be unlik later). We show that lsmr will have solv 
the problem at that point and should therefor terminate. 

when αk+1 = 0, with the express of ‖at rk‖ from section 3.2, we have 
‖at rk‖ = |ζ̄k+1| = |s̄k ζ̄k| = |θk+1ρ̄−1k ζ̄k| = |skαk+1ρ̄−1k ζ̄k| = 0, 

where (2.10), (2.9), (2.8) be used. thus, an LS solut have be obtained. 
when βk+1 = 0, we have 

sk = βk+1ρ 
−1 
k = 0 (from (2.7)),(3.7) 

β̈k+1 = −skβ̈k = 0 (from (3.4), (3.7)),(3.8) 
β̇k = c̃ 

−1 
k 

( 
β̃k − s̃k(−1)ks(k)ck+1β1 

) 
(from (a.6)), 

= c̃−1k β̃k (from (3.7)) 

= ρ̇−1k ρ̃kβ̃k (from (3.5)) 

= ρ̇−1k ρ̃k τ̃k (from lemma 3.1) 
= τ̇k (from (a.2), (a.3)).(3.9) 

By (3.9), (3.8), and (3.6) we conclud that ‖rk‖ = 0. It follow that axk = b. 
3.6. practic stop criteria. for lsmr we use the same stop rule 

a lsqr [16], involv dimensionless quantiti atol, btol, conlim: 
s1: stop if ‖rk‖ ≤ btol‖b‖+atol‖a‖‖xk‖. 
s2: stop if ‖at rk‖ ≤ atol‖a‖‖rk‖. 
s3: stop if cond(a) ≥ conlim. 
S1 appli to consist systems, allow for uncertainti in A and b [10, theo- 

rem 7.1]. S2 appli to inconsist system and come from stewart’ backward error 
estim ‖e2‖ assum uncertainti in A; see section 6.1. S3 appli to ani system. 

4. characterist of the solut on singular systems. If A do not have 
full column rank, the normal equat atax = atb be singular but consistent. We 
show that lsqr and lsmr both give the minimum-norm LS solution. that is, they 
both solv the optim problem min ‖x‖2 such that atax = atb. let n(a) and 
r(a) denot the nullspac and rang of a matrix A. 



lsmr: AN iter algorithm for least squar 2957 

tabl 4.1 
storag and comput requir for variou LS methods. 

storag work 
m n m n 

lsmr av, u x, v, h, h̄ 3 6 
lsqr av, u x, v, w 3 5 
minr on atax = atb Av x, v1, v2, w1, w2, w3 8 

lemma 4.1. If A ∈ rm×n and p ∈ Rn satisfi atap = 0, then p ∈ n(a). 
proof. atap = 0 ⇒ ptatap = 0 ⇒ (ap)tap = 0 ⇒ Ap = 0. 
theorem 4.2. lsqr return the minimum-norm solution. 
proof. the final lsqr solut satisfi ataxlsqrk = A 

tb, and ani other solut 

x̂ satisfi atax̂ = atb. with p = x̂− xlsqrk , the differ between the two normal 
equat give atap = 0, so that Ap = 0 by lemma 4.1. from α1v1 = A 

tu1 and 
αk+1vk+1 = A 

tuk+1 − βk+1vk (2.1), we have v1, . . . , vk ∈ r(at ). with Ap = 0, thi 
impli ptvk = 0, so that 

‖x̂‖22 − ‖xlsqrk ‖22 = ‖xlsqrk + p‖22 − ‖xlsqrk ‖22 = ptp+ 2ptxlsqrk 
= ptp+ 2ptvki 

lsqr 
k = p 

Tp ≥ 0. 
corollari 4.3. lsmr return the minimum-norm solution. 
proof. At convergence, αk+1 = 0 or βk+1 = 0. thu β̄k+1 = αk+1βk+1 = 0, 

which mean (2.2) becom min ‖β̄1e1 − btkbkyk‖ and henc btkbkyk = β̄1e1, sinc 
Bk have full rank. thi be the normal equat for min ‖bkyk − β1e1‖, the same LS 
subproblem solv by lsqr. We conclud that at convergence, yk = y 

lsqr 
k and thu 

xk = vkyk = vki 
lsqr 
k = x 

lsqr 
k , and theorem 4.2 applies. 

4.1. complexity. We compar the storag requir and comput com- 
plexiti for lsmr and lsqr on Ax ≈ b and minr on the normal equat 
atax = atb. In tabl 4.1, we list the vector storag need (exclud storag 
for A and b). recal that A be m×n and for LS system m may be consider larg 
than n. Av denot the work storag for matrix-vector products. work repres 
the number of floating-point multipl requir at each iteration. 

5. regular least squares. In thi section, we extend lsmr to the regu- 
lariz LS problem: 

(5.1) min 

∥∥∥∥(aλi 
) 
x− 

( 
b 
0 

)∥∥∥∥ 
2 

. 

If Ā = 
( 
A 
λI 

) 
and r̄k = 

( 
b 
0 

)− āxk, then 
āt r̄k = A 

T rk − λ2xk = vk+1 
( 
β̄1e1 − 

( 
btkbk 

β̄k+1e 
T 
k 

) 
yk − λ2 

( 
yk 
0 

)) 
= vk+1 

( 
β̄1e1 − 

( 
rtkrk 

β̄k+1e 
T 
k 

) 
yk 

) 
and the rest of the main algorithm follow the same a in the unregular case. In 
the last equality, Rk be defin by the QR factor 

q2k+1 

( 
Bk 
λI 

) 
= 

( 
Rk 
0 

) 
, q2k+1 ≡ pkp̂k . . . p2p̂2p1p̂1, 



2958 david chin-lung fong and michael saunder 

where p̂l be a rotat oper on row l and l+ k+1. the effect of p̂1 and P1 be 
illustr here: 

p̂1 

⎛⎜⎜⎜⎜⎝ 
α1 
β2 α2 

β3 
λ 

λ 

⎞⎟⎟⎟⎟⎠ = 
⎛⎜⎜⎜⎜⎝ 
α̂1 
β2 α2 

β3 
0 

λ 

⎞⎟⎟⎟⎟⎠ , P1 
⎛⎜⎜⎜⎜⎝ 
α̂1 
β2 α2 

β3 

λ 

⎞⎟⎟⎟⎟⎠ = 
⎛⎜⎜⎜⎜⎝ 
ρ1 θ2 

ᾱ2 
β3 

λ 

⎞⎟⎟⎟⎟⎠ . 

5.1. effect on ‖r̄k‖. the introduct of regular chang the residu 
norm a follows: 

r̄k = 

( 
b 
0 

) 
− 
( 
A 
λI 

) 
xk = 

( 
u1 
0 

) 
β1 − 

( 
avk 
λvk 

) 
yk = 

( 
u1 
0 

) 
β1 − 

( 
uk+1bk 
λvk 

) 
yk 

= 

( 
uk+1 

Vk 

)( 
e1β1 − 

( 
Bk 
λI 

) 
yk 

) 
= 

( 
uk+1 

Vk 

)( 
e1β1 −qt2k+1 

( 
Rk 
0 

) 
yk 

) 
= 

( 
uk+1 

Vk 

)( 
e1β1 −qt2k+1 

( 
tk 
0 

)) 
= 

( 
uk+1 

Vk 

) 
qt2k+1 

( 
q̃tk 

1 

)( 
b̃k − 

( 
t̃k 
0 

)) 

with b̃k = 
( 
˜qk 

1 

) 
q2k+1e1β1, where we adopt the notat 

b̃k = 
( 
β̃1 · · · β̃k−1 β̇k β̈k+1 β̌1 · · · β̌k 

)T 
. 

We conclud that ‖r̄k‖2 = β̌21+ · · ·+ β̌2k+(β̇k−τk)2+ β̈2k+1. the effect of regular 
on the rotat be summar as( 

ĉk ŝk 
−ŝk ĉk 

)( 
ᾱk β̈k 
λ 

) 
= 

( 
α̂k β́k 

β̌k 

) 
,( 

ck sk 
−sk ck 

)( 
α̂k β́k 
βk+1 αk+1 

) 
= 

( 
ρk θk+1 β̂k 

ᾱk+1 β̈k+1 

) 
. 

5.2. pseudocod for regular lsmr. the follow summar algo- 
rithm lsmr for solv the regular problem (5.1) with give λ. our matlab 
implement be base on these steps: 

1. (initialize) 

β1u1 = b, α1v1 = A 
tu1, ᾱ1 = α1, ζ̄1 = α1β1, ρ0 = 1, ρ̄0 = 1, 

c̄0 = 1, s̄0 = 0, β̈1 = β1, β̇0 = 0, ρ̇0 = 1, τ̃−1 = 0, 

θ̃0 = 0, ζ0 = 0, d0 = 0, h1 = v1, h̄0 = 0, x0 = 0. 

2. for k = 1, 2, 3, . . . , repeat step 3–12. 
3. (continu the bidiagonalization) 

βk+1uk+1 = avk − αkuk, αk+1vk+1 = atuk+1 − βk+1vk. 



lsmr: AN iter algorithm for least squar 2959 

4. (construct rotat p̂k) 

α̂k = 
( 
ᾱ2k + λ 

2 
) 1 

2 , ĉk = ᾱk/α̂k, ŝk = λ/α̂k. 

5. (construct and appli rotat pk) 

ρk = 
( 
α̂2k + β 

2 
k+1 

) 1 
2 , ck = α̂k/ρk, sk = βk+1/ρk, 

θk+1 = skαk+1, ᾱk+1 = ckαk+1. 

6. (construct and appli rotat p̄k) 

θ̄k = s̄k−1ρk, ρ̄k = 
( 
(c̄k−1ρk)2 + θ2k+1 

) 1 
2 , 

c̄k = c̄k−1ρk/ρ̄k, s̄k = θk+1/ρ̄k, 
ζk = c̄k ζ̄k, ζ̄k+1 = −s̄kζ̄k. 

7. (updat h̄, x, h) 

h̄k = hk − (θ̄kρk/(ρk−1ρ̄k−1))h̄k−1, 
xk = xk−1 + (ζk/(ρkρ̄k))h̄k, 

hk+1 = vk+1 − (θk+1/ρk)hk. 

8. (appli rotat p̂k, pk) 

β́k = ĉkβ̈k, β̌k = −ŝkβ̈k, β̂k = ckβ́k, β̈k+1 = −skβ́k. 

9. (if k ≥ 2, construct and appli rotat p̃k−1) 

ρ̃k−1 = 
( 
ρ̇2k−1 + θ̄ 

2 
k 

) 1 
2 , 

c̃k−1 = ρ̇k−1/ρ̃k−1, s̃k−1 = θ̄k/ρ̃k−1, 

θ̃k = s̃k−1ρ̄k, ρ̇k = c̃k−1ρ̄k, 

β̃k−1 = c̃k−1β̇k−1 + s̃k−1β̂k, β̇k = −s̃k−1β̇k−1 + c̃k−1β̂k. 

10. (updat t̃k by forward substitution) 

τ̃k−1 = (ζk−1 − θ̃k−1τ̃k−2)/ρ̃k−1, τ̇k = (ζk − θ̃k τ̃k−1)/ρ̇k. 

11. (comput ‖r̄k‖) 

dk = dk−1 + β̌2k, γ = dk + (β̇k − τ̇k)2 + β̈2k+1, ‖r̄k‖ = 
√ 
γ. 

12. (comput ‖ātr̄k‖, ‖xk‖, estim ‖ā‖, cond(ā), and test for termination) 

‖ātr̄k‖ = |ζ̄k+1| (section 3.2), 
comput ‖xk‖ (section 3.3), 
estim σmax(bk), σmin(bk) and henc ‖ā‖, cond(ā) (section 3.4), 
termin if ani of the stop criterion be satisfi (section 3.6). 



2960 david chin-lung fong and michael saunder 

6. backward errors. for inconsist problem with uncertainti in A (but not 
b), let x be ani approxim solution. the normwis backward error for x measur 
the perturb to A that would make x an exact LS solution: 

(6.1) μ(x) ≡ min 
E 

‖e‖ such that (a+ e)t (a+ e)x = (a+ e)t b. 

It be know to be the small singular valu of a certain m× (n+m) matrix C; see 
waldén, karlson, and sun [26] and higham [10, pp. 392–393]: 

μ(x) = σmin(c), C ≡ 
[ 
A ‖r‖‖x‖ 

( 
I − rrt‖r‖2 

)] 
. 

sinc it be gener too expens to evalu μ(x), we need to find approximations. 

6.1. approxim backward error E1 and e2. In 1975, stewart [21] dis- 
cuss a particular backward error estim that we will call e1. let x̂ and r̂ = b−ax̂ 
be the exact LS solut and residual. stewart show that an approxim solu- 
tion x with residu r = b − Ax be the exact LS solut of the perturb problem 
min ‖b− (a+ e1)x‖, where E1 be the rank-on matrix 

(6.2) E1 = 
ext 

‖x‖2 , ‖e1‖ = 
‖e‖ 
‖x‖ , e ≡ r − r̂, 

with ‖r‖2 = ‖r̂‖2 + ‖e‖2. soon after, stewart [22] give a further import result 
that can be use within ani LS solver. the approxim x and a certain vector 
r̃ = b − (A + e2)x be the exact solut and residu of the perturb LS problem 
min ‖b− (a+ e2)x‖, where 

(6.3) E2 = −rr 
TA 

‖r‖2 , ‖e2‖ = 
‖atr‖ 
‖r‖ , r = b−ax. 

lsqr and lsmr both comput ‖e2‖ for each iter xk becaus the current ‖rk‖ 
and ‖atrk‖ can be accur estim at almost no cost. An add featur be that 
for both solvers, r̃ = b− (a+e2)xk = rk becaus e2xk = 0 (assum orthogon 
of vk). that is, xk and rk be theoret exact for the perturb LS problem 
(a+ e2)x ≈ b. 

stop rule S2 (section 3.6) requir ‖e2‖ ≤ atol‖a‖. henc the follow 
properti give lsmr an advantag over lsqr for stop early. 

theorem 6.1. ‖elsmr2 ‖ ≤ ‖elsqr2 ‖. 
proof. thi follow from ‖atrlsmrk ‖≤ ‖atrlsqrk ‖ and ‖rlsmrk ‖≥ ‖rlsqrk ‖. 
6.2. approxim optim backward error µ̃(x). variou author have de- 

rive express for a quantiti μ̃(x) that have prove to be a veri accur approx- 
imat to μ(x) in (6.1) when x be at least moder close to the exact solut 
x̂. grcar, saunders, and Su [8] and Su [24] show that μ̃(x) can be obtain from a 
full-rank LS problem a follows: 

(6.4) K = 

[ 
A 

‖r‖ 
‖x‖i 

] 
, v = 

[ 
r 

0 

] 
, min 

y 
‖ki − v‖, μ̃(x) = ‖ky‖/‖x‖, 



lsmr: AN iter algorithm for least squar 2961 

and they give the follow matlab script for comput the “economi size” spars 
QR factor K = QR and c ≡ qtv (for which ‖c‖ = ‖ky‖) and thenc μ̃(x): 

[m,n] = size(a); r = b - a*x; 

normx = norm(x); eta = norm(r)/normx; 

p = colamd(a); 

K = [a(:,p); eta*speye(n)]; 

v = [ r ; zeros(n,1)]; 

[c,r] = qr(k,v,0); mutild = norm(c)/normx; 

In our experi we use thi script to comput μ̃(xk) for each lsqr and lsmr 
iter xk. We refer to thi a the optim backward error for xk becaus it be provabl 
veri close to the true μ(xk) [7]. 

6.3. relat work. more precis stop rule have be deriv recent 
by arioli and gratton [1] and titley-peloquin and cowork (see [3, 13, 25]). the 
rule allow for uncertainti in both A and b and may prove to be use for lsqr, 
lsmr, and LS method in general. however, we would like to emphas that rule S2 
alreadi termin lsmr significantli sooner than lsqr on most of our inconsist 
test cases; see theorem 6.1, figur 7.2(left), and figur 7.3(top left). 

7. numer results. for test examples, we have drawn from the univers 
of florida spars matrix collect (davi [5]). We discu overdetermin system 
first and then some squar examples. 

7.1. least-squar problems. the lpnetlib group provid data for 138 lin- 
ear program problem of wide vari origin, structure, and size. the con- 
straint matrix and object function may be use to defin a spars LS problem 
min ‖ax−b‖. each exampl be download in matlab format, and a spars matrix 
A and dens vector b be extract from the data structur via A = (problem.a)’ 
and b = problem.c (where ’ denot transpose). 

five exampl have b = 0, and a further six give atb = 0. the remain 127 
problem have up to 243000 rows, 10000 columns, and 1.4m nonzero in A. diagon 
scale be appli to the column of 

[ 
A b 

] 
to give a scale problem min ‖ax − b‖ 

in which the column of A (and also b) have unit 2-norm. lsqr and lsmr be run 
on each of the 127 scale problem with stop toler atol = 10−8, gener 
sequenc of approxim solut {xlsqrk } and {xlsmrk }. the iter index k be 
omit below. the associ residu vector be denot by r without ambiguity, 
and x∗ be the solut to the LS problem, or the minimum-norm solut to the LS 
problem if the system be singular. 

As expected, the optim residu be nonzero in all cases. We record some gener 
observations: 

1. ‖rlsqr‖ be monoton by design. ‖rlsmr‖ seem to be monoton (no counter- 
exampl be found) and nearli a small a ‖rlsqr‖ for all iter on 
almost all problems. figur 7.1 show a typic exampl and a rare case. 

2. ‖x‖ be nearli monoton for lsqr and even more close monoton for 
lsmr. with ‖r‖ monoton for lsqr and essenti so for lsmr, ‖e1‖ 
in (6.2) be like to appear monoton for both solvers. although ‖e1‖ be not 
normal avail for each iteration, it provid a benchmark for ‖e2‖. 

3. ‖elsqr2 ‖ be not monotonic, but ‖elsmr2 ‖ appear monoton almost always. 
figur 7.2 show a typic case. the sole except for thi observ be 
also shown. 



2962 david chin-lung fong and michael saunder 

0 50 100 150 200 250 300 
0.4 

0.5 

0.6 

0.7 

0.8 

0.9 

1 

iter count 

||r 
|| 

name:lp greenbeb, dim:5598x2392, nnz:31070, id=631 




lsqr 
lsmr 

0 10 20 30 40 50 60 70 80 90 
0.988 

0.99 

0.992 

0.994 

0.996 

0.998 

1 

iter count 

||r 
|| 

name:lp woodw, dim:8418x1098, nnz:37487, id=702 




lsqr 
lsmr 

fig. 7.1. for most iterations, ‖rlsmr‖ appear to be monoton and nearli a small a 
‖rlsqr‖. left: A typic case (problem lp greenbeb). right: A rare case (problem lp woodw). 
lsmr’ residu norm be significantli larg than that of lsqr dure earli iterations. 

0 100 200 300 400 500 600 700 800 900 1000 
−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

E 
2) 

name:lp pilot ja, dim:2267x940, nnz:14977, id=657 




lsqr 
lsmr 

0 20 40 60 80 100 120 
−8 

−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

E 
2) 

name:lp sc205, dim:317x205, nnz:665, id=665 




lsqr 
lsmr 

fig. 7.2. for most iterations, ‖elsmr2 ‖ appear to be monoton (but ‖elsqr2 ‖ be not). left: 
A typic case (problem lp pilot ja). lsmr be like to termin much sooner than lsqr (see 
theorem 6.1). right: sole except (problem lp sc205) at iter 54–67. the except remain 
even if Uk and/or Vk be reorthogonalized. 

4. note that benbow [2] have give numer result compar a gener 
form of lsqr with applic of minr to the correspond normal 
equation. the curv in [2, figur 3] show the irregular and smooth behavior 
of lsqr and minres, respectively, in term of ‖atrk‖. those curv be 
effect a preview of the left-hand plot in figur 7.2 (where lsmr serf 
a our more reliabl implement of minres). 

5. ‖elsqr1 ‖ ≤ ‖elsqr2 ‖ often, but thi be not so for lsmr. some exampl 
be show in figur 7.3 along with μ̃(xk), the accur estim (6.4) of the 
optim backward error for each point xk. 

6. ‖elsmr2 ‖ ≈ μ̃(xlsmr) almost always. figur 7.4 show a typic exampl 
and a rare case. In all such “rare” cases, ‖elsmr1 ‖ ≈ μ̃(xlsmr) instead! 

7. μ̃(xlsqr) be not alway monotonic. μ̃(xlsmr) do seem to be monotonic. 
figur 7.5 give examples. 



lsmr: AN iter algorithm for least squar 2963 

0 200 400 600 800 1000 1200 1400 1600 
−8 

−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

B 
ac 

kw 
ar 

d 
E 

rr 
or 

fo 
r 

LS 
Q 

R 
) 

name:lp cre a, dim:7248x3516, nnz:18168, id=609 




E2 
E1 
optim 

0 100 200 300 400 500 600 
−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

B 
ac 

kw 
ar 

d 
E 

rr 
or 

fo 
r 

LS 
Q 

R 
) 

name:lp pilot, dim:4860x1441, nnz:44375, id=654 




E2 
E1 
optim 

0 200 400 600 800 1000 1200 1400 1600 
−8 

−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

B 
ac 

kw 
ar 

d 
E 

rr 
or 

fo 
r 

LS 
M 

R 
) 

name:lp cre a, dim:7248x3516, nnz:18168, id=609 




E2 
E1 
optim 

0 100 200 300 400 500 600 
−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

B 
ac 

kw 
ar 

d 
E 

rr 
or 

fo 
r 

LS 
M 

R 
) 

name:lp pilot, dim:4860x1441, nnz:44375, id=654 




E2 
E1 
optim 

fig. 7.3. ‖e1‖, ‖e2‖, and μ̃(xk) for lsqr (top figures) and lsmr (bottom figures). top left: 
A typic case. ‖elsqr1 ‖ be close to the optim backward error, but the comput ‖elsqr2 ‖ be 
not. top right: A rare case in which ‖elsqr2 ‖ be close to optimal. bottom left: ‖elsmr1 ‖ and 
‖elsmr2 ‖ be often both close to the optim backward error. bottom right: ‖elsmr1 ‖ be far from 
optimal, but the comput ‖elsmr2 ‖ be almost alway close (too close to distinguish in the plot!). 
problem lp cre a (left) and lp pilot (right). 

0 50 100 150 200 250 
−8 

−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

B 
ac 

kw 
ar 

d 
E 

rr 
or 

fo 
r 

LS 
M 

R 
) 

name:lp ken 11, dim:21349x14694, nnz:49058, id=638 




E2 
E1 
optim 

0 10 20 30 40 50 60 70 80 90 
−9 

−8 

−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

B 
ac 

kw 
ar 

d 
E 

rr 
or 

fo 
r 

LS 
M 

R 
) 

name:lp ship12l, dim:5533x1151, nnz:16276, id=688 




E2 
E1 
optim 

fig. 7.4. again, ‖elsmr2 ‖ ≈ μ̃(xlsmr) almost alway (the comput backward error esti- 
mate be essenti optimal). left: A typic case (problem lp ken 11). right: A rare case (problem 

lp ship12l). here, ‖elsmr1 ‖ ≈ μ̃(xlsmr)! 



2964 david chin-lung fong and michael saunder 

0 100 200 300 400 500 600 700 800 900 
−5 

−4.5 

−4 

−3.5 

−3 

−2.5 

−2 

−1.5 

−1 

−0.5 

0 

iter count 

lo 
g( 

O 
pt 

im 
al 

B 
ac 

kw 
ar 

d 
E 

rr 
or 

) 

name:lp maros, dim:1966x846, nnz:10137, id=642 




lsqr 
lsmr 

0 200 400 600 800 1000 1200 1400 1600 
−8 

−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

O 
pt 

im 
al 

B 
ac 

kw 
ar 

d 
E 

rr 
or 

) 

name:lp cre c, dim:6411x3068, nnz:15977, id=611 




lsqr 
lsmr 

fig. 7.5. μ̃(xlsmr) seem to be alway monotonic, but μ̃(xlsqr) be usual not. left: A 
typic case for both lsqr and lsmr (problem lp maros). right: A rare case for lsqr, typic 
for lsmr (problem lp cre c). 

0 100 200 300 400 500 600 
−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

O 
pt 

im 
al 

B 
ac 

kw 
ar 

d 
E 

rr 
or 

) 

name:lp pilot, dim:4860x1441, nnz:44375, id=654 




lsqr 
lsmr 

0 50 100 150 
−9 

−8 

−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

O 
pt 

im 
al 

B 
ac 

kw 
ar 

d 
E 

rr 
or 

) 

name:lp standgub, dim:1383x361, nnz:3338, id=693 




lsqr 
lsmr 

fig. 7.6. μ̃(xlsmr) ≤ μ̃(xlsqr) almost always. left: A typic case (problem lp pilot). 
right: A rare case (problem lp standgub). 

8. μ̃(xlsmr) ≤ μ̃(xlsqr) almost always. figur 7.6 give examples. 
9. the error ‖x∗ − xlsqr‖ and ‖x∗ − xlsmr‖ seem to decreas monotonically, 

with the lsqr error typic small than for lsmr. figur 7.7 give exam- 
ples. thi be one properti for which lsqr seem more desir (and it have 
be suggest [18] that for LS problems, lsqr could be termin when 
rule S2 would termin lsmr). 

7.2. squar systems. sinc lsqr and lsmr be applic to consist sys- 
tems, it be of interest to compar them on an unbias test set. We use the search 
facil of davi [5] to select a set of squar real linear system Ax = b. with 
index = ufget, the criterion 

id = find(index.nrow > 100000 & index.nrow < 200000 & ... 

index.nrow == index.ncol & index.isr == 1 & ... 

index.posdef == 0 & index.numerical_symmetri < 1); 

return a list of 42 examples. test isfield(ufget(id),’b’) left 26 case for 
which b be supplied. for each, diagon scale be first appli to the row of 



lsmr: AN iter algorithm for least squar 2965 

0 10 20 30 40 50 60 70 80 90 
−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

1 

2 

iter count 

lo 
g| 

|x 
k 

− 
x 

* | 

name:lp ship12l, dim:5533x1151, nnz:16276, id=688 




lsqr 
lsmr 

0 10 20 30 40 50 60 70 
−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

1 

iter count 

lo 
g| 

|x 
k 

− 
x 

* | 

name:lp pd 02, dim:7716x2953, nnz:16571, id=649 




lsqr 
lsmr 

fig. 7.7. the error ‖x∗ − xlsqr‖ and ‖x∗ − xlsmr‖ seem to decreas monotonically, with 
lsqr’ error small than for lsmr. left: A nonsingular LS system (problem lp ship12l). right: 
A singular system (problem lp pd 02). lsqr and lsmr both converg to the minimum-norm LS 
solution. 

[ 
A b 

] 
and then to it column to give a scale problem Ax = b in which the column 

of 
[ 
A b 

] 
have unit 2-norm. In spite of the scaling, most exampl requir more than 

n iter of lsqr or lsmr to reduc ‖rk‖ satisfactorili (rule S1 in section 3.6 
with atol = btol = 10−8). To simul good preconditioning, we chose two 
case that requir about n/5 and n/10 iterations. figur 7.8(left) show both solver 
reduc ‖rk‖ monoton but with plateau that be prolong for lsmr. with 
loos stop tolerances, lsqr could termin somewhat sooner. figur 7.8(right) 
show ‖atrk‖ for each solver. the plateau for lsmr correspond to lsqr gain 
ground with ‖rk‖, but fall significantli backward by the ‖atrk‖ measure. 

7.3. reorthogonalization. It be well know that krylov-subspac method can 
take arbitrarili mani iter becaus of loss of orthogonality. for the golub– 
kahan bidiagonalization, we have two set of vector Uk and vk. As an experiment, 
we implement the follow option in lsmr: 

1. No reorthogonalization. 
2. reorthogon Vk (that is, reorthogon vk with respect to vk−1). 
3. reorthogon Uk (that is, reorthogon uk with respect to uk−1). 
4. both 2 and 3. 

each option be test on all of the overdetermin test problem with few than 
16k nonzeros. figur 7.9 show an “easy” case in which all option converg equal 
well (converg befor signific loss of orthogonality), and an extrem case in 
which reorthogon make a larg difference. 

unexpectedly, option 2, 3, and 4 prove to be indistinguish in all cases. To 
look closer, we forc lsmr to take n iterations. option 2 (with Vk orthonorm 
to machin precis �) be found to be keep Uk orthonorm to at least O( 

√ 
�). 

option 3 (with Uk orthonormal) be not quit a effective, but it kept Vk orthonorm 
to at least O( 

√ 
�) up to the point where lsmr would termin when atol = 

√ 
�. 

note that for squar or rectangular A with exact arithmetic, lsmr be equival 
to minr on the normal equat (and henc to the conjugate-residu method [12] 
and gmre [20] on the same equation). reorthogon make the equival 
essenti true in practice. We now focu on reorthogon Vk but not uk. 



2966 david chin-lung fong and michael saunder 

0 0.5 1 1.5 2 2.5 

x 10 
4 

−9 

−8 

−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g| 

|r 
|| 

name:hamm.hcircuit, dim:105676x105676, nnz:513072, id=542 




lsqr 
lsmr 

0 0.5 1 1.5 2 2.5 

x 10 
4 

−12 

−10 

−8 

−6 

−4 

−2 

0 

iter count 

lo 
g| 

|A 
T 
r| 

| 

name:hamm.hcircuit, dim:105676x105676, nnz:513072, id=542 




lsqr 
lsmr 

0 2000 4000 6000 8000 10000 12000 
−9 

−8 

−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g| 

|r 
|| 

name:ibm eda.trans5, dim:116835x116835, nnz:749800, id=1324 




lsqr 
lsmr 

0 2000 4000 6000 8000 10000 12000 
−12 

−10 

−8 

−6 

−4 

−2 

0 

iter count 

lo 
g| 

|A 
T 
r| 

| 
name:ibm eda.trans5, dim:116835x116835, nnz:749800, id=1324 




lsqr 
lsmr 

fig. 7.8. lsqr and lsmr solv two squar nonsingular system Ax = b: problem 
hamm/hcircuit (top) and ibm eda/trans5 (bottom). left: log10 ‖rk‖ for both solvers, with pro- 
long plateau for lsmr. right: log10 ‖atrk‖ (prefer for lsmr). 

0 10 20 30 40 50 60 70 80 90 
−8 

−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

E 
2) 

name:lp ship12l, dim:5533x1151, nnz:16276, id=688 





noortho 

orthou 

orthov 

orthouv 

0 500 1000 1500 2000 2500 3000 
−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

E 
2) 

name:lpi gran, dim:2525x2658, nnz:20111, id=717 





noortho 

orthou 

orthov 

orthouv 

fig. 7.9. lsmr with and without reorthogon of Vk and/or uk. left: An easi case 
where all option perform similarli (problem lp ship12l). right: A help case (problem lp gran). 

other author have present numer result involv reorthogonalization. for 
example, on some randomli gener LS problem of increas condit number, 
hayami, yin, and ito [9] compar their ba-gmr method with an implement 



lsmr: AN iter algorithm for least squar 2967 

0 100 200 300 400 500 600 700 800 900 
−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

E 
2) 

name:lp maros, dim:1966x846, nnz:10137, id=642 





noortho 
restart5 
restart10 
restart50 
fullortho 

0 500 1000 1500 2000 2500 3000 3500 
−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

E 
2) 

name:lp cre c, dim:6411x3068, nnz:15977, id=611 





noortho 
restart5 
restart10 
restart50 
fullortho 

fig. 7.10. lsmr with reorthogon Vk and restarting. restart(�) with � = 5, 10, 50 be slow 
than standard lsmr with or without reorthogonalization. problem lp maro and lp cre c. 

0 50 100 150 200 250 300 350 400 450 
−7 

−6 

−5 

−4 

−3 

−2 

−1 

0 

iter count 

lo 
g( 

E 
2) 

name:lp fit1p, dim:1677x627, nnz:9868, id=625 





noortho 
local5 
local10 
local50 
fullortho 

0 200 400 600 800 1000 1200 1400 
−6 

−5 

−4 

−3 

−2 

−1 

0 

1 

iter count 

lo 
g( 

E 
2) 

name:lp bnl2, dim:4486x2324, nnz:14996, id=605 





noortho 
local5 
local10 
local50 
fullortho 

fig. 7.11. lsmr with local reorthogon of vk. local(�) with � = 5, 10, 50 illustr 
reduc iter a � increases. problem lp fit1p and lp bnl2. 

of cgl (equival to lsqr [16]) in which Vk be reorthogonalized, and find that 
the method requir essenti the same number of iterations. the precondition 
chosen for ba-gmr make that method equival to gmre on atax = atb. 
thus, gmre without reorthogon be see to converg essenti a well a 
cgl or lsqr with reorthogon of Vk (option 2 above). thi coincid with 
the analysi by paige, rozložńık, and strakoš [14], who conclud that mgs-gmre 
do not need reorthogon of the arnoldi vector vk. 

7.3.1. restarting. To conserv storage, a simpl approach be to restart the 
algorithm everi 
steps, a with gmres( 
) [20]. figur 7.10 show that restart 
lsmr even with full reorthogon (of vk) may lead to stagnation. In general, 
converg with restart be much slow than lsmr without reorthogonalization. 

7.3.2. local reorthogonalization. here we reorthogon each new vk with 
respect to the previou l vectors, where l be a specifi parameter. figur 7.11 show 
that l = 5 have littl effect, but partial speedup be achiev with l = 10 and 50 in the 
two chosen cases. there be evid of a use storage-tim tradeoff. the potenti 
speedup depend strongli on the comput cost of Av and atu. 



2968 david chin-lung fong and michael saunder 

7.3.3. partial reorthogonalization. larsen us partial reorthogon 
of both Vk and Uk within hi propack softwar [19] for comput a set of singular 
valu and vector for a spars rectangular matrix A. similar techniqu might prove 
help within lsmr. We leav thi for futur research. 

8. summary. We have present lsmr, an iter algorithm for squar or 
rectangular systems, along with detail of it implement and experiment result 
to suggest that it have advantag over the wide adopt lsqr algorithm. 

As in lsqr, theoret and practic stop criterion be provid for solv 
Ax = b and min ‖ax − b‖ with option tikhonov regularization, use estim of 
‖rk‖, ‖atrk‖, ‖xk‖, ‖a‖, and cond(a) that be cheapli computable. for LS problems, 
the stewart backward error estim ‖e2‖ (6.3) seem experiment to be veri close 
to the optim backward error μ(xk) at each lsmr iter xk (section 6.2). thi often 
allow lsmr to termin significantli sooner than lsqr. 

experi with full reorthogon have show that the golub–kahan 
process retain high accuraci if the column of either Vk or Uk be reorthogonalized. 
there be no need to reorthogon both. thi discoveri could be help for other 
us of the golub–kahan process. 

matlab, python, and fortran 90 implement of lsmr be avail from 
[11]. they all allow local reorthogon of vk. 

appendix A. proof of lemma 3.1. the effect of the rotat Pk and p̃k−1 
can be summar a 

r̃k = 

⎛⎜⎜⎜⎝ 
ρ̃1 θ̃2 

. . . 
. . . 

ρ̃k−1 θ̃k 
ρ̇k 

⎞⎟⎟⎟⎠ , 
( 

ck sk 
−sk ck 

)( 
β̈k 
0 

) 
= 

( 
β̂k 

β̈k+1 

) 
,( 

c̃k s̃k 
−s̃k c̃k 

)( 
ρ̇k−1 β̇k−1 
θ̄k ρ̄k β̂k 

) 
= 

( 
ρ̃k−1 θ̃k β̃k−1 
0 ρ̇k β̇k 

) 
, 

where β̈1 = β1, ρ̇1 = ρ̄1, β̇1 = β̂1 and where ck, sk be defin in section 2.6. 
We defin s(k) = s1 . . . sk and s̄ 

(k) = s̄1 . . . s̄k. then from (3.3) and (2.4) we have 

r̃tk t̃k = zk = 
( 
Ik 0 

) 
q̄k+1ek+1β̄1. expand thi and (3.1) give 

r̃tk t̃k = 

⎛⎜⎜⎜⎝ 
c̄1 

−s̄1c̄2 
... 

(−1)k+1s̄(k−1)c̄k 

⎞⎟⎟⎟⎠ β̄1, b̃k = 
( 
q̃k 

1 

) 
⎛⎜⎜⎜⎜⎜⎝ 

c1 
−s1c2 

... 
(−1)k+1s(k−1)ck 
(−1)k+2s(k) 

⎞⎟⎟⎟⎟⎟⎠ β1, 

and we see that 

τ̃1 = ρ̃ 
−1 
1 c̄1β̄1,(a.1) 

τ̃k−1 = ρ̃−1k−1((−1)ks̄(k−2)c̄k−1β̄1 − θ̃k−1τ̃k−2),(a.2) 
τ̇k = ρ̇ 

−1 
k ((−1)k+1s̄(k−1)c̄kβ̄1 − θ̃kτ̃k−1),(a.3) 

β̇1 = β̂1 = c1β1,(a.4) 

β̇k = −s̃k−1β̇k−1 + c̃k−1(−1)k−1s(k−1)ckβ1,(a.5) 
β̃k = c̃kβ̇k + s̃k(−1)ks(k)ck+1β1.(a.6) 



lsmr: AN iter algorithm for least squar 2969 

We want to show by induct that τ̃i = β̃i for all i. when i = 1, 

β̃1 = c̃1c1β1 − s̃1s1c2β1 = β1 
ρ̃1 

(c1ρ̄1 − θ̄2s1c2) = β1 
ρ̃1 

α1 
ρ1 

ρ21 
ρ̄1 

= 
β̄1 
ρ̃1 

ρ1 
ρ̄1 

= 
β̄1 
ρ̃1 

c̄1 = τ̃1, 

where the third equal follow from 

c1ρ̄1 − θ̄2s1c2 = c1ρ̄1 − θ̄2s1 c1α2 
ρ2 

= ρ̄1 − θ̄2s1α2 
ρ2 

= 
α1 
ρ1 

( 
ρ̄1 − 1 

ρ2 
θ̄2s1α2 

) 
, 

ρ̄1 − 1 
ρ2 

θ̄2s1α2 = ρ̄1 − 1 
ρ2 

(s̄1ρ2)θ2 = ρ̄1 − θ2 
ρ̄1 

θ2 = 
ρ̄21 − θ22 

ρ̄1 
= 

ρ21 + θ 
2 
2 − θ22 
ρ̄1 

. 

suppos τ̃k−1 = β̃k−1. We consid the express 

s(k−1)ckρ̄−1k c̄ 
2 
k−1ρ 

2 
kβ1 = 

c̄k−1ρk 
ρ̄k 

(s(k−1)ck)c̄k−1ρkβ1 

= c̄k 
θ2 · · · θkα1 
ρ1 · · · ρk 

ρ1 · · · ρk−1 
ρ̄1 · · · ρ̄k−1 ρkβ1 = c̄k 

θ2 
ρ̄1 

· · · θk 
ρ̄k−1 

β̄1 

= c̄ks̄1 · · · s̄k−1β̄1 = c̄ks̄(k−1)β̄1.(a.7) 

appli the induct hypothesi on τ̃k = ρ̃ 
−1 
k ((−1)k+1s̄(k−1)c̄kβ̄1 − θ̃k τ̃k−1) give 

τ̃k = ρ̃ 
−1 
k 

( 
(−1)k+1s̄(k−1)c̄kβ̄1 − θ̃k 

( 
c̃k−1β̇k−1 + s̃k−1(−1)ks(k−1)ckβ1 

)) 
= ρ̃−1k θ̃kc̃k−1β̇k−1 + (−1)k+1ρ̃−1k 

( 
s̄(k−1)c̄kβ̄1 − θ̃ks̃k−1s(k−1)ckβ1 

) 
= ρ̃−1k (ρ̄ks̃k−1)c̃k−1β̇k−1 + (−1)k+1ρ̃−1k s(k−1)β1 

( 
ρ̇k c̃k−1ck − θ̄k+1skck+1 

) 
= c̃ks̃k−1β̇k−1 + (−1)k+1s(k−1)β1 (c̃k c̃k−1ck − s̃kskck+1) 
= c̃k 

( 
−s̃k−1β̇k−1 + c̃k−1(−1)k+1s(k−1)ckβ1 

) 
+ s̃k(−1)k+1s(k)ck+1β1 

= c̃kβ̇k + s̃k(−1)k+1s(k)ck+1β1 = β̃k 

with the second equal obtain by the induct hypothesis, and the fourth from 

s̄(k−1)c̄kβ̄1 − θ̃ks̃k−1s(k−1)ckβ1 = s(k−1)ckρ̄−1k c̄2k−1ρ2kβ1 − (s̃k−1ρ̄k)s̃k−1s(k−1)ckβ1 
= s(k−1)β1 

ck 
ρ̄k 

( 
c̄2k−1ρ 

2 
k − s̃2k−1ρ̄2k 

) 
= s(k−1)β1 

( 
ρ̇k c̃k−1ck − θ̄k+1skck+1 

) 
, 

where the first equal follow from (a.7) and the last from 

c̄2k−1ρ 
2 
k − s̃2k−1ρ̄2k = 

( 
ρ̄2k − θ2k+1 

)− s̃2k−1ρ̄2k = ρ̄2k(1 − s̃2k−1)− θ2k+1 = ρ̄2kc̃2k−1 − θ2k+1, 
ck 
ρ̄k 

ρ̄2k c̃ 
2 
k−1 = ρ̄kc̃ 

2 
k−1ck = ρ̇kc̃k−1ck, 

ck 
ρ̄k 

θ2k+1 = 
θk+1 
ρ̄k 

θk+1ck = 
θk+1ρk+1 

ρ̄k 
skαk+1 

ck 
ρk+1 

= θ̄k+1skck+1. 



2970 david chin-lung fong and michael saunder 

therefor by induction, we know that τ̃i = β̃i for i = 1, 2, . . . . from (3.3), we see that 
at iter k, the first k − 1 element of b̃k and t̃k be equal. 

acknowledgments. We be grate to chri paig for hi help comment on 
reorthogon and other aspect of thi work. We be also grate to two refere 
for their extrem help and percept reviews. further thank go to martin van 
gijzen and mike botchev for their help with test lsmr on squar system aris 
from convection-diffus problems, to sou-cheng choi for her help comments, and 
to victor pereyra for propos that lsmr be use to termin lsqr if a small 
final error ‖x− xk‖ be important. 

refer 

[1] M. arioli and S. gratton, least-squar problems, normal equations, and stop cri- 
teria for the conjug gradient method, technic report ral-tr-2008-008, rutherford 
appleton laboratory, oxfordshire, uk, 2008. 

[2] S. J. benbow, solv gener least-squar problem with lsqr, siam J. matrix anal. 
appl., 21 (1999), pp. 166–177. 

[3] x.-w. chang, C. C. paige, and D. titley-peloquin, stop criterion for the iter 
solut of linear least squar problems, siam J. matrix anal. appl., 31 (2009), pp. 831– 
852. 

[4] s.-c. choi, C. C. paige, and M. A. saunders, minres-qlp: A krylov subspac method 
for indefinit or singular symmetr systems, siam J. sci. comput., to appear. 

[5] T. A. davis, univers of florida spars matrix collection, http://www.cise.ufl.edu/ 
research/sparse/matrices. 

[6] G. H. golub and W. kahan, calcul the singular valu and pseudo-invers of a matrix, 
J. soc. indust. appl. math. ser. B numer. anal., 2 (1965), pp. 205–224. 

[7] S. gratton, P. jiránek, and D. titley-peloquin, On the accuraci of the karlson-waldén 
estim of the backward error for linear least squar problems, cerfac technic 
report tr/pa/11/19, cerfacs, toulouse, france, 2011. 

[8] J. F. grcar, M. A. saunders, and Z. su, estim of optim backward perturb for 
linear least squar problems, report sol 2007-1, depart of manag scienc 
and engineering, stanford university, stanford, ca, 2007. 

[9] K. hayami, j.-f. yin, and T. ito, gmre method for least squar problems, siam J. 
matrix anal. appl., 31 (2010), pp. 2400–2430. 

[10] N. J. higham, accuraci and stabil of numer algorithms, 2nd ed., siam, philadelphia, 
2002. 

[11] lsmr softwar for linear system and least squares, http://www.stanford.edu/group/ 
sol/software.html. 

[12] D. G. luenberger, the conjug residu method for constrain minim problems, 
siam J. numer. anal., 7 (1970), pp. 390–398. 

[13] P. jiránek and D. titley-peloquin, estim the backward error in lsqr, siam J. 
matrix anal. appl., 31 (2010), pp. 2055–2074. 

[14] C. C. paige, M. rozložńık, and Z. strakoš, modifi gram–schmidt (mgs), least squares, 
and backward stabil of mgs-gmres, siam J. matrix anal. appl., 28 (2006), pp. 264– 
284. 

[15] C. C. paig and M. A. saunders, solut of spars indefinit system of linear equations, 
siam J. numer. anal., 12 (1975), pp. 617–629. 

[16] C. C. paig and M. A. saunders, lsqr: An algorithm for spars linear equat and spars 
least squares, acm trans. math. software, 8 (1982), pp. 43–71. 

[17] C. C. paig and M. A. saunders, algorithm 583; lsqr: spars linear equat and least- 
squar problems, acm trans. math. software, 8 (1982), pp. 195–209. 

[18] V. pereyra, privat communication, 2010. 
[19] propack softwar for svd of spars matrices, http://soi.stanford.edu/˜rmunk/ 

propack/. 
[20] Y. saad and M. H. schultz, gmres: A gener minimum residu algorithm for solv 

nonsymmetr linear systems, siam J. sci. statist. comput., 7 (1986), pp. 856–869. 
[21] G. W. stewart, An invers perturb theorem for the linear least squar problem, 

signum newsletter, 10 (1975), pp. 39–40. 



lsmr: AN iter algorithm for least squar 2971 

[22] G. W. stewart, research, develop and linpack, in mathemat softwar iii, J. R. 
rice, ed., academ press, new york, 1977, pp. 1–14. 

[23] G. W. stewart, the qlp approxim to the singular valu decomposition, siam J. sci. 
comput., 20 (1999), pp. 1336–1348. 

[24] Z. su, comput method for least squar problem and clinic trials, ph.d. thesis, 
sccm, stanford university, stanford, ca, 2005. 

[25] D. titley-peloquin, backward perturb analysi of least squar problems, ph.d. the- 
sis, school of comput science, mcgill university, montreal, qc, canada, 2010. 

[26] B. waldén, R. karlson, and j.-g. sun, optim backward perturb bound for the linear 
least squar problem, numer. linear algebra appl., 2 (1995), pp. 271–286. 
















<< 
/ascii85encodepag fals 
/allowtranspar fals 
/autopositionepsfil true 
/autorotatepag /none 
/bind /left 
/calgrayprofil (dot gain 20%) 
/calrgbprofil (srgb iec61966-2.1) 
/calcmykprofil (u.s. web coat \050swop\051 v2) 
/srgbprofil (srgb iec61966-2.1) 
/cannotembedfontpolici /error 
/compatibilitylevel 1.4 
/compressobject /tag 
/compresspag true 
/convertimagestoindex true 
/passthroughjpegimag true 
/createjobticket fals 
/defaultrenderingint /default 
/detectblend true 
/detectcurv 0.0000 
/colorconversionstrategi /cmyk 
/dothumbnail fals 
/embedallfont true 
/embedopentyp fals 
/parseiccprofilesincom true 
/embedjobopt true 
/dscreportinglevel 0 
/emitdscwarn fals 
/endpag -1 
/imagememori 1048576 
/lockdistillerparam fals 
/maxsubsetpct 100 
/optim true 
/opm 1 
/parsedsccom true 
/parsedsccommentsfordocinfo true 
/preservecopypag true 
/preservedicmykvalu true 
/preserveepsinfo true 
/preserveflat true 
/preservehalftoneinfo fals 
/preserveopicom true 
/preserveoverprintset true 
/startpag 1 
/subsetfont true 
/transferfunctioninfo /appli 
/ucrandbginfo /preserv 
/useprologu fals 
/colorsettingsfil () 
/alwaysemb [ true 
] 
/neveremb [ true 
] 
/antialiascolorimag fals 
/cropcolorimag true 
/colorimageminresolut 300 
/colorimageminresolutionpolici /ok 
/downsamplecolorimag true 
/colorimagedownsampletyp /bicub 
/colorimageresolut 300 
/colorimagedepth -1 
/colorimagemindownsampledepth 1 
/colorimagedownsamplethreshold 1.50000 
/encodecolorimag true 
/colorimagefilt /dctencod 
/autofiltercolorimag true 
/colorimageautofilterstrategi /jpeg 
/coloracsimagedict << 
/qfactor 0.15 
/hsampl [1 1 1 1] /vsampl [1 1 1 1] 
>> 
/colorimagedict << 
/qfactor 0.15 
/hsampl [1 1 1 1] /vsampl [1 1 1 1] 
>> 
/jpeg2000coloracsimagedict << 
/tilewidth 256 
/tileheight 256 
/qualiti 30 
>> 
/jpeg2000colorimagedict << 
/tilewidth 256 
/tileheight 256 
/qualiti 30 
>> 
/antialiasgrayimag fals 
/cropgrayimag true 
/grayimageminresolut 300 
/grayimageminresolutionpolici /ok 
/downsamplegrayimag true 
/grayimagedownsampletyp /bicub 
/grayimageresolut 300 
/grayimagedepth -1 
/grayimagemindownsampledepth 2 
/grayimagedownsamplethreshold 1.50000 
/encodegrayimag true 
/grayimagefilt /dctencod 
/autofiltergrayimag true 
/grayimageautofilterstrategi /jpeg 
/grayacsimagedict << 
/qfactor 0.15 
/hsampl [1 1 1 1] /vsampl [1 1 1 1] 
>> 
/grayimagedict << 
/qfactor 0.15 
/hsampl [1 1 1 1] /vsampl [1 1 1 1] 
>> 
/jpeg2000grayacsimagedict << 
/tilewidth 256 
/tileheight 256 
/qualiti 30 
>> 
/jpeg2000grayimagedict << 
/tilewidth 256 
/tileheight 256 
/qualiti 30 
>> 
/antialiasmonoimag fals 
/cropmonoimag true 
/monoimageminresolut 1200 
/monoimageminresolutionpolici /ok 
/downsamplemonoimag true 
/monoimagedownsampletyp /bicub 
/monoimageresolut 1200 
/monoimagedepth -1 
/monoimagedownsamplethreshold 1.50000 
/encodemonoimag true 
/monoimagefilt /ccittfaxencod 
/monoimagedict << 
/K -1 
>> 
/allowpsxobject fals 
/checkcompli [ 
/none 
] 
/pdfx1acheck fals 
/pdfx3check fals 
/pdfxcompliantpdfonli fals 
/pdfxnotrimboxerror true 
/pdfxtrimboxtomediaboxoffset [ 
0.00000 
0.00000 
0.00000 
0.00000 
] 
/pdfxsetbleedboxtomediabox true 
/pdfxbleedboxtotrimboxoffset [ 
0.00000 
0.00000 
0.00000 
0.00000 
] 
/pdfxoutputintentprofil () 
/pdfxoutputconditionidentifi () 
/pdfxoutputcondit () 
/pdfxregistrynam () 
/pdfxtrap /fals 

/createjdffil fals 
/descript << 
/ara <feff06270633062a062e062f0645002006470630064700200627064406250639062f0627062f0627062a002006440625064606340627062100200648062b062706260642002000410064006f00620065002000500044004600200645062a064806270641064206290020064406440637062806270639062900200641064a00200627064406450637062706280639002006300627062a0020062f0631062c0627062a002006270644062c0648062f0629002006270644063906270644064a0629061b0020064a06450643064600200641062a062d00200648062b0627062606420020005000440046002006270644064506460634062306290020062806270633062a062e062f062706450020004100630072006f0062006100740020064800410064006f006200650020005200650061006400650072002006250635062f0627063100200035002e0030002006480627064406250635062f062706310627062a0020062706440623062d062f062b002e0635062f0627063100200035002e0030002006480627064406250635062f062706310627062a0020062706440623062d062f062b002e> 
/bgr <feff04180437043f043e043b043704320430043904420435002004420435043704380020043d0430044104420440043e0439043a0438002c00200437043000200434043000200441044a0437043404300432043004420435002000410064006f00620065002000500044004600200434043e043a0443043c0435043d04420438002c0020043c0430043a04410438043c0430043b043d043e0020043f044004380433043e04340435043d04380020043704300020043204380441043e043a043e043a0430044704350441044204320435043d0020043f04350447043004420020043704300020043f044004350434043f0435044704300442043d04300020043f043e04340433043e0442043e0432043a0430002e002000200421044a04370434043004340435043d043804420435002000500044004600200434043e043a0443043c0435043d044204380020043c043e0433043004420020043404300020044104350020043e0442043204300440044f0442002004410020004100630072006f00620061007400200438002000410064006f00620065002000520065006100640065007200200035002e00300020043800200441043b0435043404320430044904380020043204350440044104380438002e> 
/ch <feff4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e9ad88d2891cf76845370524d53705237300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002> 
/cht <feff4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc9ad854c18cea76845370524d5370523786557406300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002> 
/cze <feff005400610074006f0020006e006100730074006100760065006e00ed00200070006f0075017e0069006a007400650020006b0020007600790074007600e101590065006e00ed00200064006f006b0075006d0065006e0074016f002000410064006f006200650020005000440046002c0020006b00740065007200e90020007300650020006e0065006a006c00e90070006500200068006f006400ed002000700072006f0020006b00760061006c00690074006e00ed0020007400690073006b00200061002000700072006500700072006500730073002e002000200056007900740076006f01590065006e00e900200064006f006b0075006d0065006e007400790020005000440046002000620075006400650020006d006f017e006e00e90020006f007400650076015900ed007400200076002000700072006f006700720061006d0065006300680020004100630072006f00620061007400200061002000410064006f00620065002000520065006100640065007200200035002e0030002000610020006e006f0076011b006a016100ed00630068002e> 
/dan <feff004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000620065006400730074002000650067006e006500720020007300690067002000740069006c002000700072006500700072006500730073002d007500640073006b007200690076006e0069006e00670020006100660020006800f8006a0020006b00760061006c0069007400650074002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e> 
/deu <feff00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200076006f006e002000640065006e0065006e002000530069006500200068006f006300680077006500720074006900670065002000500072006500700072006500730073002d0044007200750063006b0065002000650072007a0065007500670065006e0020006d00f60063006800740065006e002e002000450072007300740065006c006c007400650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000410064006f00620065002000520065006100640065007200200035002e00300020006f0064006500720020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e> 
/esp <feff005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f00730020005000440046002000640065002000410064006f0062006500200061006400650063007500610064006f00730020007000610072006100200069006d0070007200650073006900f3006e0020007000720065002d0065006400690074006f007200690061006c00200064006500200061006c00740061002000630061006c0069006400610064002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e> 
/eti <feff004b00610073007500740061006700650020006e0065006900640020007300e4007400740065006900640020006b00760061006c006900740065006500740073006500200074007200fc006b006900650065006c007300650020007000720069006e00740069006d0069007300650020006a0061006f006b007300200073006f00620069006c0069006b0065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740069006400650020006c006f006f006d006900730065006b0073002e00200020004c006f006f0064007500640020005000440046002d0064006f006b0075006d0065006e00740065002000730061006100740065002000610076006100640061002000700072006f006700720061006d006d006900640065006700610020004100630072006f0062006100740020006e0069006e0067002000410064006f00620065002000520065006100640065007200200035002e00300020006a00610020007500750065006d006100740065002000760065007200730069006f006f006e00690064006500670061002e000d000a> 
/fra <feff005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f00620065002000500044004600200070006f0075007200200075006e00650020007100750061006c0069007400e90020006400270069006d007000720065007300730069006f006e00200070007200e9007000720065007300730065002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e> 
/gre <feff03a703c103b703c303b903bc03bf03c003bf03b903ae03c303c403b5002003b103c503c403ad03c2002003c403b903c2002003c103c503b803bc03af03c303b503b903c2002003b303b903b1002003bd03b1002003b403b703bc03b903bf03c503c103b303ae03c303b503c403b5002003ad03b303b303c103b103c603b1002000410064006f006200650020005000440046002003c003bf03c5002003b503af03bd03b103b9002003ba03b103c42019002003b503be03bf03c703ae03bd002003ba03b103c403ac03bb03bb03b703bb03b1002003b303b903b1002003c003c103bf002d03b503ba03c403c503c003c903c403b903ba03ad03c2002003b503c103b303b103c303af03b503c2002003c503c803b703bb03ae03c2002003c003bf03b903cc03c403b703c403b103c2002e0020002003a403b10020005000440046002003ad03b303b303c103b103c603b1002003c003bf03c5002003ad03c703b503c403b5002003b403b703bc03b903bf03c503c103b303ae03c303b503b9002003bc03c003bf03c103bf03cd03bd002003bd03b1002003b103bd03bf03b903c703c403bf03cd03bd002003bc03b5002003c403bf0020004100630072006f006200610074002c002003c403bf002000410064006f00620065002000520065006100640065007200200035002e0030002003ba03b103b9002003bc03b503c403b103b303b503bd03ad03c303c403b503c103b503c2002003b503ba03b403cc03c303b503b903c2002e> 
/heb <feff05d405e905ea05de05e905d5002005d105d405d205d305e805d505ea002005d005dc05d4002005db05d305d9002005dc05d905e605d505e8002005de05e105de05db05d9002000410064006f006200650020005000440046002005d405de05d505ea05d005de05d905dd002005dc05d405d305e405e105ea002005e705d305dd002d05d305e405d505e1002005d005d905db05d505ea05d905ea002e002005de05e105de05db05d90020005000440046002005e905e005d505e605e805d5002005e005d905ea05e005d905dd002005dc05e405ea05d905d705d4002005d105d005de05e605e205d505ea0020004100630072006f006200610074002005d5002d00410064006f00620065002000520065006100640065007200200035002e0030002005d505d205e805e105d005d505ea002005de05ea05e705d305de05d505ea002005d905d505ea05e8002e05d005de05d905dd002005dc002d005000440046002f0058002d0033002c002005e205d905d905e005d5002005d105de05d305e805d905da002005dc05de05e905ea05de05e9002005e905dc0020004100630072006f006200610074002e002005de05e105de05db05d90020005000440046002005e905e005d505e605e805d5002005e005d905ea05e005d905dd002005dc05e405ea05d905d705d4002005d105d005de05e605e205d505ea0020004100630072006f006200610074002005d5002d00410064006f00620065002000520065006100640065007200200035002e0030002005d505d205e805e105d005d505ea002005de05ea05e705d305de05d505ea002005d905d505ea05e8002e> 
/hrv (za stvaranj adob pdf dokumenata najpogodnijih za visokokvalitetni ispi prije tiskanja koristit ove postavke. stvoreni pdf dokumenti mogu se otvor acrobat i adob reader 5.0 i kasnijim verzijama.) 
/hun <feff004b0069007600e1006c00f30020006d0069006e0151007300e9006701710020006e0079006f006d00640061006900200065006c0151006b00e90073007a00ed007401510020006e0079006f006d00740061007400e100730068006f007a0020006c006500670069006e006b00e1006200620020006d0065006700660065006c0065006c0151002000410064006f00620065002000500044004600200064006f006b0075006d0065006e00740075006d006f006b0061007400200065007a0065006b006b0065006c0020006100200062006500e1006c006c00ed007400e10073006f006b006b0061006c0020006b00e90073007a00ed0074006800650074002e0020002000410020006c00e90074007200650068006f007a006f00740074002000500044004600200064006f006b0075006d0065006e00740075006d006f006b00200061007a0020004100630072006f006200610074002000e9007300200061007a002000410064006f00620065002000520065006100640065007200200035002e0030002c0020007600610067007900200061007a002000610074007400f3006c0020006b00e9007301510062006200690020007600650072007a006900f3006b006b0061006c0020006e00790069007400680061007400f3006b0020006d00650067002e> 
/ita <feff005500740069006c0069007a007a006100720065002000710075006500730074006500200069006d0070006f007300740061007a0069006f006e00690020007000650072002000630072006500610072006500200064006f00630075006d0065006e00740069002000410064006f00620065002000500044004600200070006900f900200061006400610074007400690020006100200075006e00610020007000720065007300740061006d0070006100200064006900200061006c007400610020007100750061006c0069007400e0002e0020004900200064006f00630075006d0065006e007400690020005000440046002000630072006500610074006900200070006f00730073006f006e006f0020006500730073006500720065002000610070006500720074006900200063006f006e0020004100630072006f00620061007400200065002000410064006f00620065002000520065006100640065007200200035002e003000200065002000760065007200730069006f006e006900200073007500630063006500730073006900760065002e> 
/jpn <feff9ad854c18cea306a30d730ea30d730ec30b951fa529b7528002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a306b306f30d530a930f330c8306e57cb30818fbc307f304c5fc59808306730593002> 
/kor <feffc7740020c124c815c7440020c0acc6a9d558c5ec0020ace0d488c9c80020c2dcd5d80020c778c1c4c5d00020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e> 
/lth <feff004e006100750064006f006b0069007400650020016100690075006f007300200070006100720061006d006500740072007500730020006e006f0072011700640061006d00690020006b0075007200740069002000410064006f00620065002000500044004600200064006f006b0075006d0065006e007400750073002c0020006b00750072006900650020006c0061006200690061007500730069006100690020007000720069007400610069006b007900740069002000610075006b01610074006f00730020006b006f006b007900620117007300200070006100720065006e006700740069006e00690061006d00200073007000610075007300640069006e0069006d00750069002e0020002000530075006b0075007200740069002000500044004600200064006f006b0075006d0065006e007400610069002000670061006c006900200062016b007400690020006100740069006400610072006f006d00690020004100630072006f006200610074002000690072002000410064006f00620065002000520065006100640065007200200035002e0030002000610072002000760117006c00650073006e0117006d00690073002000760065007200730069006a006f006d00690073002e> 
/lvi <feff0049007a006d0061006e0074006f006a00690065007400200161006f00730020006900650073007400610074012b006a0075006d00750073002c0020006c0061006900200076006500690064006f00740075002000410064006f00620065002000500044004600200064006f006b0075006d0065006e007400750073002c0020006b006100730020006900720020012b00700061016100690020007000690065006d01130072006f00740069002000610075006700730074006100730020006b00760061006c0069007401010074006500730020007000690072006d007300690065007300700069006501610061006e006100730020006400720075006b00610069002e00200049007a0076006500690064006f006a006900650074002000500044004600200064006f006b0075006d0065006e007400750073002c0020006b006f002000760061007200200061007400760113007200740020006100720020004100630072006f00620061007400200075006e002000410064006f00620065002000520065006100640065007200200035002e0030002c0020006b0101002000610072012b00200074006f0020006a00610075006e0101006b0101006d002000760065007200730069006a0101006d002e> 
/nld (gebruik deze instellingen om adob pdf-documenten te maken die zijn geoptimaliseerd voor prepress-afdrukken van hoge kwaliteit. De gemaakt pdf-documenten kunnen worden geopend met acrobat en adob reader 5.0 en hoger.) 
/nor <feff004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d00200065007200200062006500730074002000650067006e0065007400200066006f00720020006600f80072007400720079006b006b0073007500740073006b00720069006600740020006100760020006800f800790020006b00760061006c0069007400650074002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002000730065006e006500720065002e> 
/pol <feff0055007300740061007700690065006e0069006100200064006f002000740077006f0072007a0065006e0069006100200064006f006b0075006d0065006e007400f300770020005000440046002000700072007a0065007a006e00610063007a006f006e00790063006800200064006f002000770079006400720075006b00f30077002000770020007700790073006f006b00690065006a0020006a0061006b006f015b00630069002e002000200044006f006b0075006d0065006e0074007900200050004400460020006d006f017c006e00610020006f007400770069006500720061010700200077002000700072006f006700720061006d006900650020004100630072006f00620061007400200069002000410064006f00620065002000520065006100640065007200200035002e0030002000690020006e006f00770073007a0079006d002e> 
/ptb <feff005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f0062006500200050004400460020006d00610069007300200061006400650071007500610064006f00730020007000610072006100200070007200e9002d0069006d0070007200650073007300f50065007300200064006500200061006c007400610020007100750061006c00690064006100640065002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e> 
/rum <feff005500740069006c0069007a00610163006900200061006300650073007400650020007300650074010300720069002000700065006e007400720075002000610020006300720065006100200064006f00630075006d0065006e00740065002000410064006f006200650020005000440046002000610064006500630076006100740065002000700065006e0074007200750020007400690070010300720069007200650061002000700072006500700072006500730073002000640065002000630061006c006900740061007400650020007300750070006500720069006f006100720103002e002000200044006f00630075006d0065006e00740065006c00650020005000440046002000630072006500610074006500200070006f00740020006600690020006400650073006300680069007300650020006300750020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e00300020015f00690020007600650072007300690075006e0069006c006500200075006c0074006500720069006f006100720065002e> 
/ru <feff04180441043f043e043b044c04370443043904420435002004340430043d043d044b04350020043d0430044104420440043e0439043a043800200434043b044f00200441043e043704340430043d0438044f00200434043e043a0443043c0435043d0442043e0432002000410064006f006200650020005000440046002c0020043c0430043a04410438043c0430043b044c043d043e0020043f043e04340445043e0434044f04490438044500200434043b044f00200432044b0441043e043a043e043a0430044704350441044204320435043d043d043e0433043e00200434043e043f0435044704300442043d043e0433043e00200432044b0432043e04340430002e002000200421043e043704340430043d043d044b04350020005000440046002d0434043e043a0443043c0435043d0442044b0020043c043e0436043d043e0020043e0442043a0440044b043204300442044c002004410020043f043e043c043e0449044c044e0020004100630072006f00620061007400200438002000410064006f00620065002000520065006100640065007200200035002e00300020043800200431043e043b043504350020043f043e04370434043d043804450020043204350440044104380439002e> 
/ski <feff0054006900650074006f0020006e006100730074006100760065006e0069006100200070006f0075017e0069007400650020006e00610020007600790074007600e100720061006e0069006500200064006f006b0075006d0065006e0074006f0076002000410064006f006200650020005000440046002c0020006b0074006f007200e90020007300610020006e0061006a006c0065007001610069006500200068006f0064006900610020006e00610020006b00760061006c00690074006e00fa00200074006c0061010d00200061002000700072006500700072006500730073002e00200056007900740076006f00720065006e00e900200064006f006b0075006d0065006e007400790020005000440046002000620075006400650020006d006f017e006e00e90020006f00740076006f00720069016500200076002000700072006f006700720061006d006f006300680020004100630072006f00620061007400200061002000410064006f00620065002000520065006100640065007200200035002e0030002000610020006e006f0076016100ed00630068002e> 
/slv <feff005400650020006e006100730074006100760069007400760065002000750070006f0072006100620069007400650020007a00610020007500730074007600610072006a0061006e006a006500200064006f006b0075006d0065006e0074006f0076002000410064006f006200650020005000440046002c0020006b006900200073006f0020006e0061006a007000720069006d00650072006e0065006a016100690020007a00610020006b0061006b006f0076006f00730074006e006f0020007400690073006b0061006e006a00650020007300200070007200690070007200610076006f0020006e00610020007400690073006b002e00200020005500730074007600610072006a0065006e006500200064006f006b0075006d0065006e0074006500200050004400460020006a00650020006d006f0067006f010d00650020006f0064007000720065007400690020007a0020004100630072006f00620061007400200069006e002000410064006f00620065002000520065006100640065007200200035002e003000200069006e0020006e006f00760065006a01610069006d002e> 
/suo <feff004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f00740020006c00e400680069006e006e00e4002000760061006100740069007600610061006e0020007000610069006e006100740075006b00730065006e002000760061006c006d0069007300740065006c00750074007900f6006800f6006e00200073006f00700069007600690061002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e> 
/sve <feff0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d002000e400720020006c00e4006d0070006c0069006700610020006600f60072002000700072006500700072006500730073002d007500740073006b00720069006600740020006d006500640020006800f600670020006b00760061006c0069007400650074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e> 
/tur <feff005900fc006b00730065006b0020006b0061006c006900740065006c0069002000f6006e002000790061007a006401310072006d00610020006200610073006b013100730131006e006100200065006e0020006900790069002000750079006100620069006c006500630065006b002000410064006f006200650020005000440046002000620065006c00670065006c0065007200690020006f006c0075015f007400750072006d0061006b0020006900e70069006e00200062007500200061007900610072006c0061007201310020006b0075006c006c0061006e0131006e002e00200020004f006c0075015f0074007500720075006c0061006e0020005000440046002000620065006c00670065006c0065007200690020004100630072006f006200610074002000760065002000410064006f00620065002000520065006100640065007200200035002e003000200076006500200073006f006e0072006100730131006e00640061006b00690020007300fc007200fc006d006c00650072006c00650020006100e70131006c006100620069006c00690072002e> 
/ukr <feff04120438043a043e0440043804410442043e043204430439044204350020044604560020043f043004400430043c043504420440043800200434043b044f0020044104420432043e04400435043d043d044f00200434043e043a0443043c0435043d044204560432002000410064006f006200650020005000440046002c0020044f043a04560020043d04300439043a04400430044904350020043f045604340445043e0434044f0442044c00200434043b044f0020043204380441043e043a043e044f043a04560441043d043e0433043e0020043f0435044004350434043404400443043a043e0432043e0433043e0020043404400443043a0443002e00200020042104420432043e04400435043d045600200434043e043a0443043c0435043d0442043800200050004400460020043c043e0436043d04300020043204560434043a0440043804420438002004430020004100630072006f006200610074002004420430002000410064006f00620065002000520065006100640065007200200035002e0030002004300431043e0020043f04560437043d04560448043e04570020043204350440044104560457002e> 
/enu (use these set to creat adob pdf document best suit for high-qual prepress printing. creat pdf document can be open with acrobat and adob reader 5.0 and later.) 
>> 
/namespac [ 
(adobe) 
(common) 
(1.0) 
] 
/othernamespac [ 
<< 
/asreaderspread fals 
/cropimagestofram true 
/errorcontrol /warnandcontinu 
/flattenerignorespreadoverrid fals 
/includeguidesgrid fals 
/includenonprint fals 
/includeslug fals 
/namespac [ 
(adobe) 
(indesign) 
(4.0) 
] 
/omitplacedbitmap fals 
/omitplacedep fals 
/omitplacedpdf fals 
/simulateoverprint /legaci 
>> 
<< 
/addbleedmark fals 
/addcolorbar fals 
/addcropmark fals 
/addpageinfo fals 
/addregmark fals 
/convertcolor /converttocmyk 
/destinationprofilenam () 
/destinationprofileselector /documentcmyk 
/downsample16bitimag true 
/flattenerpreset << 
/presetselector /mediumresolut 
>> 
/formel fals 
/generatestructur fals 
/includebookmark fals 
/includehyperlink fals 
/includeinteract fals 
/includelay fals 
/includeprofil fals 
/multimediahandl /useobjectset 
/namespac [ 
(adobe) 
(creativesuite) 
(2.0) 
] 
/pdfxoutputintentprofileselector /documentcmyk 
/preserveedit true 
/untaggedcmykhandl /leaveuntag 
/untaggedrgbhandl /usedocumentprofil 
/usedocumentble fals 
>> 
] 
>> setdistillerparam 
<< 
/hwresolut [2400 2400] 
/pages [612.000 792.000] 
>> setpagedevic 

