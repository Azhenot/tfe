









































(cross-)brows fingerprint via OS and 
hardwar level featur 

yinzhi cao 
lehigh univers 

yinzhi.cao@lehigh.edu 

song Li 
lehigh univers 
sol315@lehigh.edu 

erik wijmans† 
washington univers in st. loui 

erikwijmans@wustl.edu 

abstract—in thi paper, we propos a browser fingerprint 
techniqu that can track user not onli within a singl browser 
but also across differ browser on the same machine. specif- 
ically, our approach util mani novel OS and hardwar level 
features, such a those from graphic cards, cpu, and instal 
write scripts. We extract these featur by ask browser 
to perform task that reli on correspond OS and hardwar 
functionalities. 

our evalu show that our approach can success 
identifi 99.24% of user a oppos to 90.84% for state of the 
art on single-brows fingerprint against the same dataset. 
further, our approach can achiev high uniqu rate than 
the onli cross-brows approach in the literatur with similar 
stability. 

I. introduct 

web track be a debat techniqu use to rememb 
and recogn past websit visitors. On the one hand, web 
track can authent users—and particularli a combina- 
tion of differ web track techniqu can be use for multi- 
factor authent to strengthen security. On the other hand, 
web track can also be use to deliv person service— 
if the servic be undesirable, e.g., some unwanted, target ads, 
such track be a violat of privacy. No matter whether we 
like web track or whether it be use legitim in the 
current web, more than 90% of alexa top 500 websit [39] 
adopt web tracking, and it have drawn much attent from 
gener public and medium [6]. 

web track have be evolv quickly. the first- 
gener track techniqu adopt stateful, server-set iden- 
tifiers, such a cooki and evercooki [21]. after that, 
the second-gener track techniqu call fingerprint- 
ing emerges, move from state identifi to stateless— 
i.e., instead of set a new identifier, the second-gener 
techniqu explor stateless identifi like plug-in version 
and user agent that alreadi exist in browsers. the second- 
gener techniqu be often use togeth with the first to 

†the author contribut to the paper when he be a reu student at lehigh 
university. 

restor lose cookies. both first and second gener track 
be constrain in a singl browser, and nowaday peopl 
be develop third-gener track techniqu that tri 
to achiev cross-devic track [16]. 

the focu of the paper be a 2.5-gener techniqu in 
between the second and the third, which can fingerprint a 
user not onli in the same browser but also across differ 
browser on the same machine. the practic of use multipl 
browser be common and promot by us-cert [42] and 
other technic peopl [12]: accord to our survey,1 70% 
of studi user have instal and regularli use at least two 
browser on the same computer. 

the propos 2.5-gener technique, from the posit 
side, can be use a part of strong multi-factor user au- 
thentic even across browsers. from anoth angle, just 
a mani exist research work on new cyber attacks, the 
propos 2.5-gener track can also help to improv 
exist privacy-preserv works, and we will briefli discu 
the defens of our cross-brows track in section vii. 

now, let u put asid the good, the bad and the ugli 
usag of web tracking, and look at the techniqu itself. To 
fingerprint differ browser instal on the same machine, 
one simpl approach be to use exist featur that fingerprint 
singl browser. becaus mani exist featur be browser 
specific, the cross-brows stabl one be not uniqu enough 
even when combin togeth for fingerprinting. that be whi 
the onli cross-brows fingerprint work, boda et al. [14], 
adopt IP address a a main feature. however, IP address, 
a a network-level feature, be exclud from modern browser 
fingerprint in the famou panopticlick test [5] and mani 
other relat work [10, 20, 26, 32, 34, 36]. the reason be that IP 
address chang if alloc dynamically, connect via mobil 
network, or a laptop switch locat such a from home to 
office—and be unavail behind an anonym network or a 
proxy. 

In the paper, we propos a (cross-)brows fingerprint 
base on mani novel OS and hardwar level features, e.g., 
these from graphic card, cpu, audio stack, and instal 
write scripts. specifically, becaus mani of such OS and 
hardwar level function be expos to javascript via browser 
apis, we can extract featur when ask the browser to per- 
form certain task through these apis. the extract featur 
can be use for both single- and cross-brows fingerprinting. 

1more detail about our experi can be found in appendix A. 

permiss to freeli reproduc all or part of thi paper for noncommerci 
purpos be grant provid that copi bear thi notic and the full citat 
on the first page. reproduct for commerci purpos be strictli prohibit 
without the prior write consent of the internet society, the first-nam author 
(for reproduct of an entir paper only), and the author’ employ if the 
paper be prepar within the scope of employment. 
ndss ’17, 26 februari - 1 march 2017, san diego, ca, usa 
copyright 2017 internet society, isbn 1-1891562-46-0 
http://dx.doi.org/10.14722/ndss.2017.23152 



let u take webgl, a 3D compon implement in 
browser canva object, for example. while canvas, especi 
the 2D part, have be use in single-brows fingerprint [9, 
32], webgl be actual consid a “too brittl and un- 
reliable” even for a singl browser by a veri recent studi 
call amiuniqu [26]. the reason for such conclus be that 
amiuniqu select a random webgl task and do not restrict 
mani variables, such a canva size and anti-aliasing, which 
affect the fingerprint results. 

contrast with thi conclus drawn by amiunique, we 
show that webgl can be use not onli for single- but also for 
cross-brows fingerprinting. specifically, we ask the browser 
to render more than 20 task with care select comput 
graphic parameters, such a texture, anti-aliasing, light, and 
transparency, and then extract featur from the output of 
these render tasks. 

our princip contribut be be the first to use mani 
novel OS and hardwar features, especi comput graphic 
ones, in both single- and cross-brows fingerprinting. particu- 
larly, our approach with new featur can success finger- 
print 99.24% of user a oppos to 90.84% for amiunique, 
i.e., state of the art, on the same dataset for single-brows 
fingerprinting. moreover, our approach can achiev 83.24% 
uniqu with 91.44% cross-brows stability, while boda 
et al. [14] exclud IP address onli have 68.98% uniqu 
with 84.64% cross-brows stability. 

our secondari contribut be that we make sever inter- 
est observ for single- and cross-brows fingerprint- 
ing. for example, we find that the current measur of 
screen resolution, e.g., the one do in amiunique, panop- 
ticlick [5, 17] and boda et al. [14], be unstable, becaus the 
resolut chang in firefox and IE when the user zoom 
in or out the web page. therefore, we take the zoom level 
into consideration, and normal the width and height in 
screen resolution. for anoth example, we find that both 
dataurl and jpeg format be unstabl across differ 
browsers, becaus these format be with loss and implement 
differ in multipl browser and the server side a well. 
therefore, we need to adopt lossless format for server-cli 
commun in cross-brows fingerprinting. 

our work be open-sourc and avail at https://github. 
com/song-li/cross browser/, and a work demo be at http: 
//www.uniquemachine.org. 

the rest of the paper be organ a follows. We first 
present all the featur includ old one adopt and mod- 
ifi from amiuniqu and new one propos by u in 
section ii. then, we introduc the design of our browser 
fingerprint includ the overal architecture, render 
tasks, and mask gener in section iii. after that, we talk 
about our implement in section iv, and data collect in 
section V. We evalu our approach and present the result in 
section vi. next, we discu the defens of our fingerprint 
in section vii, some ethic issu in section viii, and relat 
work in section ix. our paper conclud in section X. 

ii. fingerprint featur 

In thi section, we introduc fingerprint featur use 
in thi paper. We start from featur use in prior works, and 

then introduc some featur that need modif especi 
for cross-brows fingerprinting. next, we present our newly- 
propos features. 

although there be no restrict for featur on single- 
browser fingerprinting, our cross-brows featur need to 
reflect the inform and oper of the level below the 
browser, i.e., the OS and hardwar level. for example, both 
vertex and fragment shader expos the behavior of gpu and 
it driver in the os; the number of virtual core be a cpu 
feature; the instal write script be os-level features. the 
reason be that these featur in the OS and hardwar level be 
rel more stabl across browsers: all browser be run 
on top of the same OS and hardware. 

note that if an operation, especi the output of the op- 
eration, be contribut by both the browser and the underli 
(o and hardware) levels, we can use it for single-brows 
fingerprinting, but need to get rid of the browser factor in 
cross-brows fingerprinting. for example, when we render an 
imag a a textur on a cube, the textur map be an gpu 
oper but the imag decod be a browser one. therefore, 
we can onli use png, a lossless format, for cross-brows 
fingerprinting. for anoth example, the dynam compress 
oper of audio signal be perform by both the browser 
and the underli audio stack, and we need to extract the 
underli features. now let u introduc these featur use 
in the paper. 

A. prior fingerprint featur 

In thi part of the section, we introduc fingerprint 
featur that we adopt from state of the art. there be 17 
featur present in the tabl I of the amiuniqu paper [26], 
and we have all of them for our single-brows fingerprinting. 
more detail can be found in their paper. becaus mani of 
such featur be browser specific, we adopt a subset with 
4 featur for cross-brows fingerprinting, name screen 
resolution, color depth, list of fonts, and platform. some of 
these featur need modif and be introduc below. 

B. old featur with major modif 

one prior feature, screen resolution, need refactor 
for both single- and cross-brows fingerprinting. then, we 
introduc anoth fingerprint feature, the number of cpu 
virtual cores. lastly, two prior featur need major modifica- 
tion for cross-brows fingerprinting. 

screen resolution. the current measur of screen resolu- 
tion be via the “screen” object under javascript. however, we 
find that mani browsers, especi firefox and ie, chang the 
resolut valu in proport to the zoom level. for example, 
if the user enlarg the webpag with “ctrl++” in firefox and 
ie, the screen resolut be inaccurate. We believ that the 
zoom level need to be consid in both single- and cross- 
browser fingerprinting. 

specifically, we pursu two separ directions. first, we 
adopt exist work [13] on the detect of zoom level base 
on the size of a div tag and the devic pixel ratio, and then 
adjust the screen resolut correspondingly. second, becaus 
the former method be not alway reliabl a acknowledg by 
the inventors, we adopt a new feature, i.e., the ratio between 

2 



screen width and height, which do not chang with the zoom 
level. 

In addit to screen resolution, we also find that some 
other properties, such a availheight, availwidth, availleft, 
availtop, and screenorientation, be use in both single- 
and cross-brows fingerprinting. the first four repres the 
avail screen for the browser exclud system areas, such 
a the top menu and the tool bar of a mac os. the last one 
show the posit of the screen, e.g., whether the screen be 
landscap or portrait, and whether the screen be upsid down. 

number of cpu virtual cores. the core number can be ob- 
tain by a new browser featur call hardwareconcurrency, 
which provid the capabl inform for web workers. 
now, mani browser support such feature, but some, especi 
earli version of browsers, do not. If not supported, there exsit 
a side channel [1] to obtain the number. specifically, one can 
monitor the finish time of payload when increas the 
number of web workers. when the finish time increas 
significantli at a certain level of web workers, the limit of 
hardwar concurr be reached, make it use to finger- 
print the number of cores. note that, some browsers, such a 
safari, will cut the number avail core to web worker 
by half, and we need to doubl the number for cross-brows 
fingerprinting. 

the number of core be know by the inventor to be 
fingerprint [2] and thi be one of the reason that they 
call it hardwareconcurr rather than cores. however, the 
featur be never be use or measur in prior art of browser 
fingerprinting. 

audiocontext. audiocontext provid a bundl of audio signal 
process function from signal gener to signal 
filter with the help of audio stack in the OS and the 
audio card. specifically, exist fingerprint work [18] us 
oscillatornod to gener a triangl wave, and then feed 
the wave into dynamicscompressornode, a signal process 
modul that suppress loud sound or amplifi quiet sounds, 
i.e., creat a compress effect. then, the process audio 
signal be convert to the frequenc domain via analysernode. 

the wave in the frequenc domain differ from one browser 
to anoth on the same machine. however, we find that peak 
valu and their correspond frequenc be rel stabl 
across browsers. therefore, we creat a list of bin with small 
step on both the frequenc and valu axes, and map the peak 
frequenc and valu to the correspond bins. If one bin 
contain a frequenc or value, we mark the bin a one and 
otherwis zero: such list of bin serv a our cross-brows 
feature. 

In addit to the wave processing, we also obtain the fol- 
low inform from the destin audio device: sampl 
rate, max channel count, number of inputs, number of outputs, 
channel count, channel count mode, and channel interpretation. 
note that to the best of our knowledge, none of exist 
fingerprint work have use such audio devic inform 
for browser fingerprinting. 

list of fonts. the measur in amiuniqu be base on 
flash plugin, howev flash be disappear veri fast, which 
be also mention and acknowledg in their paper. At the time 
of our experiment, flash have alreadi becom littl support to 

obtain the font list. instead, we adopt the side-channel method 
mention by nikiforaki et al. [36], where the width and 
height of a certain string be measur to determin the font 
type. note that not all font be cross-brows fingerprint 
becaus some font be web specif and provid by browsers, 
and we need to appli a mask show in section iii-c to select 
a subset. anoth thing worth note be that we be awar that 
fifield et al. [20] provid a subset of 43 font for fingerprinting, 
howev their work be base on single-brows fingerprint 
and not applic in our cross-brows scenario. 

C. newly-propos atom fingerprint featur 

In thi and next subsection, we introduc our newly- 
propos fingerprint features. We first start with atom 
features, and by atomic, we mean that the browser expos 
either an api or a compon directli to the javascript. then, 
we will introduc composit features, which usual requir 
more than one api and compon to collaborate. 

line, curve, and anti-aliasing. line and curv be 2D featur 
support by both canva (2d part) and webgl. anti-alias 
be a comput graphic techniqu use to diminish alias 
by smooth jaggies, i.e., jag or stair-step lines, in 
either singl line/curv object or the edg of a comput 
graphic model. there be mani exist algorithm [4] for 
anti-aliasing, such a first-principl approach, signal pro- 
cess approach, and mipmapping, which make anti-alias 
fingerprintable. 

vertex shader. A vertex shader, render by gpu and the 
driver, convert each vertex in a 3D model to it coordin in 
a 2D clip-space. In webgl, a vertex shader may accept data 
in 3 ways: attribut from buffers, uniform that alway stay 
the same, and textur from fragment shader. A vertex shader 
be usual combin with a fragment shader describ below 
when render a comput graphic task. 

fragment shader. A fragment shader, render by gpu and 
the driver a well, process a fragment, such a a triangl 
output by the rasterization, into a set of color and a singl 
depth value. In webgl, fragment shader take data in the 
follow ways: 
• uniforms. A uniform valu stay the same for everi pixel 

in a fragment dure a singl draw call. therefore, uniform 
be non-fingerprint features, and we list it here for 
completeness. 
• varyings. vari pa valu from the vertex shader to 

the fragment shader that interpol between these valu 
and raster the fragment, i.e., draw each pixel in the 
fragment. the interpol algorithm vari in differ 
comput graphic cards, and thu vari be fingerprint- 
able. 
• textures. given a set of map between vertex 

and texture, a fragment shader calcul the color of each 
pixel base on the texture. due to the limit resolut 
of the texture, the fragment shader need to interpol 
valu for a target pixel base on these pixel in the textur 
surround by the target. the textur interpol algorithm 
also differ from one graphic card to another, make textur 
fingerprintable. 
textur in webgl can be further classifi into sever 
categories: (1) normal texture, i.e., the textur that we 

3 



introduc above; (2) depth texture, i.e., a textur that 
contain depth valu for each pixel; (3) anim texture, 
i.e., a textur that contain video frame instead of static 
images; and (4) compress texture, i.e., a textur that 
accept compress format. 

transpar via alpha channel. transparency, a featur 
provid by gpu and the driver, allow the background to be 
intermingl with the foreground. specifically, alpha channel 
with a valu between 0 and 1 composit background and 
foreground imag into a single, final one use a composit 
algebra. there be two fingerprint point in an alpha chan- 
nel. first, we can use one singl alpha valu to fingerprint the 
composit algorithm between background and foreground. 
second, we can fingerprint the chang of transpar effect 
when the alpha valu increas from 0 to 1. becaus some 
graphic card adopt discret alpha values, some jump may 
be observ in the chang of transpar effects. 

imag encod and decoding. imag can be encod and 
compress in differ formats, such a jpeg, png, and 
dataurl. some of the formats, such a png, be lossless, 
while some, such a jpeg, be compress with loss of 
information. the decompress of a compress imag be 
a fingerprint feature, becaus differ algorithm may un- 
cover differ inform dure decompression. accord 
to our study, thi be a single-brows feature, and cannot be 
use for cross-browser. 

instal write script (languages). write script (systems), 
or commonli know a write languages, such a chinese, 
korean, and arabic, requir the instal of special librari 
to display due to the size of the librari and local of the 
languages. browser do not provid api to access the list of 
instal languages, howev such inform can be obtain 
via a side channel. specifically, a browser with a particular 
languag instal will display the languag correctly, and 
otherwis show sever boxes. that is, the exist of box 
can be use to fingerprint the presenc of that language. 

D. newly-propos composit fingeprint featur 

now, let u introduc our newly-propos composit fin- 
geprint features, which be render by more than one 
browser api or component, and sometim with addit 
algorithm built atop of browser apis. 

model and multipl models. modeling, or specif 3D 
model in thi paper, be a comput graphic process of math- 
emat describ an object via three-dimension surfaces. 
the vertex of a model be handl by the vertex shader, 
and the surfac by the fragment shader. differ object be 
repres by differ models, and may interact with each 
other especi when techniqu below, such a lighting, exist. 

light and shadow mapping. light be the simul of 
light effect in comput graphics, and shadow map be to 
test whether a pixel be visibl under a certain light and add cor- 
respond shadows. there be mani type of lighting, such a 
ambient lighting, direct lighting, and point lighting, which 
differ in the sourc of the light. additionally, mani effect be 
accompani by lights, such a reflection, translucency, light 
tracing, and indirect illumination, when light interact with one 
comput graphic model or multipl models. webgl do not 

task 

manag 

server 

client 

task 

render process hash 

composit 

fingerprint 

browser info 

store 

mask 

fig. 1: system architectur 

provid direct api for light and shadows, and some webgl 
librari (such a three.js) provid high-level api built on 
top of webgl’ vertex and fragment shader for light and 
shadows. 

camera. camera, or specif pinhol camera model, map 
3D point in a space onto 2D point in an image. In webgl, 
a camera be repres by a camera project matrix handl 
by the vertex and fragment shaders, and can be use to rotat 
and zoom in and out an object. 

clip planes. clip restrict the render oper 
within a defin region of interest. In 3D rendering, a clip 
plane be some distanc away from and perpendicular to the 
camera so that it can prevent render surfac that be too 
far from the camera. In webgl, clip plane be perform 
by the vertex and fragment shader with addit provid 
algorithms. 

iii. design 

A. overal architectur 

figur 1 show the system architecture. first, the task 
manag at the server side send variou render tasks, such 
a draw curv and lines, to the client side. note that the 
render task also involv obtain OS and hardwar level 
information, like screen resolut and timezone. then, the 
client-sid browser render these task by invok a specif 
api or a combin of apis, and produc correspond 
results, e.g., imag and sound waves. then, these results, 
especi images, be convert into hash so that they can 
be conveni sent to the server. meantime, the browser also 
collect browser-specif information, such a whether anti- 
alias and compress textur be supported, which will be 
use at the server side for fingerprint composition. 

next, when the server collect all the inform from 
the client side, the server will start to composit fingerprints. 
specifically, a fingerprint be gener from a list of hash 
from the client side and a mask that be a list of one or zero 
correspond to the hash list—w perform an “and” oper 
between the list of hash and the mask, and then gener 
anoth hash a the fingerprint. the mask for single-brows 
fingerprint be straightforward, a list of all ones. the mask for 
cross-brows fingerprint be composit from two sources. 
first, the collect browser inform will contribut to the 
mask: if the browser do not support anti-aliasing, the bit 
valu in the mask for all task that involv anti-alias be 
zero. second, we will have a differ mask for each browser 
pair, e.g., chrome vs. firefox and chrome vs. window edge. 

4 



In the next two sections, we first introduc our render 
task at client side, and then our fingerprint composition, 
especi how to gener the masks. 

B. render task 

In thi section, we introduc differ render task 
propos in thi work. befor that, let u first present the 
basic canva set below. the size of the canva be 256×256. 
the ax of the canva be defin a follows. [0, 0, 0] be the 
middl of the canvas, where x-axi be the horizont line that 
increas to the right, y-axi be the vertic line that increas 
to the bottom, and z-axi increas when move far from the 
screen. An ambient light with the power of [r: 0.3, G: 0.3, B: 
0.3] on a scale of 1 be present, and a camera be place at the 
locat of [0, 0, -7]. these two compon be necessary, 
becaus otherwis the model be entir black. In the rest of 
the paper, unless specified, such a task (d) with 2D featur 
and other task with addit lights, we use the same basic 
set in all the tasks. 

note that unlik the set in amiuniqu [26], our canva 
set be reliabl when the condit of the current window 
changes. specifically, we test three differ changes: win- 
dow size, side bar, and zoom-level. first, we manual chang 
the window size, and find that the content in the canva remain 
the same both visual and comput in term of hash 
value. second, we zoom in and out the current window, and 
find that the content chang visual accord to definition, 
but the hash valu remain the same. lastly, we open a browser 
consol a a side bar, and find that the canva content also 
remain the same similar to chang window size. now let u 
introduc our render task from task (a) to (r). 

task (a): texture. the task in figur 2(a) be to test the regular 
textur featur in the fragment shader. specifically, a classic 
suzann monkey head model [19] be render on a canva 
with a randomly-gener texture. the texture, a squar with 
a size a 256×256, be creat by randomli pick a color for 
each pixel. that is, we gener three random valu uniformli 
between 0 and 255 for three primari colors—red, green and 
blue—at one pixel, mix three primari color together, and use 
it a the color for the pixel. 

We choos thi randomly-gener textur rather than 
a regular one, becaus thi textur have more fingerprint 
features. the reason be a follows. when a fragment shader 
map a textur to a model, the fragment shader need to 
interpol point in the textur so that the textur can be 
map to everi point on the model. the interpol al- 
gorithm differ from one graphic card to another, and the 
differ be amplifi when the textur chang drastic 
in color. therefore, we gener thi textur in which color 
chang greatli between each pair of adjac pixels. 

task (b): varyings. thi task, show in figur 2(b), be design 
to test the vari featur of the fragment shader on a canvas. 
differ vari color be drawn on six surfac of a cube 
model with a specif of the color of four point on each 
surface. We choos thi vari color to enlarg the color 
differ and chang on each singl surface. for example, 
when blue be abund (such a 0.9 with a scale of 1) on 
one vertex of a surface, the other vertex will lack blue (such 
a 0.1) and have more green or red color. additionally, a 

camera be place at the locat of [0, 0, -5] for the purpos 
of comparison with task (c). 

task (b’): anti-aliasing+varyings. the task in figur 2(b’) be 
to test the anti-alias feature, i.e., how browser smooth the 
edg of models. specifically, we adopt the same task in task 
(b), and add anti-aliasing. If we enlarg figur 2(b’), we will 
find that the edg of both model be smoothed. 

task (c): camera. the task in figur 2(c) be to test the camera 
feature, i.e., a project matrix fed into the fragment shader. 
everi set in thi task be the same a task (a) except for 
the camera, which be move to a new locat of [-1, -4, -10]. 
the same cube look small than the one in task (a), becaus 
the camera be move further from the cube (the z-axi be -10 
a oppos to -5). 

task (d): line and curves. the task in figur 2(d) be to 
test line and curves. one curv and three line with differ 
angl be drawn on a canvas. specifically, the curv obey 
the follow function: y = 256 − 100cos(2.0πx/100.0) + 
30cos(4.0πx/100.0) + 6cos(6.0πx/100.0), where [0, 0] be 
the left and top of the canvas, x-axi increas to the right, 
and y-axi increas to the bottom. the start and end 
point of three line be {[38.4, 115.2], [89.6, 204.8]}, {[89.6, 
89.6], [153.6, 204.8]}, and {[166.4, 89.6], [217.6, 204.8]}. 
We choos these specif line and curv so that we can test 
differ gradient and shapes. 

task (d’): anti-aliasing+lin and curves. task (d’) be an anti- 
alias version of task (d). 

task (e): multi-models. the task in figur 2(e) be to test how 
differ model influenc each other in the same canvas. In 
addit to the suzann model, we introduc anoth model 
that look like a single-person arm sofa (call sofa model), 
and put two model in parallel. anoth randomly-gener 
textur follow the same procedur describ in task (a) be 
map to the sofa model. 

task (f): light. the task in figur 2(f) be to test the interact 
of a diffuse, point light and the suzann model. A diffuse, point 
light caus diffus reflect when illumin an object. 
specifically, the light be white with the same valu across 
rgb, the power of the light be 2 for each primari color, and 
the light sourc be locat at [3.0, -4.0, -2.0]. 

We choos a white light sourc in thi task becaus the 
textur be colorful, and a single-color light may diminish some 
subtl differ on the texture. the power of the light be also 
care chosen, becaus a veri weak light will not illumin 
the suzann model, make it invisible, but a veri strong light 
will make everyth white and diminish all the fingerprint 
features. In a small scale experi with 6 machines, when 
increas the power from 0 to 255, we find that when the 
light power be 2, the pixel differ among these machin 
be the maximum. the light posit be randomli chosen and 
do not affect the featur fingerprint results. 

task (g): light and models. the task in figur 2(g) be to test 
the interact of a single, diffuse, point light and two models, 
becaus one model may creat a shadow on anoth when 
illumin by a point light. everi set of light be the same 
a task (f), and the model be the same a task (e). 

5 



(a) textur (b) vari (b’) anti-alias (c) camera (d) lines&curv (e) multi-model (f) light 

(g) light&model (h) specular light (i) two textur (j) alpha (0.09–1) (k) complex light (l) clip plane (m) cubemap textur 

(n) dd textur (o) pvr textur (p) float textur (q) video (r) write script (systems) 

fig. 2: client-sid render task for the purpos of fingerprint 

task (h): specular light. the task in figur 2(h) be to test 
the effect of a diffus point light with anoth color and a 
specular point light on two models. similar to diffus point 
light, a specular point light will caus a specular reflect on 
an object. specifically, both light be locat at [0.8, -0.8, - 
0.8], the rgb of the diffus point light be [0.75, 0.75, 1.0], 
and the rgb of the specular light be [0.8, 0.8, 0.8]. 

there be two thing worth noting. first, we choos the 
specif camera locat becaus it be closer to the model and 
have big effects. particularly, one may notic the spot on the 
back of the sofa model illumin by the specular point light. 
second, although the color of the diffus point light be toward 
blue, but still have much red and green. We want to test other 
colors, but white light be still the best for fingerprint give 
that the textur be colorful. 

task (h’): anti-aliasing+specular light. task (h’) be an anti- 
alias version of task (h). 

task (h”): anti-aliasing+specular light+rotation. task (h’) 
be the same a task (h’) but with 90 degre rotation. 

task (i): two textures. the task in figur 2(i) be to test the 
effect of map two differ textur to the same objects. 
On top of task (h), i.e., everi other set be the same, we 
map anoth layer of randomly-gener textur to both the 
suzann and sofa model. 

task (j): alpha. the task in figur 2(j) consist of 8 sub-task 
be to test the effect of differ alpha values. specifically, we 
put the suzann and sofa model in parallel, and chang the 
alpha valu chosen from thi specif set, {0.09, 0.1, 0.11, 
0.39, 0.4, 0.41, 0.79, 1}, where 0 mean complet transpar 
and 1 no transparency. 

again, there be two thing worth noting. first, we choos 
thi valu set care to reflect differ alpha valu and 
small valu changes: three repres valu {0.1, 0.4, 
0.8} a well a their nearbi valu be selected. valu be 

augment in 0.01, becaus mani gpu do not accept small 
steps. second, the suzann and sofa model be posit so 
that they be partial overlap and the hidden structur of 
the sofa model be visibl when the model becom transparent. 
for example, the arm of the sofa model be partial visibl 
when view from the back of the model. 

task (k): complex lights. the task in figur 2(l) be to test 
complex light features, such a reflection, move lights, and 
light trace among multipl models. specifically, we gener 
5,000 metal ring model with differ angl randomli 
place on the ground and pile together. for reliability, we use 
a seed random number gener with the same random seed 
everi time so that the test can be repeat on differ browser 
and machines. two point light sources, yellow and red, toward 
the bottom be circl around in the right top corner of the 
entir scene. when light illumin the ring underneath, other 
ring also get illumin through reflect and two color 
from differ sourc be intermingl together. 

note that we choos single-color light sourc becaus the 
model be not colorful, and light with color will illumin 
more detail on the rings. furthermore, light with differ 
color will interact with each other and creat more detail 
effects. 

task (k’): anti-aliasing+complex lights. task (k’) be an anti- 
alias version of task (k). 

task (l): clip plane. the task in figur 2(n) be to test 
the movement of a clip plane and the fps. specifically, 
we put a static posit tetrahedron on the ground, illumin 
it with collim light, and move the clip plane so that 
the observ feel that the tetrahedron be moving. the captur 
imag in figur 2(n) be upsid down when the clip plane 
move to that position. 

task (m): cubemap texture+fresnel effect. the task in fig- 
ure 2(n) be to test cubemap textur and fresnel effect in 

6 



light reflection. particularly, cubemap textur [7] be a special 
textur that util the six face of a cube a the map 
shape, and fresnel effect be an observ that the amount 
of reflect light depend on the view angle. We creat a 
cubemap textur with a normal campu scene, and put sever 
transpar bubbl on top of the textur for the fresnel effect. 
all the bubbl be move randomli and bump to each 
other in animation. 

task (n): dd textures. dd textur refer to those that use 
directdraw surfac file format, a special compress data 
format with the S3 textur compress (s3tc) algorithm. 
there be five differ variat of s3tc from dxt1 to 
dxt5, and each format have an option to enabl mipmapping, 
a techniqu to scale high-resolut textur into multipl 
resolut within the textur file. becaus dxt2 be similar 
to dxt3 and dxt4 similar to dxt5, task (p) onli test 
dxt1, dxt3, and dxt5 with and without mipmap in 
each column a show in figur 2(p). for comparison, we 
also includ an uncompress textur with argb format in 
the rightmost column. there be two gray cube in figur 2(p) 
becaus dxt3 and dxt5 with mipmap be unsupport on 
that specif machine. 

task (o): pvr textures. pvr texture, or call pvrtc texture, 
be anoth textur compress format adopt mostli by 
mobil devices, such a all iphone, ipod touch, and ipad a 
well a some android products. base on the size of data 
blocks, there be two modes: 4 bit mode and 2 bit mode. 
further, there be two popular versions, v1 and v3, and we 
can choos to enabl mipmap a well. In total, task (q), 
show in figur 2(q), have 8 subtask that enumer differ 
combin of bit mode, version, and mipmapping. similarly, 
a gray cube mean that the format be not supported. 

task (p): float textures. float texture, or call float point 
texture, us float point instead of integ to repres 
color values. A special type of float point textur be depth 
textur that contain the data from the depth buffer for a 
particular scene. task (r), show in figur 2(r), be adopt 
from an exist onlin test [15] for the purpos of render 
float and depth textures. 

task (q): video (anim textures). the task in figur 2(s) 
be to test the decompress of videos. specifically, we creat 
a two-second static scene video from a png file with three 
differ compress format (name webm, high qualiti 
mp4, and standard mp4), map the video a an anim 
textur to a cube, and captur six consecut frame from the 
video. 

note that although all the video be creat with one 
singl png file, the captur frame be differ becaus the 
compress algorithm be with loss. We choos six consecut 
frame becaus javascript onli provid an api to obtain 
frame at a certain time but not with certain frame numbers— 
six consecut frame can make sure that the target frame be 
within the set base on our experiment. 

task (r): write scripts. the task in figur 2(t) be to obtain 
the list of support write scripts, such a latin, chinese, 
and arabic, in a browser. becaus none of exist browser 
provid an api to obtain the list of support write scripts, 
we adopt a side channel to test the exist of each write 
script. specifically, the method be a follows. the name of 

algorithm 1 cross-brows mask gener 
input: 

M : the set of all possibl masks. 
hbrowser,machin = {hashtask1, hashtask2, hashtask3, ...} : the hash 
list for all the render task on one browser of a specif machine. 
hbrowser = {hbrowser,machine1, hbrowser,machine2, ...} : the hash list 
for a browser. 
HS = {hchrome, hfirefox, hopera, ..} : the overal hash list. 

process: 
1: for all possibl {hbrowser1, hbrowser2} ⊂ HS do 
2: maxuniq ← 0 
3: maxmask ← null 
4: for mask in M do 
5: FS ← {} 
6: count← 0 
7: for m1 ∈ hbrowser1 and m2 ∈ hbrowser2 do 
8: if m1&mask == m2&mask and m1&mask /∈ FS then 
9: count + + 

10: fs.add(m1&mask) 
11: end if 
12: end for 
13: uniq ← count/size(hbrowser1) 
14: if uniq > maxuniq then 
15: maxuniq ← uniq 
16: maxmask ←mask 
17: end if 
18: end for 
19: maxmask be the mask for browser 1 and 2. 
20: end for 

each write script in it own languag be render in the 
browser. If the write script be supported, the render will 
succeed; otherwise, a set of box will be show instead of 
the script. therefore, we can detect the box to test whether 
the browser support the script: for example, figur 2(t) show 
that javanese, sudanese, lontara and thaana be not support 
in that specif test browser. our current test list have 36 
write script obtain from wikipedia [8] and rank by 
their popularity. 

C. fingerprint composit 

In thi section, we present how to form a fingerprint 
at the server side base on the hash from the client-sid 
render tasks. As mentioned, a fingerprint be a hash comput 
from an “and” oper of the hash list of all the task and 
a mask. the mask be straightli all one for single-brows 
fingerprinting, and comput from two sub-mask for cross- 
browser fingerprinting. We have talk about the first sub-mask 
comput from the fact whether a browser support certain 
function in section iii-a, and now will discu the 
second sub-mask, which differ for everi browser pair. 

the gener of the mask for everi two browser be a 
training-bas approach. specifically, we use a small subset to 
obtain a mask that optim both the cross-brows stabil 
and the uniqueness. note that similar to fals posit and 
negative, these two numbers, i.e., cross-brows stabil and 
uniqueness, be two side of a coin: when the cross-brows 
stabil increases, uniqu decrease, and vice versa. let 
u think about two extrem examples. If we use single- 
browser features, the cross-brows stabil be zero but the 
uniqu be the highest. At contrast, if we use onli one 
feature, e.g., platform, the cross-brows stabil be 100% but 
the uniqu be veri low. 

algorithm 1 show the train procedur of the mask for 
everi browser pair. We adopt a brute-forc search: though not 
the most effici but the most effect and complete. due to 

7 



the small size of the train data, we realiz that brute forc 
be possibl and produc the best result. specifically, we first 
enumer everi browser pair (line 1), and then everi possibl 
mask (line 4). for each mask, we go through the train data 
(line 7), and make sure to select the mask that maxim the 
cross-brows stabil multipli the uniqu (line 8–11 
and 14–17). 

iv. implement 

our open-sourc implementation, exclud all the open- 
sourc librari (e.g., three.js, a javascript 3D library, and 
glmatrix, a javascript librari for matrix operations), have 
approxim 21k line of code (loc). specifically, our 
approach involv approxim 14k line of javascript, 1K 
line of html, 2.4k line of coffeescript, 500 line of C 
code, and 3.7k line of python code. 

We now divid our code into client and server, and describ 
below. the client-sid code have a manag in javascript that be 
gener from coffeescript. the manag perform three jobs: 
(1) load all the render tasks, (2) collect all the result 
from the render task a well a browser information, and 
(3) send the result to a snippet of javascript that perform 
hash and then commun with the server-sid code. task 
(n) and (o) be write in C and convert to javascript via 
emscripten. all other render task be write in javascript 
directly: task (k)–(m) be write with the help of three.js, and 
the rest task be directli use either webgl or javascript 
apis. all render task have use glmatrix for vector and 
matrix operations. 

the server side of our implement be write in python, 
serv a a modul of an apach server. our server-sid code 
can be further divid into two parts: the first with 1.2k loc 
for commun with the client-sid code and store hash 
into a databas and imag into a folder, and the second with 
2.5k loc for the analysi such a gener and appli 
mask on the collect fingerprints. 

V. data collect 

We collect data from two crowdsourc websites, name 
amazon mechan turk and macroworkers. specifically, 
we instruct crowdsourc worker to visit our websit via 
two differ browser at their own choice, and if they visit 
the websit via three browsers, they will get paid by a bonus. 
after visiting, our websit will provid a uniqu code for each 
worker so that she can input it back to the crowdsourc 
websit to get paid and option bonus. note that in our data 
collection, in addit to hashes, we also send all the imag 
data to the server—such a step be not need if deploy our 
approach. 

To ensur that we have the ground truth data, we insert a 
uniqu identifi a part of the url that each crowdsourc 
worker visits, e.g., http://oururl.com/?id=abc. the uniqu 
identifi be store at the client-sid browser a a cooki so 
that if the user visit our websit again, she will get the same 
identifier. additionally, we allow one crowdsourc worker to 
take the job onli once. for example, the number of human 
intellig task (hits) in mturk be one for each worker. 

In total, we have collect 3,615 fingerprint from 1,903 
user within three months. some user just visit our websit 

tabl I: normal entropi for six attribut of the dataset 
collect by our approach, amiunique, and panopticlick 
(the last two column be copi from the amiuniqu paper) 

our amiuniqu panopticlick 

user agent 0.612 0.570 0.531 
list of plugin 0.526 0.578 0.817 
list of font (flash) 0.219 0.446 0.738 
screen resolut 0.285 0.277 0.256 
timezon 0.340 0.201 0.161 
cooki enabl 0.001 0.042 0.019 

with one browser and do not finish the two-brows task. We 
use all the fingerprint directli for single-brows fingerprint- 
ing. for cross-brows fingerprinting, the dataset be divid 
equal into ten part for each browser pair if there be enough 
data: one for the gener of masks, and the other nine for 
testing. 

A. compar our dataset with amiuniqu and panopticlick 

the purpos of thi part of the section be to compar 
our dataset with amiuniqu and panopticlick in the metric 
of normal shannon’ entropi invent in the amiuniqu 
paper. specifically, equat 1 show the definit accord 
to their paper: 

NH = 
h(x) 

HM 
= 
− 
∑ 

i P (xi)log2p (xi) 

log2(n) 
(1) 

h(x) be the shannon’ entropi where X be a variabl with 
possibl valu {x1, xi, ..} and p(x) a probabl function. 
HM be the bad case scenario in which everi fingerprint have 
the same probabl and we have the maximum entropy. N be 
the total number of fingerprints. 

tabl I show the comparison result where the statist 
for amiuniqu and panopticlick be obtain from tabl iii of 
the amiuniqu paper. We observ that the normal entropi 
valu of our dataset be veri similar to dataset use in past 
approach except for list of font and timezone. 

first, the normal entropi of list of font drop 0.22 
from amiuniqu and 0.52 from panopticlick. the reason a 
explain by amiuniqu be that flash be disappearing. By 
the time that we collect data, the percentag of browser 
with flash support decreas even more when compar with 
amiunique. To further valid our dataset, we also calcul 
the normal entropi for the list of font collect by 
javascript. the valu be 0.901, veri close to the one from 
panopticlick. 

second, the normal entropi of timezon increas 
0.139 from amiuniqu and 0.179 from panopticlick. the 
reason be that our crowdsourc worker from microwork 
be veri international, span from africa and europ to 
asia and latin america. specifically, microwork allow u 
to creat campaign target differ region all over the 
world, and we do creat campaign for each continental. 

anoth thing worth note be that the normal entropi 
of cooki enabl be almost zero for our dataset. the reason 
be that we collect data from crowdsourc websites, where 

8 



tabl ii: overal result compar amiunique, boda et al. 
exclud IP address, and our approach (“unique” mean the 
percentag of uniqu fingerprint out of total, “entropy” the 
shannon entropy, and “stability” the percentag of fingerprint 
that be stabl across browsers. We do not list cross-brows 
number for amiuniqu and single-brows number for boda 
et al. in the table, becaus these number be veri low and their 
approach be not design for that purpose. ) 

single-brows cross-brows 

uniqu entropi uniqu entropi stabil 

amiuniqu [26] 90.84% 10.82 
boda et al. [14] 68.98% 6.88 84.64% 
our 99.24% 10.95 83.24% 7.10 91.44% 

worker need to get paid with cooki enabled. If they disabl 
cookies, they cannot even log into the crowdsourc website. 
At contrast, both amiuniqu and panopticlick attract gener 
web user in which a small percentag may disabl cookies. In 
general, there be veri few peopl disabl cookies, becaus 
cooki be essenti for mani modern web functionalities. 

vi. result 

In thi section, we first give an overview of our results, 
and then break down the result by differ browser pair 
and features. lastly, we present some interest observation. 

A. overview 

We first give an overview of our result for both single- 
and cross-brows fingerprinting. specifically, we compar our 
single-brows fingerprint with amiunique, state of the art, 
and our cross-brows fingerprint with boda et al. exclud 
IP address. note that although mani new features, e.g., these 
in amiunique, emerg after boda et al., these featur be 
browser specif and we find that the featur use in boda et 
al. be still the one with the high cross-brows stability. 

We now introduc how we reproduc the result for these 
two works. amiuniqu be open-sourc [3], and we can directli 
download the sourc code from github. boda et al. provid 
an open test websit (https://fingerprint.pet-portal.eu/), and 
we can download the fingerprint javascript directly. We 
believ that the direct usag of their sourc code minim 
all the possibl implement biases. 

the overal result of amiunique, boda et al., and our 
approach be show in tabl ii. let u first take a look at 
single-brows fingerprinting. We compar our approach with 
amiuniqu in term of uniqu and entropy. uniqu 
mean the percentag of uniqu fingerprint over the total 
number of fingerprints, and entropi be the shannon entropy. 
the evalu show that our approach can uniqu identifi 
99.24% of user a oppos to 90.84% for amiunique, 
count to 8.4% increase. for the entropy, the maximum 
valu be 10.96, and both approaches, especi ours, be veri 
close to the maximum. that is, non-uniqu fingerprint in both 
approach be scatter in small anonym groups. 

then, let u look at the metric for cross-brows finger- 
printing. In addit to uniqu and entropy, we also cal- 
culat anoth metric call cross-brows stability, mean 

the percentag of fingerprint that be stabl across differ 
browser on the same machine. although we select featur 
that be stabl across browser most of time, fingerprint 
from differ browser might still differ. for example, screen 
resolut could be differ for boda et al., if the user 
choos differ zoom level in two browsers. for anoth 
example, gpu render might be differ for our approach, 
if one browser adopt hardwar render but anoth softwar 
rendering. 

now let u look at the cross-brows fingerprint result 
for boda et al. and our approach. tabl II show that our 
approach can identifi 83.24% of user a oppos to 68.98% 
for boda et al. thi be a huge increas with 14.26% difference. 
the cross-brows stabil also increas from 84.64% for 
boda et al. to 91.44% for our approach. one of the reason be 
that we make exist features, such a screen resolut and 
the list of fonts, more stabl across differ browsers. the 
entropi also increas from 6.88 for boda et al. to 7.10 for 
our approach. 

B. breakdown by browser pair 

In thi part of the section, we break down our result by 
differ browser pair show in tabl iii. there be six differ- 
ent type of browsers, and a categori call other includ 
some uncommon browsers, such a maxthon, coconut, and 
UC browser. the tabl be a low triangular matrix due to 
it symmetr property: If we list all the numbers, the upper 
triangl be exactli the same a the lower. the main diagon of 
the tabl repres single-brows fingerprinting, and the other 
part cross-browser. there be two n/a becaus appl give up 
the support of safari on windows, and microsoft never support 
internet explor and edg browser on mac os, i.e., safari 
do not co-exist with IE and edge. there be two dash a 
well for other and edge/ie/safari, becaus we do not observ 
ani such pair in our dataset. 

let u first look at the main diagonal. the stabil for 
singl browser be obvious 100% becaus we be compar 
a browser to itself. the browser with low uniqu be 
mozilla firefox, becaus firefox hide some information, 
e.g., the webgl render and vendor, for privaci reasons. the 
uniqu for IE and edg be 100%, show that both 
browser be highli fingerprintable. the uniqu for opera, 
safari, and other browser be also 100%, but due to the small 
number of sampl in our dataset, we cannot draw further 
conclus for these browsers. 

then, we look at the low triangl of the matrix except the 
main diagonal, which show the uniqu and stabil for 
cross-brows fingerprinting. first, the cross-brows stabil 
for all pair be veri hight (> 85%) except for other browser 
and opera vs. ie. becaus the number of such pair be small, it 
be hard for u to gener a mask with reason cross-brows 
stability. 

second, the uniqu for IE and edg vs. the rest be rela- 
tive low when compar with other pairs. the reason be that 
both IE and edg be independ implement by microsoft 
with few open-sourc libraries. that is, the common part 
share between ie/edg and the rest be much less than these 
among the rest browsers. At contrast, the uniqu between 

9 



tabl iii: cross-brows fingerprint uniqu and stabil break-down by browser pair 

browser chrome firefox edg IE opera safari other 

chrome 99.2% (100%) 
firefox 89.1% (90.6%) 98.6% (100%) 
edg 87.5% (92.6%) 97.9% (95.9%) 100% (100%) 
IE 85.1% (93.1%) 91.8% (90.7%) 100% (95.7%) 100% (100%) 
opera 90.9% (90.0%) 100% (89.7%) 100% (100%) 100% (60.0%) 100% (100%) 
safari 100% (89.7%) 100% (84.8%) n/a n/a 100% (100%) 100% (100%) 
other 100% (22.2%) 100% (33.3%) - - 100% (50%) - 100% (100%) 

note: the format of each cell be a follow – uniqu (cross-brows stability). 

IE and edg be veri high: 100% uniqu with 95.7% cross- 
browser stability, mean that IE and edg probabl share a 
consider amount of code. 

third, it be interest to compar IE and edge. the 
uniqu of edg browser be high than IE for all browser 
pairs. the reason be that edg browser introduc more func- 
tionalities, such a a full implement of webgl obey 
the standard, which expos more fingerprint aspects. 

C. breakdown by featur 

In thi part of the section, we break down our result 
by differ featur and show it in tabl iv. specifically, 
tabl IV can be divid into two parts: the first part abov 
amiuniqu row show the featur adopt by amiunique, 
the second part below the first show all the new featur 
propos by our approach. now let u look at differ 
features. 

1) screen resolut and ratio: the single-brows en- 
tropi for screen resolut and ratio be 7.41, while the entropi 
for the width and height ratio drop significantli to 1.40. 
the reason be that mani resolutions, e.g., 1024×768 and 
1280×960, share the same ratio. the cross-brows stabil 
for screen resolut be veri low (9.13%), becaus user often 
zoom in and out the web page a mention before. the 
cross-brows stabil for the width and height ratio be high 
(97.57%) but low than 100%, becaus some user adopt two 
screen and put two browser in separ ones. 

2) list of font: due to the ongo disappear of flash, 
the entropi for the list of font obtain from flash be a low 
a 2.40, and at contrast the entropi for the list from javascript 
be a high a 10.40. that mean the list of font be still a highli 
fingerprint feature, and we need to obtain the featur use 
javascript in the future. 

note that although the entropi for the font list from 
javascript be high, it do not take a signific portion in 
our fingerprinting. when we remov thi feature, the single- 
browser uniqu of our approach onli drop from 99.24% 
to 99.09%, less than 0.2% difference. that is, our approach 
can still fingerprint user with high accuraci without the font 
list feature. 

3) anti-aliasing: task (b), (b’), (d), (d’), (h), (h’), (k) 
and (k’) be relat to anti-aliasing. the entropi for single- 
browser fingerprint increas for (b), (d) and (h) when anti- 
alias be added, but decreas for (k). the reason be that 
(b), (d) and (h) have few edges, and anti-alias will add 

more fingerprint contents; at contrast, (k) contain mani 
small edg on each of the beans, and anti-alias will occupi 
the content of the bean and diminish some fingerprint 
content insid of the beans. 

now let u look at cross-brows fingerprinting. the cross- 
browser stabil be the opposit of the single-brows entropy: 
it decreas for (b), (d) and (h), but increas for (k). the 
reason be that anti-alias be not support for all browser on 
the same machine, make the stabil decreas for (b), (d) and 
(h). for similar reason, becaus anti-alias diminish some 
fingerprint content insid the bean, the cross-brows 
stabil increas for (k). 

4) line&curves: task (d) test the effect of line and 
curves. the entropi be low (1.09) and the cross-brows stabil- 
iti be high (90.77%), becaus both line and curv be simpl 
2D oper and do not differ too much across browser and 
machines. We manual compar those case that be differ 
across machin or browsers, and find that the major differ 
lie in the start and end point where there be one or two 
pixel shifting. 

5) camera: when compar the single-brows entropi 
for task (b) and (c), we find that the entropi decreas when 
a camera be added. the reason be that the purpos of the 
add camera be to zoom out the cube, which diminish subtl 
differ on the surface. the cross-brows stabil for (b) 
and (c) be veri similar due to the similar between (b) and 
(c). 

6) texture: let u first compar normal, dds, pvr, cube- 
map and float textures. the entropi for float and cubemap 
textur be high than all other textures, becaus float and 
cubemap textur have more information, e.g., the depth in 
float textur and a cube map for cubemap textures. 
the entropi for pvr textur be veri low (0.14), becaus 
pvr textur be mostli support on appl mobil devices, 
such a iphon and ipads. As our dataset be collect from 
crowdsourc workers, veri few of them will use appl 
mobil devic to perform the crowdsourc tasks. anoth 
interest observ be that the cross-brows stabil for 
dd textur be low (68.18%). the reason be that dds, a 
microsoft format, be unsupport on mani browsers. 

second, let u look at two textures, i.e., task (i). compar 
with task (h), anoth layer of textur be added, but the entropi 
for both single- and cross-brows fingerprint decrease. 
the reason be that the textur use in our task be care 
creat so that it can contain more fingerprint features. 

10 



tabl iv: entropi and cross-brows stabil by featur 

featur 
single-brows cross-brows 

entropi entropi stabil 

user agent 6.71 0.00 1.39% 
accept 1.29 0.01 1.25% 
content encod 0.33 0.03 87.83% 
content languag 4.28 1.39 10.96% 
list of plugin 5.77 0.25 1.65% 
cooki enabl 0.00 0.00 100.00% 
use of local/sess storag 0.03 0.00 99.57% 
timezon 3.72 3.51 100.00% 
screen resolut and color depth 7.41 3.24 9.13% 
list of font (flash) 2.40 0.05 68.00% 
list of http header 3.17 0.64 9.13% 
platform 2.22 1.25 97.91% 
Do not track 0.47 0.18 82.00% 
canva 5.71 2.73 8.17% 
webgl vendor 2.22 0.70 16.09% 
webgl render 5.70 3.92 15.39% 
use of an Ad blocker 0.67 0.28 70.78% 

amiuniqu 10.82 0.00 1.39% 

screen ratio 1.40 0.98 97.57% 
list of font (javascript) 10.40 6.58 96.52% 
audiocontext 1.87 1.02 97.48% 
cpu virtual core 1.92 0.59 100.00% 
normal webgl render 4.98 4.01 37.39% 
task (a) textur 3.51 2.26 81.47% 
task (b) vari 2.59 1.76 88.25% 
task (b’) varyings+anti-alias 3.24 1.66 73.95% 
task (c) camera 2.29 1.58 88.07% 
task (d) lines&curv 1.09 0.42 90.77% 
task (d’) (d)+anti-alias 3.59 2.20 74.88% 
task (e) multi-model 3.54 2.14 81.15% 
task (f) light 3.52 2.27 81.23% 
task (g) light&model 3.55 2.14 80.94% 
task (h) specular light 4.44 3.24 80.64% 
task (h’) (h)+anti-alias 5.24 3.71 70.35% 
task (h”) (h’)+rotat 4.01 2.68 75.09% 
task (i) two textur 4.04 2.68 75.98% 
task (j) alpha (0.09) 3.41 2.36 86.25% 
task (j) alpha (0.10) 4.11 3.02 75.31% 
task (j) alpha (0.11) 3.95 2.84 75.80% 
task (j) alpha (0.39) 4.35 3.06 82.75% 
task (j) alpha (0.40) 4.38 3.10 82.58% 
task (j) alpha (0.41) 4.49 3.13 81.89% 
task (j) alpha (0.79) 4.74 3.12 72.63% 
task (j) alpha (1) 4.38 3.07 82.75% 
task (k) complex light 6.07 4.19 66.37% 
task (k’) (k)+anti-alias 5.79 3.96 74.45% 
task (l) clip plane 3.48 1.93 76.61% 
task (m) cubemap textur 6.03 3.93 58.94% 
task (n) dd textur 4.71 3.06 68.18% 
task (o) pvr textur 0.14 0.00 99.16% 
task (p) float textur 5.11 3.63 74.41% 
task (q) video 7.29 2.32 5.48% 
task (r) write script (support) 2.87 0.51 97.91% 
task (r) write script (images) 6.00 1.98 5.48% 

all cross-brows featur 10.92 7.10 91.44% 
all featur 10.95 0.00 1.39% 

when we add two textur together, some of these featur 
be diminished, make two-textur task less fingerprintable. 

7) model: let u compar task (a) and (e) a well a 
task (f) and (g) for the effect of models. compar to (a) 
and (f), a sofa model be add to (e) and (g), and the entropi 
increas a littl bit, i.e., 0.03 for both tasks. the conclus 
be that the sofa model do introduc more fingerprint 
featur but the increas be veri limited. 

8) light: task (a), (e), (f), (h), and (k) be relat to 
lights. let u first look at task (f) in which a diffuse, point 
light be add to task (a). the entropi onli increas 0.01 
for both single- and cross-brows fingerprinting, show that 
the diffuse, point light have littl impact in fingerprinting. As a 
comparison, the effect of a specular light be more appar 
becaus the entropi for task (h) be an increas of >0.9 
when compar to task (e) in both single- and cross-brows 
fingerprinting. lastly, let u look at task (k), a complex light 
example. the entropi for task (k) be the high among all 
task except for video, becaus there be 5,000 model and 
light with differ color be reflect among all the model 
and intermingl together. 

9) alpha: task (j) test alpha valu from 0.09 to 1. It 
be interest that differ alpha valu have veri differ 
entropies. In general, the trend be that when the alpha valu 
increases, the entropi increas a well but with mani fall- 
backs. We do not test continu alpha valu in our large- 
scale experiment, but perform a small-scal one among five 
machines. specifically, we compar the differ pixel between 
each alpha valu imag and a standard one, and find that 
the fallback be mainli caus by softwar rendering, which 
approxim alpha values. additionally, we observ some 
pattern in the fallbacks, which happen in an approxim 
0.1 increment step. 

10)clip planes: task (l) be to test the effect of clip 
planes, yield 3.48 single-brows entropi and 1.93 cross- 
browser entropi with 76.61% stability. the entropi be similar 
to the one with pure texture, becaus clip plane be im- 
plement in javascript and do not contribut to fingeprint 
much. 

11) rotation: task (h”) be a rotat of task (h’). the 
entropi decreas and the cross-brows stabil increases. 
the reason be that the front of the suzann model and the 
insid of the sofa model have more details. when we rotat both 
model to anoth angle, the fingerprint detail decreas 
and correspondingli the stabil increases. 

12) audiocontext: the audiocontext that we measur be 
the cross-brows stabl one, i.e., the destin audio devic 
inform and the convert waves. the entropi be 1.87, 
much small than the entir entropi of the entir wave— 
which be 5.4 a measur by englehardt et al. [18]. 

13)video: task (q) be test the video feature. the entropi 
for video be the high (7.29) among all of render tasks, 
becaus decod video be a combin of the browser, the 
driver, and sometim the hardwar a well. At contrast, the 
cross-brows stabil for video be veri low (5.48%) and the 
entropi also drop to 2.32. the reason be that similar to imag 
encod and decoding, both webm and mp4 video format 
be with loss and decod by the browser. We do not find a 
univers lossless format for video a we do for images. 

11 



14) write scripts: write script be test in task (r). 
We further divid task (r) into two part for the purpos of 
cross-brows fingerprinting. the first part, we call it write 
script (support), onli contain the inform of whether 
certain write script be supported, i.e., a list of zero and 
one where one mean support and zero not. As mentioned, 
we obtain the inform via box detection. the second part, 
we call it write script (images), be the imag render 
at the client-side. the single-brows entropi for write 
script (images) be 3.13 larg than the one for write script 
(support). that is, the imag do contain more inform than 
whether the write script be supported. the cross-brows 
stabil for write script (support) be calcul base on the 
result after appli our mask, becaus some write script 
be ship with the browser and not cross-brows stable. 
correspondingly, the cross-brows entropi for write script 
(support) be low than the single-brows one. 

15) cpu virtual cores: the number of cpu virtual 
cores, calcul from the hardwareconcurr valu onli 
(if not supported, the valu be “undefined”), have an entropi 
of 1.92 for single-brows fingerprinting. We expect that the 
entropi will increas in the future, becaus just befor our 
submission, firefox 48 start to support the new feature. 
the cross-brows stabil be 100%, becaus we can detect 
whether a browser support hardwareconcurr and appli 
a custom mask. the cross-brows entropi be differ 
from the single-brows one due to the size of data, and the 
normal entropi for both be veri similar. 

16) normal webgl renderer: the webgl render 
be not cross-brows fingerprintable, partli becaus differ 
browser provid differ level of information. We extract 
the common inform from differ browsers, and align 
the inform in a standard format. compar with the 
origin webgl render with 5.70 entropy, the entropi for 
the normal one be 4.98. the reason for the drop be that the 
extract will discard some information, e.g., for chrome, 
to align with other browsers, e.g., edg browser. correspond- 
ingly, the cross-brows stabil increas from 15.39% for 
the origin webgl render to 37.39% for the normal 
one. 

there be two thing worth note here. first, the webgl 
vendor do not provid more inform than the webgl 
renderer. that is, when we combin both valu together, the 
entropi be the one for webgl renderer. second, our gpu 
task have much more inform than the one provid by 
webgl vendor and renderer. some browsers, name firefox, 
do not provid webgl vendor and render information, which 
give u much room to fill the gap. furthermore, even when 
a browser provid such information, the entropi for our gpu 
task when combin togeth be 7.10, much larg than the 
5.70 entropi provid by webgl render. the reason be that 
the render be a combin of softwar and hardware, and 
webgl render onli provid the hardwar inform for 
hardwar rendering. 

D. observ 

dure our experi and implementations, we have 
observ sever interest fact and show them below in 
thi subsection: 

observ 1: our fingerprint featur be highli reliable, 
i.e., the remov of one singl featur have littl impact on the 
fingerprint results. 

In thi part, we show the impact of remov a singl 
featur from both amiuniqu and our approach, and then 
measur the uniqu of both. the result show that the 
uniqu of our fingerprint be still abov 99% when 
remov ani singl featur in tabl IV includ all the 
old one from amiuniqu and our new ones. At contrast, 
the uniqu for amiuniqu drop below 84% if remov 
ani singl one of the follow six attributes, name user 
agent, timezone, list of plugins, content language, list of http 
headers, and screen resolut and color depth. In sum, our 
approach be more reliabl than amiuniqu in term of use 
features. 

observ 2: softwar render can also be use for 
fingerprinting. 

one common understand for webgl be that softwar 
render may diminish all the differ caus by the 
graphic cards. however, our experi show that even soft- 
ware render can be use for fingerprinting. specifically, we 
select all the data where webgl be render by swiftshader, 
an open sourc softwar render invent by googl and 
use by chrome when hardwar render be unavailable. We 
calcul a special fingerprint onli contain all our gpu 
render tasks, i.e., task (a)–(p) exclud write script and 
video. 

due to the high adopt of hardwar rendering, we onli 
collect 88 case use swiftshad and find 11 distinct gpu 
fingerprint with 7 uniqu ones. the uniqu of softwar 
render be definit much low than the one of hardwar 
render but still not zero. that is, we need to be care 
when adopt softwar render to mitig webgl-bas 
fingerprinting. 

observ 3: webgl render be a combin of softwar 
and hardwar in which the hardwar contribut more than the 
software. 

In thi observation, we look at anoth extrem compar 
to softwar rendering, which be microsoft basic rendering. 
microsoft basic render provid a univers driver for all 
kind of graphic cards, i.e., the use of microsoft basic render- 
ing will minim the effect of softwar driver and show the 
one brought by the hardware. similar to the experi for 
softwar rendering, we select these that use microsoft basic 
render and calcul the fingerprints. 

for similar reason in softwar rendering, we onli collect 
32 case use microsoft basic render and find 18 distinct 
gpu fingerprint with 15 uniqu values. the uniqu of 
microsoft basic render be low than the one use normal 
graphic card drivers, mean that webgl be render by 
both softwar and hardware. meanwhile, we consid hardwar 
make more contributions, becaus the uniqu for mi- 
crosoft basic render be high than the one for the softwar 
renderer. 

observ 4: dataurl be implement differ across 
browsers. 

12 



In thi observation, we look at dataurl, a common format 
use in prior fingerprint to repres images. surprisingly, 
we find that dataurl be implement veri differ in 
browsers, i.e., if we convert an imag into dataurl, the 
represent vari a lot across browsers. thi be a good news 
for single-brows fingerprint but bad for cross-browser. As 
show in tabl iv, the cross-brows rate for canva be veri 
low (8.17%), becaus we adopt the code from amiuniqu 
where dataurl be use to store images. 

observ 5: some differ between render result be 
veri subtle, i.e., with one or two pixel variance. 

In thi last observation, we manual compar the differ- 
enc between render results, and find that while some 
of them be large, especi between softwar and hardwar 
rendering, some be veri subtle, especi when two graphic 
card be similar to each other. for example, the suzann 
model render by an imac and anoth mac pro onli differ 
one pixel on the texture, and if we rotat the model, the 
differ will be gone. 

vii. defens OF the propos fingerprint 

In thi section, we discu how to defend our propos 
browser fingerprinting. We will first start from exist de- 
fense, the famou tor browser, and then come to some vision 
of our defense. 

tor browser normal mani browser output to mitig 
exist browser fingerprinting. that is, mani featur be 
unavail in tor browsers—bas on our test, onli the 
follow features, notabl our newli proposed, still exist, 
which includ the screen width and height ratio, and audio 
context inform (e.g., sampl rate and max channel count). 
We believ that it be easi for tor browser to normal these 
remain outputs. 

anoth thing worth mention be that tor browser dis- 
abl canva by default, and will ask user to allow the usag 
of canvas. If the user do allow canvas, she can still be 
fingerprinted. the tor browser document also mention a 
unimpl softwar render solution, howev a note 
in section vi-d, the output of softwar render also differ 
significantli in the same browser. We still believ that thi 
be the way to pursue, but more care analysi be need to 
includ all the librari of softwar rendering. 

overall, the idea of defend browser fingerprint can 
be gener a virtualization, and we need to find a correct 
virtual layer. think about one extrem solution, which 
be a browser run insid a virtual machine—everyth be 
normal in the virtual machine, and the browser output 
be the same across differ physic machines. however, the 
drawback be that machin virtual be heavyweight. tor 
browser be anoth extreme—everyth be virtual a part 
of a browser. thi approach be lightweight, but we need to 
find all possibl fingerprint places, such a canva and 
audio context: If one place be missing, the browser can still 
be somehow fingerprinted. We leav it a our futur work to 
explor the correct virtual layer. 

viii. discuss ON ethic issu 

We have discuss ethic issu with the institut 
review board (irb) of our organization, and obtain the 
irb approval. specifically, although web track can be use 
to acquir privat information, the identifi that we obtain 
from crowdsourc workers, e.g., the behavior of comput 
graphic cards, be not privat themselves. onli when the 
identifi be associ with privat information, such a 
brows history, the combin be consid a private— 
however, thi step be out of scope of the research. our survey 
part, i.e., the studi about the statist of multipl browser 
usag in the appendix A, contain users’ brows habits. In 
order to ensur privacy, the survey be anonym and we do 
not store user ID from microworkers. 

ix. relat work 

In thi section, we discu relat work on exist web 
track and anti-track techniques. 

A. web track techniqu and measur 

We first talk about the first gener tracking, i.e., cooki 
or super-cooki based, and then the second generation, browser 
fingerprinting. 

1) cooki or super-cooki base tracking: there be much 
exist work focu on the measur or studi of cooki 
or super-cooki base web track techniques. mayer et 
al. [28] and sanchez et al. [40] conduct comprehens discus- 
sion about third-parti tracking, includ track techniques, 
busi models, defens choic and polici debates. anoth 
import measur work from roesner et al. propos 
a comprehens classif framework for differ web 
track deploy in real-world websit [39]. lerner et al. 
conduct an archaeolog studi of web tracking, includ 
cooki and super-cooki base a well a browser fingerprint- 
ing, from 1996 to 2016 [27]. soltani et al. and ayenson 
et al. measur the preval of non-cooki base state 
track and show how track compani use multipl client- 
side state to regener delet identifi [11, 41]. metwalley 
et al. [30] propos an unsupervis measur of web 
tracking. In addit to track behavior and techniques, 
krishnamurthi et al. [22–25] focu on the risk of harm result 
from web tracking, show that not onli user’ brows 
history, but also other sensit person information, such a 
name and email, can be leak out. 

2) browser fingerprinting: now let u discu browser fin- 
gerprinting, the second-gener web tracking. We first talk 
about exist measur studies. yen et al. and nikiforaki 
et al. discu differ second-gener track techniqu 
use in exist fingerprint tool and their effect in 
their work [36, 46]. acar et al. [9] perform a large-scal studi 
of three advanc web track mechanisms, one on second- 
gener web tracking, i.e., canva fingerprinting, and the 
other two stay on the first-gener web tracking, i.e., 
evercooki and use of ”cooki syncing” in conjunct with 
evercookies. fifield el al. [20] focu on a specif metric, i.e., 
the font, of second-gener web tracking. fpdetect [10] 
conduct a large-scal studi of million of most popular web- 
site by focu on the font detect with their framework. 
englehardt et al. [18] also conduct a large-scal studi on 1 

13 



million websit and find mani new fingerprint features, 
such a audiocontext. We have use their newli discov 
fingerprint featur a part of prior one in section II of 
our paper a well. 

now let u talk about browser fingerprint works. mow- 
eri et al. [32] be probabl one of the veri earli work in 
propos canvas-bas fingerprinting. some other work [31, 
33] focu on fingerprint browser javascript engine. nakibl 
et al. [34], a posit paper, propos sever hardware-bas 
track includ microphone, motion sensor and gpu. their 
gpu track onli includ timing-bas features, less reli- 
abl than the techniqu in the paper. laperdrix et al. [26], 
i.e., amiunique, perform a most extens studi on browser 
fingerprint with 17 attribut and we have compar with 
them throughout our paper. boda et al. [14] attempt to achiev 
cross-brows tracking, but their featur be old one from 
single-brows track includ IP address. As discussed, IP 
address be unreli when a machin be use a dhcp, 
behind a nat, or move to a new locat like a laptop. 

As a gener comparison with exist works, our approach 
introduc mani new featur on the OS and hardwar levels. 
for example, we introduc mani gpu featur such a tex- 
tures, varyings, light and models. for anoth example, we 
also introduc a side channel to detect instal write script 
and some new inform in audiocontext. all these new 
featur contribut to our high fingerprint uniqu and 
cross-brows stability. 

B. exist anti-track mechan 

We first talk about exist anti-track for the first- 
gener tracking, and then for the second. 

1) anti-track against cooki or super-cooki base 
techniques: roesner et al. [39] propos a tool call share- 
menot, defend social medium button tracking, such a face- 
book like button. privat brows mode [44, 45] isol 
normal brows from privat one with a separ user profile. 
similarly, trackingfre [37] adopt the profile-bas isola- 
tion and propos an indegree-bound graph for the profil 
creation. the Do not track (dnt) [43] header be a opt- 
out approach, which requir tracker compliance. As show 
by prior work [28, 39], dnt cannot effect protect user 
from track in real world. user can also disabl third-parti 
cookie, which be support by most browser to avoid cookie- 
base tracking. meng et al. [29] design a polici and empow 
user to control whether to be tracked, but they have to reli 
on an exist anti-track technique. 

all the aforement work focu on cooki or super- 
cooki base web tracking, and can either fulli or partial 
prevent such tracking. none of them can prevent the propos 
fingerprint in thi paper, becaus the propos belong to 
the second generation, which do not requir a server-side, 
state identifier. 

2) anti-track against browser fingerprinting: tor 
browser [38] can success defend mani browser finger- 
print techniques, includ featur propos in our paper. 
pleas refer to section vii for more details. other than the 
normal techniqu propos in tor browser, privarica- 
tor [35] add random nois to fingerprint- outputs. 

becaus privar be not open source, we could not test 
our fingerprint against their defense. 

X. conclus 

In conclusion, we have propos a novel browser finger- 
print that can identifi not onli user behind one browser but 
also these that use differ browser on the same machine. our 
approach adopt OS and hardwar level featur includ 
graphic card expos by webgl, audio stack by audio- 
context, and cpu by hardwareconcurrency. our evalu 
show that our approach can uniqu identifi more user than 
amiuniqu for single-brows fingerprinting, and than boda 
et al. for cross-brows fingerprinting. our approach be highli 
reliable, i.e., the remov of ani singl featur onli decreas 
the accuraci by at most 0.3%. 

acknowledg 

the author would like to thank anonym review for 
their thought comments. thi work be support in part 
by u.s. nation scienc foundat (nsf) under grant 
cns-1646662 and cns-1563843. the view and conclus 
contain herein be those of the author and should not be 
interpret a necessarili repres the offici polici or 
endorsements, either express or implied, of nsf. 

refer 

[1] core estimator. https://github.com/oftn-oswg/core-estimator. 
[2] [email threads] proposal: navigator.cores. https://lists.w3.org/archives/ 

public/public-whatwg-archive/2014may/0062.html. 
[3] [github] Am I unique? https://github.com/diversify- 

project/amiunique. 
[4] [graphic wikia] anti-aliasing. http://graphics.wikia.com/wiki/anti- 

aliasing. 
[5] panopticlick: Is your browser safe against tracking? https://panopticlick. 

eff.org/. 
[6] watched: A wall street journal privaci report. http://www.wsj.com/ 

public/page/what-they-know-digital-privacy.html. 
[7] [wikipedia] cube mapping. https://en.wikipedia.org/wiki/cub 

mapping. 
[8] [wikipedia] list of write systems. https://en.wikipedia.org/wiki/list 

of write systems. 
[9] G. acar, C. eubank, S. englehardt, M. juarez, A. narayanan, and 

C. diaz, “the web never forgets: persist track mechan in 
the wild,” in proceed of the 2014 acm sigsac confer on 
comput and commun security, ser. cc ’14, 2014, pp. 674– 
689. 

[10] G. acar, M. juarez, N. nikiforakis, C. diaz, S. gürses, F. piessens, 
and B. preneel, “fpdetective: dust the web for fingerprinters,” in 
proceed of the 2013 acm sigsac confer on comput and 
commun security, ser. cc ’13, 2013, pp. 1129–1140. 

[11] M. ayenson, D. wambach, A. soltani, N. good, and C. hoofnagle, 
“flash cooki and privaci ii: now with html5 and etag respawning,” 
avail at ssrn 1898390, 2011. 

[12] S. berger. you should instal two browsers. http://www.compukiss.com/ 
internet-and-security/you-should-install-two-browsers.html. 

[13] T. bigelajzen. cross browser zoom and pixel ratio detector. https:// 
github.com/tombigel/detect-zoom. 

[14] K. boda, A. M. földes, G. G. gulyás, and S. imre, “user track on the 
web via cross-brows fingerprinting,” in proceed of the 16th nordic 
confer on inform secur technolog for applications, ser. 
nordsec’11, 2012, pp. 31–46. 

[15] F. boesch. soft shadow mapping. http://codeflow.org/entries/2013/feb/ 
15/soft-shadow-mapping/. 

14 



tabl V: statist of browser usag 

singl >2 >3 chrome& chrome& 
browser browser browser firefox microsoft ie/edg 

30% 70% 13% 33% 20% 

[16] F. T. commission. cross-devic tracking. https://www.ftc.gov/news- 
events/events-calendar/2015/11/cross-device-tracking. 

[17] P. eckersley, “how uniqu be your web browser?” in proceed of 
the 10th intern confer on privaci enhanc technologies, 
ser. pets’10, 2010. 

[18] S. englehardt and A. narayanan, “onlin tracking: A 1-million-sit 
measur and analysis,” in proceed of the 22nd acm sigsac 
confer on comput and commun security, ser. cc ’16, 
2016. 

[19] A. etienn and J. etienne. classic suzann monkey from 
blender to get your game start with threex.suzanne. 
http://learningthreejs.com/blog/2014/05/09/classical-suzanne-monkey- 
from-blender-to-get-your-game-started-with-threex-dot-suzanne/. 

[20] D. fifield and S. egelman, “fingerprint web user through font 
metrics,” in financi cryptographi and data security. springer, 2015, 
pp. 107–124. 

[21] S. kamkar. evercookie. http://samy.pl/evercookie/. 
[22] B. krishnamurthy, K. naryshkin, and C. wills, “privaci leakag vs. 

protect measures: the grow disconnect,” in web 2.0 secur and 
privaci workshop, 2011. 

[23] B. krishnamurthi and C. wills, “privaci diffus on the web: a 
longitudin perspective,” in proceed of the 18th intern 
confer on world wide web. acm, 2009, pp. 541–550. 

[24] B. krishnamurthi and C. E. wills, “gener a privaci footprint on 
the internet,” in proceed of the 6th acm sigcomm confer on 
internet measurement. acm, 2006, pp. 65–70. 

[25] ——, “character privaci in onlin social networks,” in proceed- 
ing of the first workshop on onlin social networks. acm, 2008, pp. 
37–42. 

[26] P. laperdrix, W. rudametkin, and B. baudry, “beauti and the beast: 
divert modern web browser to build uniqu browser fingerprints,” 
in 37th ieee symposium on secur and privaci (s&p 2016), 2016. 

[27] A. lerner, A. K. simpson, T. kohno, and F. roesner, “internet jone and 
the raider of the lose trackers: An archaeolog studi of web track 
from 1996 to 2016,” in 25th usenix secur symposium (usenix 
secur 16), austin, tx, 2016. 

[28] J. R. mayer and J. C. mitchell, “third-parti web tracking: polici and 
technology,” in secur and privaci (sp), 2012 ieee symposium on. 
ieee, 2012, pp. 413–427. 

[29] W. meng, B. lee, X. xing, and W. lee, “trackmeornot: enabl flex- 
ibl control on web tracking,” in proceed of the 25th intern 
confer on world wide web, ser. www ’16, 2016, pp. 99–109. 

[30] H. metwalley and S. traverso, “unsupervis detect of web track- 
ers,” in globecom, 2015. 

[31] K. mowery, D. bogenreif, S. yilek, and H. shacham, “fingerprint 
inform in javascript implementations,” 2011. 

[32] K. moweri and H. shacham, “pixel perfect: fingerprint canva in 
html5,” 2012. 

[33] M. mulazzani, P. reschl, M. huber, M. leithner, S. schrittwieser, 
E. weippl, and F. wien, “fast and reliabl browser identif with 
javascript engin fingerprinting,” in w2sp, 2013. 

[34] G. nakibly, G. shelef, and S. yudilevich, “hardwar fingerprint 
use html5,” arxiv preprint arxiv:1503.01408, 2015. 

[35] N. nikiforakis, W. joosen, and B. livshits, “privaricator: deceiv 
fingerprint with littl white lies,” in proceed of the 24th inter- 
nation confer on world wide web, ser. www ’15, 2015, pp. 
820–830. 

[36] N. nikiforakis, A. kapravelos, W. joosen, C. kruegel, F. piessens, and 
G. vigna, “cookieless monster: explor the ecosystem of web-bas 

devic fingerprinting,” in ieee symposium on secur and privacy, 
2013. 

[37] X. pan, Y. cao, and Y. chen, “I do not know what you visit 
last summer - protect user from third-parti web track with 
trackingfre browser,” in ndss, 2015. 

[38] M. perry, E. clark, and S. murdoch, “the design and implement 
of the tor browser [draft][online], unit states,” 2015. 

[39] F. roesner, T. kohno, and D. wetherall, “detect and defend 
against third-parti track on the web,” in proceed of the 9th 
usenix confer on network system design and implementa- 
tion, ser. nsdi’12, 2012, pp. 12–12. 

[40] I. sánchez-rola, X. ugarte-pedrero, I. santos, and P. G. bringas, 
“track user like there be no tomorrow: privaci on the current 
internet,” in intern joint conference. springer, 2015, pp. 473– 
483. 

[41] A. soltani, S. canty, Q. mayo, L. thomas, and C. J. hoofnagle, 
“flash cooki and privacy,” in aaai spring symposium: intellig 
inform privaci management, 2010. 

[42] us-cert. secur your web browser. https://www.us-cert.gov/ 
publications/securing-your-web-browser. 

[43] wikipedia. Do not track policy. http://en.wikipedia.org/wiki/do not 
track policy. 

[44] ——. privaci mode. http://en.wikipedia.org/wiki/privaci mode. 
[45] M. xu, Y. jang, X. xing, T. kim, and W. lee, “ucognito: privat 

brows without tears,” in proceed of the 22nd acm sigsac 
confer on comput and commun security, ser. cc ’15, 
2015, pp. 438–449. 

[46] t.-f. yen, Y. xie, F. yu, R. P. yu, and M. abadi, “host fingerprint 
and track on the web: privaci and secur implications,” in pro- 
ceed of ndss, 2012. 

appendix A 
survey OF people’ usag OF multipl browser 

In thi appendix, we studi the statist of peopl who 
use multipl browser on the same machine. note that thi 
be a small-scale, separ studi from all other design and 
experi of the paper. We perform the studi to strengthen 
the motiv of the paper. our result show that peopl 
do use more than one browser on the same machin with a 
consider amount of time. 

now let u introduc our experi setup on microwork- 
ers, a crowdsourc website. We conduct a survey with an 
open question that ask survey taker which browser(s) they 
have and normal use a well a how much time in term of 
percentag they spend on each browser. they be free to write 
anyth into a multiple-lin text box. 

here be our experi results. We have collect 102 
answer with one answer just copi our survey link and an- 
other mention a browser that do not exist. after exclud 
these two invalid answers, we have exactli 100 in total. 95% 
of the survey user have instal more than two browser 
becaus IE or edg be instal by default. We further count 
the percentag of them use two or more browser regularly, 
i.e., they spend at least more than 5% time on one of the 
browser. 

the result of peopl use browser be show in tabl V. 
70% of the survey taker use two or more browser regularly, 
and onli 30% use a singl browser. browser type in the 
survey answer includ chrome, firefox, ie, edge, safari, 
coconut browser, and maxthon. the result show that peopl 
do use multipl browsers, and cross-brows fingerprint be 
import and necessary. 

15 


